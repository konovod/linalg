crystal_doc_search_index_callback({"repository_name":"linalg","body":"[![Linux CI](https://github.com/konovod/linalg/actions/workflows/linux.yml/badge.svg)](https://github.com/konovod/linalg/actions/workflows/linux.yml)\n[![MacOSX CI](https://github.com/konovod/linalg/actions/workflows/macos.yml/badge.svg)](https://github.com/konovod/linalg/actions/workflows/macos.yml)\n[![Windows CI](https://github.com/konovod/linalg/actions/workflows/windows.yml/badge.svg)](https://github.com/konovod/linalg/actions/workflows/windows.yml)\n[![API Documentation](https://img.shields.io/website?down_color=red&down_message=Offline&label=API%20Documentation&up_message=Online&url=https%3A%2F%konovod.github.io%2Flinalg%2F)](https://konovod.github.io/linalg)\n# linalg\nLinear algebra library in Crystal, uses LAPACK.\n- direct access to LAPACK methods\n- convenient Matrix(T) class, supports T=Float32, Float64 and Complex.\n- high-level interface similar to scipy.linalg or MATLAB.\n\nKilling SciPy, one module at a time.\n\n## Installation\n\n1. Install LAPACK and BLAS. `sudo apt install libopenblas-base liblapack3` for Ubuntu, `sudo pacman -S lapack` (for better performance use `openblas-lapack` package from AUR) for Arch. For Windows you need libopenblas.dll (and libopenblas.lib) from https://github.com/xianyi/OpenBLAS/releases\n\n2. (for Ubuntu 18) it seems package doesn't create symlink, so use\n- `sudo ln -s /usr/lib/lapack/liblapack.so.3 /usr/lib/liblapack.so`\n- `sudo ln -s /usr/lib/openblas-base/libblas.so.3 /usr/lib/libcblas.so`\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  linalg:\n    github: konovod/linalg\n```\n\n## Usage\n\n```crystal\nrequire \"linalg\"\n```\nBasic type aliases are\n- Mat = Matrix(Float64)\n- Mat32 = Matrix(Float32)\n- MatComplex = Matrix(Complex)\n\nComplex consisting of two Float32 isn't supported for now (it is easy, but I'm not sure if it's useful).\n\nTypes with prefix G (GMat, GMat32, GMatComplex) are for actually allocated matrices,\nothers are automatically converted to them when needed.\n\n```crystal\n#suggested to don't prefix LA:: everywhere\ninclude LA\n\n# create matrix from array of arrays (or tuple... everything Indexable)\nm = GMat[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n  [10, 11, 12],\n]\n\n# or using block\nm = GMat32.new(3, 4) { |i, j| i*3 + j + 1 }\n# or using one of other ways, check \"spec\" directory\n\n# do basic arithmetics\na = Mat.eye(3)\npp 2 * a - Mat.diag([2, 2, 2]) == Mat.zeros(3, 3) # => true\n\n# basic algebra\na = Mat.rand(5, 5) + 2 * Mat.identity(5)\npp (a.inv * a - Mat.identity(5)).norm < 1e-6\n\nb = Mat.rand(5, 1)\nx = LA.solve(a, b) # or a.solve(b)\npp (a*x - b).norm < 1e-6\n\nm = GMat[[-2, 4, 1], [2, -4, 1], [1, 1, 1]]\npp m.eigvals # => [-6.0, -1.0, 2.0]\n\n# extract submatrices (memory isn't copied as they reference to basic matrix)\nm = GMat[\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n]\npp m.columns[2] # LA::SubMatrix(Float64) (3x1, None):\n# [3.0]\n# [6.0]\n# [9.0]\n\nx = m[1..1, 1..2]\npp x        # => [5.0, 6.0]\nx[0, 0] = 0 # m[1,1] is now 0 (questionable feature? maybe should be ##[]! for modifiable submatrices and ##[] for CoW?)\ny = x.clone # now y is a separate matrix\ny[0, 0] = 1 # m[1,1] is still 0\npp m[1, 1]\n\n```\nother present features:\n\n- svd (`Mat#svd` or `Mat#svdvals` for just values)\n- lu decomposition (`Mat#lu`)\n```crystal\n# to just get P L U matrices\np, l, u = a.lu\n\n# to get them in compact form and use for solving linear equations:\na = GMat32[\n  [2, 4],\n  [2, 8]\n  ]\n\nlu = a.lu_factor # lu is LUMatrix(T) - immutable object that can return it's content and solve systems\nputs lu.solve(GMat32[[2], [4]])\n```\n- matrix rank determination (using SVD or QRP)\n- linear least squares problem (`LA.solvels` to just get decision or `LA.lstsq` to also get rank and singular values (TODO - and residues))\n- cholesky decomposition (`#cholesky`, `#cholesky!`, `#cho_solve`)\n- `hessenberg` form\n- `qr`, `rq`, `lq`, `ql` decompositions\n- `schur` and `qz` (generalized schur) decomposition\n- generalized eigenproblem (`eigs(a, b, ...)`)\n- creating special matrices like `pascal` or `toeplitz` (check scipy.md for a full list)\n- matrix exponent and trigonomertic functions\n- matrix exponentiation (to integer powers only atm (TODO - fractional))\n\n\nThere is also concept of `Mat#flags` that represent properties of matrix (symmetric, positive definite etc), they are used to automatically select faster algorithms from LAPACK. Flags are partially enforced by runtime checks, with the possibility of user override. For example, if we say that `a.assume!(MatrixFlags::Symmetric)` then `a.transpose` or `a + Mat.diag(*a.size)` will also have this flag, so the LAPACK routines for symmetrical matrices will be used. In fact, `a.transpose` will return matrix clone as for symmetric matrices A=A'.\n\nSupported flags:\n```crystal\nenum MatrixFlags\n  Symmetric\n  Hermitian\n  PositiveDefinite\n  Orthogonal\n  UpperTriangular\n  LowerTriangular\n  Triangular      = UpperTriangular | LowerTriangular\n```\nNOTE for complex matrices `Orthogonal` flag means `Unitary`.\n\nMain functions for flags are:\n```crystal\n  a.assume!(flag) # sets matrix flag without check, can lead to incorrect results if matrix do not have corresponding property.\n  a.detect?(flag) # checks if matrix has property, if yes sets the flag. Returns true if check positive\n  a.detect(flag) # same as `detect?`, but returns matrix a\n  a.detect # detect all possible flags\n  a.flags # returns matrix flags\n```\nMost operations - matrix addition, multiplication, inversion, transposition and decompositions correctly update flags, but any direct access like `a[i,j] = 0` or `a.map!{|v| v+1}` resets flags to `None`, so use `a.detect` after them if you need to preserve flags (or `a.assume!(f)` if detection is too slow).\n\n## Development\n\n### Roadmap:\n\n##### Important\n\n- [x] saving/loading from files\n- [x] ways to evade allocations during calculations\n- [x] Matrix exponent and trigonometric\n- [ ] other matrix functions\n- [ ] Banded matrices\n- [x] Column-major storage (optional?)\n- [ ] Other missing features from LAPACK (mostly selectable and orderable eigenvalues)\n- [ ] Sparse matrices (perhaps out of scope/deserves separate shard)\n- [ ] Other missing features from scipy.linalg (lyapunov/ricatti/sylvester equations, other things i don't know algorithms for)\n\n##### Not so important\n\n- [x] saving/loading to matlab-like string\n- [ ] better pretty-print, with alignment and various precision\n- [x] use blas for multiplication\n- [ ] more flags support (inversion of diagonal matrix and other trivial cases)\n\n## Contributing\n\n1. Fork it ( https://github.com/konovod/linalg/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [konovod](https://github.com/konovod) - creator and maintainer\n- [RainbowZephyr](https://github.com/RainbowZephyr) - pseudoinverse implementation\n- [jtanderson](https://github.com/jtanderson) - `arange`, open-ended ranges in submatrices\n- [MatthiasWinkelmann](https://github.com/MatthiasWinkelmann) - `GMat.max` fix\n","program":{"html_id":"linalg/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"linalg","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"linalg/Complex","path":"Complex.html","kind":"struct","full_name":"Complex","name":"Complex","abstract":false,"superclass":{"html_id":"linalg/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"linalg/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"linalg/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/matrix/num_helpers.cr","line_number":3,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L3"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"doc":"A complex number is a number represented in the form a + bi. In this form,\na and b are real numbers, and i is an imaginary number such as iÂ² = -1.\nThe a is the real part of the number, and the b is the imaginary part of\nthe number.\n\n```\nrequire \"complex\"\n\nComplex.new(1, 0)   # => 1.0 + 0.0.i\nComplex.new(5, -12) # => 5.0 - 12.0.i\n\n1.to_c # => 1.0 + 0.0.i\n1.i    # => 0.0 + 1.0.i\n```","summary":"<p>A complex number is a number represented in the form a + bi.</p>","constructors":[{"html_id":"new(value)-class-method","name":"new","doc":"Creates complex number from real or complex number","summary":"<p>Creates complex number from real or complex number</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/matrix/num_helpers.cr","line_number":5,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L5"},"def":{"name":"new","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"case value\nwhen Complex\n  new(value.real, value.imag)\nelse\n  new(value, 0.0)\nend"}}],"instance_methods":[{"html_id":"*(m:LA::Matrix(Complex))-instance-method","name":"*","doc":"Multiply scalar to matrix","summary":"<p>Multiply scalar to matrix</p>","abstract":false,"args":[{"name":"m","external_name":"m","restriction":"LA::Matrix(Complex)"}],"args_string":"(m : LA::Matrix(Complex))","args_html":"(m : <a href=\"LA/Matrix.html\">LA::Matrix</a>(<a href=\"Complex.html\">Complex</a>))","location":{"filename":"src/matrix/num_helpers.cr","line_number":15,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L15"},"def":{"name":"*","args":[{"name":"m","external_name":"m","restriction":"LA::Matrix(Complex)"}],"visibility":"Public","body":"m * self"}},{"html_id":"+(m:LA::Matrix)-instance-method","name":"+","doc":"Adds scalar to matrix","summary":"<p>Adds scalar to matrix</p>","abstract":false,"args":[{"name":"m","external_name":"m","restriction":"LA::Matrix"}],"args_string":"(m : LA::Matrix)","args_html":"(m : <a href=\"LA/Matrix.html\">LA::Matrix</a>)","location":{"filename":"src/matrix/num_helpers.cr","line_number":20,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L20"},"def":{"name":"+","args":[{"name":"m","external_name":"m","restriction":"LA::Matrix"}],"visibility":"Public","body":"m + self"}},{"html_id":"-(m:LA::Matrix)-instance-method","name":"-","doc":"Substract matrix from scalar","summary":"<p>Substract matrix from scalar</p>","abstract":false,"args":[{"name":"m","external_name":"m","restriction":"LA::Matrix"}],"args_string":"(m : LA::Matrix)","args_html":"(m : <a href=\"LA/Matrix.html\">LA::Matrix</a>)","location":{"filename":"src/matrix/num_helpers.cr","line_number":25,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L25"},"def":{"name":"-","args":[{"name":"m","external_name":"m","restriction":"LA::Matrix"}],"visibility":"Public","body":"(-m) + self"}},{"html_id":"chop-instance-method","name":"chop","doc":"Convert to real if imaginary paret is zero\n\nReturns nil if part is not zero","summary":"<p>Convert to real if imaginary paret is zero</p>","abstract":false,"location":{"filename":"src/matrix/num_helpers.cr","line_number":42,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L42"},"def":{"name":"chop","visibility":"Public","body":"self.imag.zero? ? self.real : nil"}},{"html_id":"cosh-instance-method","name":"cosh","doc":"Cosh for complex numbers","summary":"<p>Cosh for complex numbers</p>","abstract":false,"location":{"filename":"src/matrix/num_helpers.cr","line_number":35,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L35"},"def":{"name":"cosh","visibility":"Public","body":"((Math.exp(self)) + (Math.exp(-self))) / 2"}},{"html_id":"sinh-instance-method","name":"sinh","doc":"Sinh for complex numbers","summary":"<p>Sinh for complex numbers</p>","abstract":false,"location":{"filename":"src/matrix/num_helpers.cr","line_number":30,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L30"},"def":{"name":"sinh","visibility":"Public","body":"((Math.exp(self)) - (Math.exp(-self))) / 2"}}]},{"html_id":"linalg/Enumerable","path":"Enumerable.html","kind":"module","full_name":"Enumerable(T)","name":"Enumerable","abstract":false,"locations":[{"filename":"src/matrix/num_helpers.cr","line_number":90,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L90"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"linalg/LA/Matrix","kind":"class","full_name":"LA::Matrix(T)","name":"Matrix"}],"doc":"The `Enumerable` mixin provides collection classes with several traversal, searching,\nfiltering and querying methods.\n\nIncluding types must provide an `each` method, which yields successive members\nof the collection.\n\nFor example:\n\n```\nclass Three\n  include Enumerable(Int32)\n\n  def each\n    yield 1\n    yield 2\n    yield 3\n  end\nend\n\nthree = Three.new\nthree.to_a                # => [1, 2, 3]\nthree.select &.odd?       # => [1, 3]\nthree.all? { |x| x < 10 } # => true\n```\n\nNote that most search and filter methods traverse an Enumerable eagerly,\nproducing an `Array` as the result. For a lazy alternative refer to\nthe `Iterator` and `Iterable` modules.","summary":"<p>The <code><a href=\"Enumerable.html\">Enumerable</a></code> mixin provides collection classes with several traversal, searching, filtering and querying methods.</p>","instance_methods":[{"html_id":"product(initial:Complex)-instance-method","name":"product","doc":"Same as `#product` from stdlib, but for complex numbers","summary":"<p>Same as <code><a href=\"Enumerable.html#product%28initial%3AComplex%29-instance-method\">#product</a></code> from stdlib, but for complex numbers</p>","abstract":false,"args":[{"name":"initial","external_name":"initial","restriction":"Complex"}],"args_string":"(initial : Complex)","args_html":"(initial : <a href=\"Complex.html\">Complex</a>)","location":{"filename":"src/matrix/num_helpers.cr","line_number":97,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L97"},"def":{"name":"product","args":[{"name":"initial","external_name":"initial","restriction":"Complex"}],"visibility":"Public","body":"product(initial, &.itself)"}},{"html_id":"product(initial:Complex,&)-instance-method","name":"product","doc":"Same as `#product` from stdlib, but for complex numbers","summary":"<p>Same as <code><a href=\"Enumerable.html#product%28initial%3AComplex%29-instance-method\">#product</a></code> from stdlib, but for complex numbers</p>","abstract":false,"args":[{"name":"initial","external_name":"initial","restriction":"Complex"}],"args_string":"(initial : Complex, &)","args_html":"(initial : <a href=\"Complex.html\">Complex</a>, &)","location":{"filename":"src/matrix/num_helpers.cr","line_number":92,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L92"},"def":{"name":"product","args":[{"name":"initial","external_name":"initial","restriction":"Complex"}],"yields":1,"block_arity":1,"visibility":"Public","body":"reduce(initial) do |memo, e|\n  memo * (yield e)\nend"}}]},{"html_id":"linalg/LA","path":"LA.html","kind":"module","full_name":"LA","name":"LA","abstract":false,"locations":[{"filename":"src/linalg.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg.cr#L4"},{"filename":"src/linalg/cholesky.cr","line_number":6,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/cholesky.cr#L6"},{"filename":"src/linalg/eig.cr","line_number":6,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/eig.cr#L6"},{"filename":"src/linalg/expm.cr","line_number":3,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/expm.cr#L3"},{"filename":"src/linalg/lapack_helper.cr","line_number":3,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lapack_helper.cr#L3"},{"filename":"src/linalg/linalg.cr","line_number":6,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L6"},{"filename":"src/linalg/lu.cr","line_number":3,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lu.cr#L3"},{"filename":"src/linalg/matfun.cr","line_number":3,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L3"},{"filename":"src/linalg/mult.cr","line_number":5,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/mult.cr#L5"},{"filename":"src/linalg/qr.cr","line_number":3,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/qr.cr#L3"},{"filename":"src/linalg/rq_lq_ql.cr","line_number":40,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/rq_lq_ql.cr#L40"},{"filename":"src/linalg/schur.cr","line_number":6,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/schur.cr#L6"},{"filename":"src/linalg/workpool.cr","line_number":1,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/workpool.cr#L1"},{"filename":"src/matrix/banded_matrix.cr","line_number":6,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L6"},{"filename":"src/matrix/flag_checks.cr","line_number":1,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flag_checks.cr#L1"},{"filename":"src/matrix/flags.cr","line_number":1,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flags.cr#L1"},{"filename":"src/matrix/general_matrix.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L4"},{"filename":"src/matrix/iteration.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/iteration.cr#L4"},{"filename":"src/matrix/matrix.cr","line_number":3,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L3"},{"filename":"src/matrix/special_matrix.cr","line_number":5,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L5"},{"filename":"src/matrix/submatrix.cr","line_number":3,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/submatrix.cr#L3"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"SUPPORTED_TYPES","name":"SUPPORTED_TYPES","value":"{Float32, Float64, Complex}","doc":"Types supported by LAPACK\n\n TODO - Complex64?","summary":"<p>Types supported by LAPACK</p>"},{"id":"WORK_POOL","name":"WORK_POOL","value":"WorkPool.new","doc":"Actual work pool used by lapack routines","summary":"<p>Actual work pool used by lapack routines</p>"}],"class_methods":[{"html_id":"cho_solve(a,b,*,overwrite_b=false)-class-method","name":"cho_solve","abstract":false,"args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"args_string":"(a, b, *, overwrite_b = false)","args_html":"(a, b, *, overwrite_b = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/cholesky.cr","line_number":7,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/cholesky.cr#L7"},"def":{"name":"cho_solve","args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"splat_index":2,"visibility":"Public","body":"a.cho_solve(b, overwrite_b: overwrite_b)"}},{"html_id":"coshm(mat)-class-method","name":"coshm","abstract":false,"args":[{"name":"mat","external_name":"mat","restriction":""}],"args_string":"(mat)","args_html":"(mat)","location":{"filename":"src/linalg/matfun.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L4"},"def":{"name":"coshm","args":[{"name":"mat","external_name":"mat","restriction":""}],"visibility":"Public","body":"mat.coshm"}},{"html_id":"cosm(mat)-class-method","name":"cosm","abstract":false,"args":[{"name":"mat","external_name":"mat","restriction":""}],"args_string":"(mat)","args_html":"(mat)","location":{"filename":"src/linalg/matfun.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L4"},"def":{"name":"cosm","args":[{"name":"mat","external_name":"mat","restriction":""}],"visibility":"Public","body":"mat.cosm"}},{"html_id":"eigs(a,b,*,need_left:Bool,need_right:Bool,overwrite_a=false,overwrite_b=false)-class-method","name":"eigs","abstract":false,"args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"need_left","external_name":"need_left","restriction":"Bool"},{"name":"need_right","external_name":"need_right","restriction":"Bool"},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"args_string":"(a, b, *, need_left : Bool, need_right : Bool, overwrite_a = false, overwrite_b = false)","args_html":"(a, b, *, need_left : Bool, need_right : Bool, overwrite_a = <span class=\"n\">false</span>, overwrite_b = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/eig.cr","line_number":7,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/eig.cr#L7"},"def":{"name":"eigs","args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"need_left","external_name":"need_left","restriction":"Bool"},{"name":"need_right","external_name":"need_right","restriction":"Bool"},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"splat_index":2,"visibility":"Public","body":"a.eigs(b: b, need_left: need_left, need_right: need_right, overwrite_a: overwrite_a, overwrite_b: overwrite_b)"}},{"html_id":"expm(mat)-class-method","name":"expm","abstract":false,"args":[{"name":"mat","external_name":"mat","restriction":""}],"args_string":"(mat)","args_html":"(mat)","location":{"filename":"src/linalg/matfun.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L4"},"def":{"name":"expm","args":[{"name":"mat","external_name":"mat","restriction":""}],"visibility":"Public","body":"mat.expm"}},{"html_id":"inv(matrix,*,overwrite_a=false)-class-method","name":"inv","abstract":false,"args":[{"name":"matrix","external_name":"matrix","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(matrix, *, overwrite_a = false)","args_html":"(matrix, *, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":33,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L33"},"def":{"name":"inv","args":[{"name":"matrix","external_name":"matrix","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":1,"visibility":"Public","body":"overwrite_a ? matrix.inv! : matrix.inv"}},{"html_id":"lstsq(a,b,method:LSMethod=LSMethod::Auto,*,overwrite_a=false,overwrite_b=false,cond=-1)-class-method","name":"lstsq","abstract":false,"args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""},{"name":"method","default_value":"LSMethod::Auto","external_name":"method","restriction":"LSMethod"},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""},{"name":"cond","default_value":"-1","external_name":"cond","restriction":""}],"args_string":"(a, b, method : LSMethod = LSMethod::Auto, *, overwrite_a = false, overwrite_b = false, cond = -1)","args_html":"(a, b, method : <a href=\"LA/LSMethod.html\">LSMethod</a> = <span class=\"t\">LSMethod</span><span class=\"t\">::</span><span class=\"t\">Auto</span>, *, overwrite_a = <span class=\"n\">false</span>, overwrite_b = <span class=\"n\">false</span>, cond = <span class=\"n\">-1</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":41,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L41"},"def":{"name":"lstsq","args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""},{"name":"method","default_value":"LSMethod::Auto","external_name":"method","restriction":"LSMethod"},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""},{"name":"cond","default_value":"-1","external_name":"cond","restriction":""}],"splat_index":3,"visibility":"Public","body":"a.lstsq(b, method, overwrite_a: overwrite_a, overwrite_b: overwrite_b, cond: cond)"}},{"html_id":"qz(a,b,*,overwrite_a=false,overwrite_b=false)-class-method","name":"qz","abstract":false,"args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"args_string":"(a, b, *, overwrite_a = false, overwrite_b = false)","args_html":"(a, b, *, overwrite_a = <span class=\"n\">false</span>, overwrite_b = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/schur.cr","line_number":7,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/schur.cr#L7"},"def":{"name":"qz","args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"splat_index":2,"visibility":"Public","body":"a.qz(b, overwrite_a: overwrite_a, overwrite_b: overwrite_b)"}},{"html_id":"sinhm(mat)-class-method","name":"sinhm","abstract":false,"args":[{"name":"mat","external_name":"mat","restriction":""}],"args_string":"(mat)","args_html":"(mat)","location":{"filename":"src/linalg/matfun.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L4"},"def":{"name":"sinhm","args":[{"name":"mat","external_name":"mat","restriction":""}],"visibility":"Public","body":"mat.sinhm"}},{"html_id":"sinm(mat)-class-method","name":"sinm","abstract":false,"args":[{"name":"mat","external_name":"mat","restriction":""}],"args_string":"(mat)","args_html":"(mat)","location":{"filename":"src/linalg/matfun.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L4"},"def":{"name":"sinm","args":[{"name":"mat","external_name":"mat","restriction":""}],"visibility":"Public","body":"mat.sinm"}},{"html_id":"solve(a,b,*,overwrite_a=false,overwrite_b=false)-class-method","name":"solve","abstract":false,"args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"args_string":"(a, b, *, overwrite_a = false, overwrite_b = false)","args_html":"(a, b, *, overwrite_a = <span class=\"n\">false</span>, overwrite_b = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":37,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L37"},"def":{"name":"solve","args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"splat_index":2,"visibility":"Public","body":"a.solve(b, overwrite_a: overwrite_a, overwrite_b: overwrite_b)"}},{"html_id":"solvels(a,b,*,overwrite_a=false,overwrite_b=false,cond=-1)-class-method","name":"solvels","abstract":false,"args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""},{"name":"cond","default_value":"-1","external_name":"cond","restriction":""}],"args_string":"(a, b, *, overwrite_a = false, overwrite_b = false, cond = -1)","args_html":"(a, b, *, overwrite_a = <span class=\"n\">false</span>, overwrite_b = <span class=\"n\">false</span>, cond = <span class=\"n\">-1</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":45,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L45"},"def":{"name":"solvels","args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""},{"name":"cond","default_value":"-1","external_name":"cond","restriction":""}],"splat_index":2,"visibility":"Public","body":"a.solvels(b, overwrite_a: overwrite_a, overwrite_b: overwrite_b, cond: cond)"}},{"html_id":"svd(matrix,*,overwrite_a=false)-class-method","name":"svd","abstract":false,"args":[{"name":"matrix","external_name":"matrix","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(matrix, *, overwrite_a = false)","args_html":"(matrix, *, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":49,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L49"},"def":{"name":"svd","args":[{"name":"matrix","external_name":"matrix","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":1,"visibility":"Public","body":"matrix.svd(overwrite_a: overwrite_a)"}},{"html_id":"tanhm(mat)-class-method","name":"tanhm","abstract":false,"args":[{"name":"mat","external_name":"mat","restriction":""}],"args_string":"(mat)","args_html":"(mat)","location":{"filename":"src/linalg/matfun.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L4"},"def":{"name":"tanhm","args":[{"name":"mat","external_name":"mat","restriction":""}],"visibility":"Public","body":"mat.tanhm"}},{"html_id":"tanm(mat)-class-method","name":"tanm","abstract":false,"args":[{"name":"mat","external_name":"mat","restriction":""}],"args_string":"(mat)","args_html":"(mat)","location":{"filename":"src/linalg/matfun.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L4"},"def":{"name":"tanm","args":[{"name":"mat","external_name":"mat","restriction":""}],"visibility":"Public","body":"mat.tanm"}}],"instance_methods":[{"html_id":"coshm(mat)-instance-method","name":"coshm","abstract":false,"args":[{"name":"mat","external_name":"mat","restriction":""}],"args_string":"(mat)","args_html":"(mat)","location":{"filename":"src/linalg/matfun.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L4"},"def":{"name":"coshm","args":[{"name":"mat","external_name":"mat","restriction":""}],"visibility":"Public","body":"mat.coshm"}},{"html_id":"cosm(mat)-instance-method","name":"cosm","abstract":false,"args":[{"name":"mat","external_name":"mat","restriction":""}],"args_string":"(mat)","args_html":"(mat)","location":{"filename":"src/linalg/matfun.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L4"},"def":{"name":"cosm","args":[{"name":"mat","external_name":"mat","restriction":""}],"visibility":"Public","body":"mat.cosm"}},{"html_id":"expm(mat)-instance-method","name":"expm","abstract":false,"args":[{"name":"mat","external_name":"mat","restriction":""}],"args_string":"(mat)","args_html":"(mat)","location":{"filename":"src/linalg/matfun.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L4"},"def":{"name":"expm","args":[{"name":"mat","external_name":"mat","restriction":""}],"visibility":"Public","body":"mat.expm"}},{"html_id":"sinhm(mat)-instance-method","name":"sinhm","abstract":false,"args":[{"name":"mat","external_name":"mat","restriction":""}],"args_string":"(mat)","args_html":"(mat)","location":{"filename":"src/linalg/matfun.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L4"},"def":{"name":"sinhm","args":[{"name":"mat","external_name":"mat","restriction":""}],"visibility":"Public","body":"mat.sinhm"}},{"html_id":"sinm(mat)-instance-method","name":"sinm","abstract":false,"args":[{"name":"mat","external_name":"mat","restriction":""}],"args_string":"(mat)","args_html":"(mat)","location":{"filename":"src/linalg/matfun.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L4"},"def":{"name":"sinm","args":[{"name":"mat","external_name":"mat","restriction":""}],"visibility":"Public","body":"mat.sinm"}},{"html_id":"tanhm(mat)-instance-method","name":"tanhm","abstract":false,"args":[{"name":"mat","external_name":"mat","restriction":""}],"args_string":"(mat)","args_html":"(mat)","location":{"filename":"src/linalg/matfun.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L4"},"def":{"name":"tanhm","args":[{"name":"mat","external_name":"mat","restriction":""}],"visibility":"Public","body":"mat.tanhm"}},{"html_id":"tanm(mat)-instance-method","name":"tanm","abstract":false,"args":[{"name":"mat","external_name":"mat","restriction":""}],"args_string":"(mat)","args_html":"(mat)","location":{"filename":"src/linalg/matfun.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L4"},"def":{"name":"tanm","args":[{"name":"mat","external_name":"mat","restriction":""}],"visibility":"Public","body":"mat.tanm"}}],"types":[{"html_id":"linalg/LA/Axis","path":"LA/Axis.html","kind":"enum","full_name":"LA::Axis","name":"Axis","abstract":false,"ancestors":[{"html_id":"linalg/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"linalg/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"linalg/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/matrix/matrix.cr","line_number":9,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L9"}],"repository_name":"linalg","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Columns","name":"Columns","value":"0"},{"id":"Rows","name":"Rows","value":"1"}],"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"},"instance_methods":[{"html_id":"columns?-instance-method","name":"columns?","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":10,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L10"},"def":{"name":"columns?","visibility":"Public","body":"self == Columns"}},{"html_id":"rows?-instance-method","name":"rows?","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":11,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L11"},"def":{"name":"rows?","visibility":"Public","body":"self == Rows"}}]},{"html_id":"linalg/LA/BandedMatrix","path":"LA/BandedMatrix.html","kind":"class","full_name":"LA::BandedMatrix(T)","name":"BandedMatrix","abstract":false,"superclass":{"html_id":"linalg/LA/Matrix","kind":"class","full_name":"LA::Matrix","name":"Matrix"},"ancestors":[{"html_id":"linalg/LA/Matrix","kind":"class","full_name":"LA::Matrix","name":"Matrix"},{"html_id":"linalg/LA/LapackHelper","kind":"module","full_name":"LA::LapackHelper","name":"LapackHelper"},{"html_id":"linalg/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"linalg/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/matrix/banded_matrix.cr","line_number":8,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L8"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"},"doc":"banded matrix, heap-allocated","summary":"<p>banded matrix, heap-allocated</p>","class_methods":[{"html_id":"diag(nrows,ncolumns,values)-class-method","name":"diag","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"values","external_name":"values","restriction":""}],"args_string":"(nrows, ncolumns, values)","args_html":"(nrows, ncolumns, values)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":100,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L100"},"def":{"name":"diag","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"values","external_name":"values","restriction":""}],"visibility":"Public","body":"new(nrows, ncolumns, 0, 0, MatrixFlags.for_diag(nrows == ncolumns)) do |i, j|\n  values[i]\nend"}},{"html_id":"rand(nrows,ncolumns,upper_band:Int32,lower_band:Int32,rng:Random=Random::DEFAULT)-class-method","name":"rand","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"upper_band","external_name":"upper_band","restriction":"Int32"},{"name":"lower_band","external_name":"lower_band","restriction":"Int32"},{"name":"rng","default_value":"Random::DEFAULT","external_name":"rng","restriction":"Random"}],"args_string":"(nrows, ncolumns, upper_band : Int32, lower_band : Int32, rng : Random = Random::DEFAULT)","args_html":"(nrows, ncolumns, upper_band : Int32, lower_band : Int32, rng : Random = <span class=\"t\">Random</span><span class=\"t\">::</span><span class=\"t\">DEFAULT</span>)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":321,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L321"},"def":{"name":"rand","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"upper_band","external_name":"upper_band","restriction":"Int32"},{"name":"lower_band","external_name":"lower_band","restriction":"Int32"},{"name":"rng","default_value":"Random::DEFAULT","external_name":"rng","restriction":"Random"}],"visibility":"Public","body":"new(nrows, ncolumns, upper_band, lower_band) do |i, j|\n  rng.rand\nend"}},{"html_id":"rand(nrows,ncolumns,upper_band:Int32,rng:Random=Random::DEFAULT)-class-method","name":"rand","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"upper_band","external_name":"upper_band","restriction":"Int32"},{"name":"rng","default_value":"Random::DEFAULT","external_name":"rng","restriction":"Random"}],"args_string":"(nrows, ncolumns, upper_band : Int32, rng : Random = Random::DEFAULT)","args_html":"(nrows, ncolumns, upper_band : Int32, rng : Random = <span class=\"t\">Random</span><span class=\"t\">::</span><span class=\"t\">DEFAULT</span>)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":325,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L325"},"def":{"name":"rand","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"upper_band","external_name":"upper_band","restriction":"Int32"},{"name":"rng","default_value":"Random::DEFAULT","external_name":"rng","restriction":"Random"}],"visibility":"Public","body":"rand(nrows, ncolumns, upper_band, upper_band, rng)"}}],"constructors":[{"html_id":"new(nrows:Int32,ncolumns:Int32,upper_band:Int32,lower_band:Int32,values:Indexable)-class-method","name":"new","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":"::Int32"},{"name":"ncolumns","external_name":"ncolumns","restriction":"::Int32"},{"name":"upper_band","external_name":"upper_band","restriction":"::Int32"},{"name":"lower_band","external_name":"lower_band","restriction":"::Int32"},{"name":"values","external_name":"values","restriction":"Indexable"}],"args_string":"(nrows : Int32, ncolumns : Int32, upper_band : Int32, lower_band : Int32, values : Indexable)","args_html":"(nrows : Int32, ncolumns : Int32, upper_band : Int32, lower_band : Int32, values : Indexable)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":68,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L68"},"def":{"name":"new","args":[{"name":"nrows","external_name":"nrows","restriction":"::Int32"},{"name":"ncolumns","external_name":"ncolumns","restriction":"::Int32"},{"name":"upper_band","external_name":"upper_band","restriction":"::Int32"},{"name":"lower_band","external_name":"lower_band","restriction":"::Int32"},{"name":"values","external_name":"values","restriction":"Indexable"}],"visibility":"Public","body":"_ = BandedMatrix(T).allocate\n_.initialize(nrows, ncolumns, upper_band, lower_band, values)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(nrows,ncolumns,upper_band,values:Indexable)-class-method","name":"new","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"upper_band","external_name":"upper_band","restriction":""},{"name":"values","external_name":"values","restriction":"Indexable"}],"args_string":"(nrows, ncolumns, upper_band, values : Indexable)","args_html":"(nrows, ncolumns, upper_band, values : Indexable)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":64,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L64"},"def":{"name":"new","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"upper_band","external_name":"upper_band","restriction":""},{"name":"values","external_name":"values","restriction":"Indexable"}],"visibility":"Public","body":"new(nrows, ncolumns, upper_band, upper_band, values)"}},{"html_id":"new(nrows:Int32,ncolumns:Int32,upper_band:Int32,lower_band:Int32=upper_band,flags:LA::MatrixFlags=MatrixFlags::None)-class-method","name":"new","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":"::Int32"},{"name":"ncolumns","external_name":"ncolumns","restriction":"::Int32"},{"name":"upper_band","external_name":"upper_band","restriction":"::Int32"},{"name":"lower_band","default_value":"upper_band","external_name":"lower_band","restriction":"::Int32"},{"name":"flags","default_value":"MatrixFlags::None","external_name":"flags","restriction":"::LA::MatrixFlags"}],"args_string":"(nrows : Int32, ncolumns : Int32, upper_band : Int32, lower_band : Int32 = upper_band, flags : LA::MatrixFlags = MatrixFlags::None)","args_html":"(nrows : Int32, ncolumns : Int32, upper_band : Int32, lower_band : Int32 = upper_band, flags : <a href=\"../LA/MatrixFlags.html\">LA::MatrixFlags</a> = <span class=\"t\">MatrixFlags</span><span class=\"t\">::</span><span class=\"t\">None</span>)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":45,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L45"},"def":{"name":"new","args":[{"name":"nrows","external_name":"nrows","restriction":"::Int32"},{"name":"ncolumns","external_name":"ncolumns","restriction":"::Int32"},{"name":"upper_band","external_name":"upper_band","restriction":"::Int32"},{"name":"lower_band","default_value":"upper_band","external_name":"lower_band","restriction":"::Int32"},{"name":"flags","default_value":"MatrixFlags::None","external_name":"flags","restriction":"::LA::MatrixFlags"}],"visibility":"Public","body":"_ = BandedMatrix(T).allocate\n_.initialize(nrows, ncolumns, upper_band, lower_band, flags)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(nrows:Int32,ncolumns:Int32,upper_band:Int32,lower_band:Int32=upper_band,flags:LA::MatrixFlags=MatrixFlags::None,&)-class-method","name":"new","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":"::Int32"},{"name":"ncolumns","external_name":"ncolumns","restriction":"::Int32"},{"name":"upper_band","external_name":"upper_band","restriction":"::Int32"},{"name":"lower_band","default_value":"upper_band","external_name":"lower_band","restriction":"::Int32"},{"name":"flags","default_value":"MatrixFlags::None","external_name":"flags","restriction":"::LA::MatrixFlags"}],"args_string":"(nrows : Int32, ncolumns : Int32, upper_band : Int32, lower_band : Int32 = upper_band, flags : LA::MatrixFlags = MatrixFlags::None, &)","args_html":"(nrows : Int32, ncolumns : Int32, upper_band : Int32, lower_band : Int32 = upper_band, flags : <a href=\"../LA/MatrixFlags.html\">LA::MatrixFlags</a> = <span class=\"t\">MatrixFlags</span><span class=\"t\">::</span><span class=\"t\">None</span>, &)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":51,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L51"},"def":{"name":"new","args":[{"name":"nrows","external_name":"nrows","restriction":"::Int32"},{"name":"ncolumns","external_name":"ncolumns","restriction":"::Int32"},{"name":"upper_band","external_name":"upper_band","restriction":"::Int32"},{"name":"lower_band","default_value":"upper_band","external_name":"lower_band","restriction":"::Int32"},{"name":"flags","default_value":"MatrixFlags::None","external_name":"flags","restriction":"::LA::MatrixFlags"}],"yields":2,"block_arity":2,"visibility":"Public","body":"_ = BandedMatrix(T).allocate\n_.initialize(nrows, ncolumns, upper_band, lower_band, flags) do |_arg0, _arg1|\n  yield _arg0, _arg1\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(matrix:BandedMatrix)-class-method","name":"new","abstract":false,"args":[{"name":"matrix","external_name":"matrix","restriction":"BandedMatrix"}],"args_string":"(matrix : BandedMatrix)","args_html":"(matrix : <a href=\"../LA/BandedMatrix.html\">BandedMatrix</a>)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":92,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L92"},"def":{"name":"new","args":[{"name":"matrix","external_name":"matrix","restriction":"BandedMatrix"}],"visibility":"Public","body":"(new(matrix.nrows, matrix.ncolumns, matrix.upper_band, matrix.lower_band, matrix.flags)).tap do |result|\n  matrix.raw_banded.each_with_index do |v, i|\n    result.raw_banded[i] = T.new(v)\n  end\nend"}},{"html_id":"new(matrix:Matrix,tolerance=matrix.tolerance)-class-method","name":"new","abstract":false,"args":[{"name":"matrix","external_name":"matrix","restriction":"Matrix"},{"name":"tolerance","default_value":"matrix.tolerance","external_name":"tolerance","restriction":""}],"args_string":"(matrix : Matrix, tolerance = matrix.tolerance)","args_html":"(matrix : <a href=\"../LA/Matrix.html\">Matrix</a>, tolerance = matrix.tolerance)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":106,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L106"},"def":{"name":"new","args":[{"name":"matrix","external_name":"matrix","restriction":"Matrix"},{"name":"tolerance","default_value":"matrix.tolerance","external_name":"tolerance","restriction":""}],"visibility":"Public","body":"upper_band = matrix.ncolumns - 1\n(matrix.ncolumns - 1).to(1) do |i|\n  if (matrix.diag(i)).all? do |v|\n    v.abs <= tolerance\n  end\n  else\n    break\n  end\n  upper_band = i - 1\nend\nlower_band = matrix.nrows - 1\n(matrix.nrows - 1).to(1) do |i|\n  if (matrix.diag(-i)).all? do |v|\n    v.abs <= tolerance\n  end\n  else\n    break\n  end\n  lower_band = i - 1\nend\nnew(matrix.nrows, matrix.ncolumns, upper_band, lower_band, matrix.flags) do |i, j|\n  matrix.unsafe_fetch(i, j)\nend\n"}}],"instance_methods":[{"html_id":"+(m:BandedMatrix(T))-instance-method","name":"+","doc":"returns element-wise sum","summary":"<p>returns element-wise sum</p>","abstract":false,"args":[{"name":"m","external_name":"m","restriction":"BandedMatrix(T)"}],"args_string":"(m : BandedMatrix(T))","args_html":"(m : <a href=\"../LA/BandedMatrix.html\">BandedMatrix</a>(T))","location":{"filename":"src/matrix/banded_matrix.cr","line_number":274,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L274"},"def":{"name":"+","args":[{"name":"m","external_name":"m","restriction":"BandedMatrix(T)"}],"visibility":"Public","body":"assert_same_size(m)\nresult = BandedMatrix(T).new(nrows, ncolumns, {upper_band, m.upper_band}.max, {lower_band, m.lower_band}.max, flags.sum(m.flags)) do |i, j|\n  (self.unsafe_fetch(i, j)) + (m.unsafe_fetch(i, j))\nend\n"}},{"html_id":"-(m:BandedMatrix(T))-instance-method","name":"-","doc":"returns element-wise subtract","summary":"<p>returns element-wise subtract</p>","abstract":false,"args":[{"name":"m","external_name":"m","restriction":"BandedMatrix(T)"}],"args_string":"(m : BandedMatrix(T))","args_html":"(m : <a href=\"../LA/BandedMatrix.html\">BandedMatrix</a>(T))","location":{"filename":"src/matrix/banded_matrix.cr","line_number":282,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L282"},"def":{"name":"-","args":[{"name":"m","external_name":"m","restriction":"BandedMatrix(T)"}],"visibility":"Public","body":"assert_same_size(m)\nresult = BandedMatrix(T).new(nrows, ncolumns, {upper_band, m.upper_band}.max, {lower_band, m.lower_band}.max, flags.sum(m.flags)) do |i, j|\n  (self.unsafe_fetch(i, j)) - (m.unsafe_fetch(i, j))\nend\n"}},{"html_id":"==(other:BandedMatrix(T))-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"BandedMatrix(T)"}],"args_string":"(other : BandedMatrix(T))","args_html":"(other : <a href=\"../LA/BandedMatrix.html\">BandedMatrix</a>(T))","location":{"filename":"src/matrix/banded_matrix.cr","line_number":180,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L180"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"BandedMatrix(T)"}],"visibility":"Public","body":"if (nrows == other.nrows) && (ncolumns == other.ncolumns)\nelse\n  return false\nend\nmaxupper = {upper_band, other.upper_band}.max\nmaxlower = {lower_band, other.lower_band}.max\nrange = (-maxupper)..maxlower\neach_index(all: true) do |i, j|\n  if range.includes?(i - j)\n  else\n    next\n  end\n  if (other.unsafe_fetch(i, j)) != (unsafe_fetch(i, j))\n    return false\n  end\nend\ntrue\n"}},{"html_id":"add!(k:Number,m:BandedMatrix)-instance-method","name":"add!","abstract":false,"args":[{"name":"k","external_name":"k","restriction":"Number"},{"name":"m","external_name":"m","restriction":"BandedMatrix"}],"args_string":"(k : Number, m : BandedMatrix)","args_html":"(k : <a href=\"../Number.html\">Number</a>, m : <a href=\"../LA/BandedMatrix.html\">BandedMatrix</a>)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":308,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L308"},"def":{"name":"add!","args":[{"name":"k","external_name":"k","restriction":"Number"},{"name":"m","external_name":"m","restriction":"BandedMatrix"}],"visibility":"Public","body":"assert_same_size(m)\nset_bands({upper_band, m.upper_band}.max, {lower_band, m.lower_band}.max)\noldflags = flags\nmap_with_index! do |v, i, j|\n  v + (k * (m.unsafe_fetch(i, j)))\nend\nself.flags = oldflags.sum(m.flags.scale(k.is_a?(Complex) && (k.imag != 0)))\nself\n"}},{"html_id":"add!(k:Number,m:Matrix)-instance-method","name":"add!","doc":"Perform inplace addition with matrix `m` multiplied to scalar `k`\n\n`a.add!(k, b)` is equal to `a = a + k * b`, but faster as no new matrix is allocated","summary":"<p>Perform inplace addition with matrix <code>m</code> multiplied to scalar <code>k</code></p>","abstract":false,"args":[{"name":"k","external_name":"k","restriction":"Number"},{"name":"m","external_name":"m","restriction":"Matrix"}],"args_string":"(k : Number, m : Matrix)","args_html":"(k : <a href=\"../Number.html\">Number</a>, m : <a href=\"../LA/Matrix.html\">Matrix</a>)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":317,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L317"},"def":{"name":"add!","args":[{"name":"k","external_name":"k","restriction":"Number"},{"name":"m","external_name":"m","restriction":"Matrix"}],"visibility":"Public","body":"raise(ArgumentError.new(\"can't add! non-banded matrix\"))"}},{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/matrix/banded_matrix.cr","line_number":144,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L144"},"def":{"name":"clone","visibility":"Public","body":"dup"}},{"html_id":"conjtranspose-instance-method","name":"conjtranspose","doc":"returns conjtransposed matrix","summary":"<p>returns conjtransposed matrix</p>","abstract":false,"location":{"filename":"src/matrix/banded_matrix.cr","line_number":298,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L298"},"def":{"name":"conjtranspose","visibility":"Public","body":"{% if T != Complex %}\n        return transpose\n      {% end %}\nif flags.hermitian?\n  return clone\nend\nBandedMatrix(T).new(ncolumns, nrows, lower_band, upper_band, flags.transpose) do |i, j|\n  (unsafe_fetch(j, i)).conj\nend\n"}},{"html_id":"det(*,overwrite_a=false)-instance-method","name":"det","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(*, overwrite_a = false)","args_html":"(*, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":380,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L380"},"def":{"name":"det","args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":0,"visibility":"Public","body":"if square?\nelse\n  raise(ArgumentError.new(\"matrix must be square\"))\nend\nif flags.triangular?\n  return diag.product\nend\nlru = overwrite_a ? self : self.clone\nlru.upper_band = @lower_band + @upper_band\nipiv = Slice(Int32).new(nrows)\nlapack(gbtrf, nrows, nrows, @lower_band, @upper_band, lru, ((2 * @lower_band) + @upper_band) + 1, ipiv)\nlru.clear_flags\nlru.diag.product\n"}},{"html_id":"dup-instance-method","name":"dup","doc":"Returns a shallow copy of this object.\n\nThis allocates a new object and copies the contents of\n`self` into it.","summary":"<p>Returns a shallow copy of this object.</p>","abstract":false,"location":{"filename":"src/matrix/banded_matrix.cr","line_number":140,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L140"},"def":{"name":"dup","visibility":"Public","body":"BandedMatrix(T).new(self)"}},{"html_id":"each_index(*,all=false,&)-instance-method","name":"each_index","doc":"Yields every index\n\n`all` argument controls whether to yield all or non-empty elements for banded\\sparse matrices\nExample:\n`m.each_index { |i, j| m[i, j] = -m[i, j] }`","summary":"<p>Yields every index</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"all","default_value":"false","external_name":"all","restriction":""}],"args_string":"(*, all = false, &)","args_html":"(*, all = <span class=\"n\">false</span>, &)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":148,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L148"},"def":{"name":"each_index","args":[{"name":"","external_name":"","restriction":""},{"name":"all","default_value":"false","external_name":"all","restriction":""}],"splat_index":0,"yields":2,"block_arity":2,"visibility":"Public","body":"if all\n  super(all: false) do |i, j|\n    yield(i, j)\n  end\nelse\n  bands_size.times do |i|\n    if rowcol = index2ij(i)\n      yield(*rowcol)\n    end\n  end\nend"}},{"html_id":"flags:MatrixFlags-instance-method","name":"flags","doc":"Returns flags of matrix (see `MatrixFlags`)","summary":"<p>Returns flags of matrix (see <code><a href=\"../LA/MatrixFlags.html\">MatrixFlags</a></code>)</p>","abstract":false,"location":{"filename":"src/matrix/banded_matrix.cr","line_number":11,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L11"},"def":{"name":"flags","return_type":"MatrixFlags","visibility":"Public","body":"@flags"}},{"html_id":"flags=(flags:MatrixFlags)-instance-method","name":"flags=","doc":"Returns flags of matrix (see `MatrixFlags`)","summary":"<p>Returns flags of matrix (see <code><a href=\"../LA/MatrixFlags.html\">MatrixFlags</a></code>)</p>","abstract":false,"args":[{"name":"flags","external_name":"flags","restriction":"MatrixFlags"}],"args_string":"(flags : MatrixFlags)","args_html":"(flags : <a href=\"../LA/MatrixFlags.html\">MatrixFlags</a>)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":11,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L11"},"def":{"name":"flags=","args":[{"name":"flags","external_name":"flags","restriction":"MatrixFlags"}],"visibility":"Public","body":"@flags = flags"}},{"html_id":"lower_band:Int32-instance-method","name":"lower_band","abstract":false,"location":{"filename":"src/matrix/banded_matrix.cr","line_number":13,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L13"},"def":{"name":"lower_band","return_type":"Int32","visibility":"Public","body":"@lower_band"}},{"html_id":"lower_band=(value)-instance-method","name":"lower_band=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":243,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L243"},"def":{"name":"lower_band=","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"set_bands(@upper_band, value)"}},{"html_id":"map_with_index(&)-instance-method","name":"map_with_index","doc":"Returns result of appliyng block to every element with index","summary":"<p>Returns result of appliyng block to every element with index</p>","abstract":false,"location":{"filename":"src/matrix/banded_matrix.cr","line_number":160,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L160"},"def":{"name":"map_with_index","yields":3,"block_arity":3,"visibility":"Public","body":"BandedMatrix(T).new(nrows, ncolumns, upper_band, lower_band) do |i, j|\n  yield(unsafe_fetch(i, j), i, j)\nend"}},{"html_id":"map_with_index_complex(&)-instance-method","name":"map_with_index_complex","abstract":false,"location":{"filename":"src/matrix/banded_matrix.cr","line_number":168,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L168"},"def":{"name":"map_with_index_complex","yields":3,"block_arity":3,"visibility":"Public","body":"BandedMatrix(Complex).new(nrows, ncolumns, upper_band, lower_band) do |i, j|\n  yield(unsafe_fetch(i, j), i, j)\nend"}},{"html_id":"map_with_index_f64(&)-instance-method","name":"map_with_index_f64","doc":"TODO - macro magic?","summary":"<p><span class=\"flag orange\">TODO</span>  - macro magic?</p>","abstract":false,"location":{"filename":"src/matrix/banded_matrix.cr","line_number":164,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L164"},"def":{"name":"map_with_index_f64","yields":3,"block_arity":3,"visibility":"Public","body":"BandedMatrix(Float64).new(nrows, ncolumns, upper_band, lower_band) do |i, j|\n  yield(unsafe_fetch(i, j), i, j)\nend"}},{"html_id":"ncolumns:Int32-instance-method","name":"ncolumns","doc":"Returns number of columns in matrix","summary":"<p>Returns number of columns in matrix</p>","abstract":false,"location":{"filename":"src/matrix/banded_matrix.cr","line_number":10,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L10"},"def":{"name":"ncolumns","return_type":"Int32","visibility":"Public","body":"@ncolumns"}},{"html_id":"norm(kind:MatrixNorm=MatrixNorm::Frobenius)-instance-method","name":"norm","doc":"returns matrix norm","summary":"<p>returns matrix norm</p>","abstract":false,"args":[{"name":"kind","default_value":"MatrixNorm::Frobenius","external_name":"kind","restriction":"MatrixNorm"}],"args_string":"(kind : MatrixNorm = MatrixNorm::Frobenius)","args_html":"(kind : <a href=\"../LA/MatrixNorm.html\">MatrixNorm</a> = <span class=\"t\">MatrixNorm</span><span class=\"t\">::</span><span class=\"t\">Frobenius</span>)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":363,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L363"},"def":{"name":"norm","args":[{"name":"kind","default_value":"MatrixNorm::Frobenius","external_name":"kind","restriction":"MatrixNorm"}],"visibility":"Public","body":"let = (case kind\nin .frobenius?\n  'F'\nin .one?\n  'o'\nin .inf?\n  'I'\nin .max_abs?\n  'M'\nend).ord.to_u8\nworksize = kind.inf? ? nrows : 0\nlapack_util(langb, worksize, let, @nrows, @lower_band, @upper_band, matrix(self), (@lower_band + @upper_band) + 1)\n"}},{"html_id":"nrows:Int32-instance-method","name":"nrows","doc":"Returns number of rows in matrix","summary":"<p>Returns number of rows in matrix</p>","abstract":false,"location":{"filename":"src/matrix/banded_matrix.cr","line_number":9,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L9"},"def":{"name":"nrows","return_type":"Int32","visibility":"Public","body":"@nrows"}},{"html_id":"set_bands(aupper,alower):Nil-instance-method","name":"set_bands","abstract":false,"args":[{"name":"aupper","external_name":"aupper","restriction":""},{"name":"alower","external_name":"alower","restriction":""}],"args_string":"(aupper, alower) : Nil","args_html":"(aupper, alower) : Nil","location":{"filename":"src/matrix/banded_matrix.cr","line_number":224,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L224"},"def":{"name":"set_bands","args":[{"name":"aupper","external_name":"aupper","restriction":""},{"name":"alower","external_name":"alower","restriction":""}],"return_type":"Nil","visibility":"Public","body":"if (aupper == @upper_band) && (alower == @lower_band)\n  return\nend\nif aupper >= 0\nelse\n  raise(ArgumentError.new(\"upper_band must be non-negative\"))\nend\nif alower >= 0\nelse\n  raise(ArgumentError.new(\"lower_band must be non-negative\"))\nend\nnewraw = Slice(T).new({ncolumns, nrows + aupper}.min * ((aupper + alower) + 1), T.new(0))\neach_with_index do |v, i, j|\n  if {0, j - aupper}.max <= i && i <= {nrows - 1, j + alower}.min\n  else\n    next\n  end\n  ai = (aupper + i) - j\n  newraw[(j * ((aupper + alower) + 1)) + ai] = v\nend\n@raw_banded = newraw\n@upper_band, @lower_band = aupper, alower\nresized_flags\n"}},{"html_id":"solve(b:GeneralMatrix(T),*,overwrite_a=false,overwrite_b=false)-instance-method","name":"solve","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"GeneralMatrix(T)"},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"args_string":"(b : GeneralMatrix(T), *, overwrite_a = false, overwrite_b = false)","args_html":"(b : <a href=\"../LA/GeneralMatrix.html\">GeneralMatrix</a>(T), *, overwrite_a = <span class=\"n\">false</span>, overwrite_b = <span class=\"n\">false</span>)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":393,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L393"},"def":{"name":"solve","args":[{"name":"b","external_name":"b","restriction":"GeneralMatrix(T)"},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"splat_index":1,"visibility":"Public","body":"if nrows == b.nrows\nelse\n  raise(ArgumentError.new(\"nrows of a and b must match\"))\nend\nif square?\nelse\n  raise(ArgumentError.new(\"a must be square\"))\nend\na = overwrite_b ? self : self.clone\nx = overwrite_b ? b : b.clone\nn = nrows\nku = upper_band\nkl = lower_band\nif flags.triangular?\n  kd = flags.lower_triangular? ? kl : ku\n  if flags.lower_triangular?\n    self.upper_band = 0\n  else\n    self.lower_band = 0\n  end\n  lapack(tbtrs, uplo, 'N'.ord.to_u8, 'N'.ord.to_u8, n, kd, b.ncolumns, a, kd + 1, x, n)\nelse\n  if flags.positive_definite?\n    lapack(pbsv, 'U'.ord.to_u8, n, upper_band, b.ncolumns, a, (upper_band + lower_band) + 1, x, n)\n  else\n    a.upper_band = kl + ku\n    ipiv = Slice(Int32).new(n)\n    lapack(gbsv, n, kl, ku, b.ncolumns, a, ((2 * kl) + ku) + 1, ipiv, x, b.nrows)\n  end\nend\na.clear_flags\nx.clear_flags\nx\n"}},{"html_id":"to_unsafe-instance-method","name":"to_unsafe","doc":"Returns pointer to underlying data\n\nStorage format depends of matrix type\nThis method raises at runtime if matrix doesn't have raw pointer","summary":"<p>Returns pointer to underlying data</p>","abstract":false,"location":{"filename":"src/matrix/banded_matrix.cr","line_number":172,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L172"},"def":{"name":"to_unsafe","visibility":"Public","body":"{% if T == Complex %}\n        @raw_banded.to_unsafe.as(LibCBLAS::ComplexDouble*)\n      {% else %}\n        @raw_banded.to_unsafe\n      {% end %}"}},{"html_id":"transpose-instance-method","name":"transpose","doc":"returns transposed matrix","summary":"<p>returns transposed matrix</p>","abstract":false,"location":{"filename":"src/matrix/banded_matrix.cr","line_number":290,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L290"},"def":{"name":"transpose","visibility":"Public","body":"if flags.symmetric?\n  return clone\nend\nBandedMatrix(T).new(ncolumns, nrows, lower_band, upper_band, flags.transpose) do |i, j|\n  unsafe_fetch(j, i)\nend\n"}},{"html_id":"transpose!-instance-method","name":"transpose!","abstract":false,"location":{"filename":"src/matrix/banded_matrix.cr","line_number":193,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L193"},"def":{"name":"transpose!","visibility":"Public","body":"if flags.symmetric?\n  return self\nend\nnewraw = Slice(T).new({nrows, ncolumns + lower_band}.min * band_len) do |index|\n  ai = index % band_len\n  j = index // band_len\n  i = (ai + j) - @lower_band\n  if i < 0 || i >= ncolumns\n    T.new(0)\n  else\n    unsafe_fetch(j, i)\n  end\nend\n@upper_band, @lower_band = @lower_band, @upper_band\n@nrows, @ncolumns = @ncolumns, @nrows\n@raw_banded = newraw\nself.flags = flags.transpose\nself\n"}},{"html_id":"tril(k=0)-instance-method","name":"tril","doc":"Same as tril in scipy - returns lower triangular or trapezoidal part of matrix\n\nReturns a matrix with all elements above k-th diagonal zeroed","summary":"<p>Same as tril in scipy - returns lower triangular or trapezoidal part of matrix</p>","abstract":false,"args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"args_string":"(k = 0)","args_html":"(k = <span class=\"n\">0</span>)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":329,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L329"},"def":{"name":"tril","args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"visibility":"Public","body":"if k >= 0\n  if k >= upper_band\n    return clone\n  end\n  self.class.new(nrows, ncolumns, k, lower_band) do |i, j|\n    unsafe_fetch(i, j)\n  end\nelse\n  self.class.new(nrows, ncolumns, 0, lower_band) do |i, j|\n    i >= (j - k) ? unsafe_fetch(i, j) : 0\n  end\nend"}},{"html_id":"tril!(k=0)-instance-method","name":"tril!","doc":"Works like a tril in scipy - remove all elements above k-diagonal","summary":"<p>Works like a tril in scipy - remove all elements above k-diagonal</p>","abstract":false,"args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"args_string":"(k = 0)","args_html":"(k = <span class=\"n\">0</span>)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":247,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L247"},"def":{"name":"tril!","args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"visibility":"Public","body":"if k >= 0\n  self.upper_band = {@upper_band, k}.min\nelse\n  self.upper_band = 0\n  each_with_index do |v, i, j|\n    if i < (j - k)\n      unsafe_set(i, j, T.new(0))\n    end\n  end\n  resized_flags\nend\nself\n"}},{"html_id":"triu(k=0)-instance-method","name":"triu","doc":"Same as triu in scipy - returns upper triangular or trapezoidal part of matrix\n\nReturns a matrix with all elements below k-th diagonal zeroed","summary":"<p>Same as triu in scipy - returns upper triangular or trapezoidal part of matrix</p>","abstract":false,"args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"args_string":"(k = 0)","args_html":"(k = <span class=\"n\">0</span>)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":344,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L344"},"def":{"name":"triu","args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"visibility":"Public","body":"if k <= 0\n  if (-k) >= lower_band\n    return clone\n  end\n  self.class.new(nrows, ncolumns, upper_band, -k) do |i, j|\n    unsafe_fetch(i, j)\n  end\nelse\n  self.class.new(nrows, ncolumns, upper_band, 0) do |i, j|\n    i <= (j - k) ? unsafe_fetch(i, j) : 0\n  end\nend"}},{"html_id":"triu!(k=0)-instance-method","name":"triu!","doc":"Works like a triu in scipy - remove all elements below k-diagonal","summary":"<p>Works like a triu in scipy - remove all elements below k-diagonal</p>","abstract":false,"args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"args_string":"(k = 0)","args_html":"(k = <span class=\"n\">0</span>)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":260,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L260"},"def":{"name":"triu!","args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"visibility":"Public","body":"if k <= 0\n  self.lower_band = {@lower_band, -k}.min\nelse\n  self.lower_band = 0\n  each_with_index do |v, i, j|\n    if i > (j - k)\n      unsafe_set(i, j, T.new(0))\n    end\n  end\n  resized_flags\nend\nself\n"}},{"html_id":"unsafe_fetch(i,j)-instance-method","name":"unsafe_fetch","abstract":false,"args":[{"name":"i","external_name":"i","restriction":""},{"name":"j","external_name":"j","restriction":""}],"args_string":"(i, j)","args_html":"(i, j)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":122,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L122"},"def":{"name":"unsafe_fetch","args":[{"name":"i","external_name":"i","restriction":""},{"name":"j","external_name":"j","restriction":""}],"visibility":"Public","body":"if index = ij2index(i, j)\n  @raw_banded.unsafe_fetch(index)\nelse\n  T.new(0.0)\nend"}},{"html_id":"unsafe_set(i,j,value)-instance-method","name":"unsafe_set","abstract":false,"args":[{"name":"i","external_name":"i","restriction":""},{"name":"j","external_name":"j","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(i, j, value)","args_html":"(i, j, value)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":130,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L130"},"def":{"name":"unsafe_set","args":[{"name":"i","external_name":"i","restriction":""},{"name":"j","external_name":"j","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"clear_flags\nif index = ij2index(i, j)\n  @raw_banded[index] = T.new(value)\nelse\n  raise(IndexError.new)\nend\n"}},{"html_id":"upper_band:Int32-instance-method","name":"upper_band","abstract":false,"location":{"filename":"src/matrix/banded_matrix.cr","line_number":12,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L12"},"def":{"name":"upper_band","return_type":"Int32","visibility":"Public","body":"@upper_band"}},{"html_id":"upper_band=(value)-instance-method","name":"upper_band=","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/matrix/banded_matrix.cr","line_number":239,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L239"},"def":{"name":"upper_band=","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"set_bands(value, @lower_band)"}}]},{"html_id":"linalg/LA/BMat","path":"LA/BMat.html","kind":"alias","full_name":"LA::BMat","name":"BMat","abstract":false,"locations":[{"filename":"src/matrix/banded_matrix.cr","line_number":424,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L424"}],"repository_name":"linalg","program":false,"enum":false,"alias":true,"aliased":"LA::BandedMatrix(Float64)","aliased_html":"<a href=\"../LA/BandedMatrix.html\">LA::BandedMatrix(Float64)</a>","const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"}},{"html_id":"linalg/LA/BMat32","path":"LA/BMat32.html","kind":"alias","full_name":"LA::BMat32","name":"BMat32","abstract":false,"locations":[{"filename":"src/matrix/banded_matrix.cr","line_number":425,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L425"}],"repository_name":"linalg","program":false,"enum":false,"alias":true,"aliased":"LA::BandedMatrix(Float32)","aliased_html":"<a href=\"../LA/BandedMatrix.html\">LA::BandedMatrix(Float32)</a>","const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"}},{"html_id":"linalg/LA/BMatComplex","path":"LA/BMatComplex.html","kind":"alias","full_name":"LA::BMatComplex","name":"BMatComplex","abstract":false,"locations":[{"filename":"src/matrix/banded_matrix.cr","line_number":426,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/banded_matrix.cr#L426"}],"repository_name":"linalg","program":false,"enum":false,"alias":true,"aliased":"LA::BandedMatrix(Complex)","aliased_html":"<a href=\"../LA/BandedMatrix.html\">LA::BandedMatrix</a>(<a href=\"../Complex.html\">Complex</a>)","const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"}},{"html_id":"linalg/LA/DFTScale","path":"LA/DFTScale.html","kind":"enum","full_name":"LA::DFTScale","name":"DFTScale","abstract":false,"ancestors":[{"html_id":"linalg/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"linalg/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"linalg/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/matrix/special_matrix.cr","line_number":298,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L298"}],"repository_name":"linalg","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"None","name":"None","value":"0"},{"id":"N","name":"N","value":"1"},{"id":"SqrtN","name":"SqrtN","value":"2"}],"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"},"instance_methods":[{"html_id":"n?-instance-method","name":"n?","abstract":false,"location":{"filename":"src/matrix/special_matrix.cr","line_number":300,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L300"},"def":{"name":"n?","visibility":"Public","body":"self == N"}},{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/matrix/special_matrix.cr","line_number":299,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L299"},"def":{"name":"none?","visibility":"Public","body":"self == None"}},{"html_id":"sqrt_n?-instance-method","name":"sqrt_n?","abstract":false,"location":{"filename":"src/matrix/special_matrix.cr","line_number":301,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L301"},"def":{"name":"sqrt_n?","visibility":"Public","body":"self == SqrtN"}}]},{"html_id":"linalg/LA/GeneralMatrix","path":"LA/GeneralMatrix.html","kind":"class","full_name":"LA::GeneralMatrix(T)","name":"GeneralMatrix","abstract":false,"superclass":{"html_id":"linalg/LA/Matrix","kind":"class","full_name":"LA::Matrix","name":"Matrix"},"ancestors":[{"html_id":"linalg/LA/Matrix","kind":"class","full_name":"LA::Matrix","name":"Matrix"},{"html_id":"linalg/LA/LapackHelper","kind":"module","full_name":"LA::LapackHelper","name":"LapackHelper"},{"html_id":"linalg/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"linalg/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/matrix/general_matrix.cr","line_number":8,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L8"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"},"doc":"generic matrix, heap-allocated\nData are stored in column-major as this is a storage used by LAPACK\nSee `SUPPORTED_TYPES` for supported types","summary":"<p>generic matrix, heap-allocated Data are stored in column-major as this is a storage used by LAPACK See <code><a href=\"../LA.html#SUPPORTED_TYPES\">SUPPORTED_TYPES</a></code> for supported types</p>","class_methods":[{"html_id":"[](*args)-class-method","name":"[]","doc":"Alias for `#new`","summary":"<p>Alias for <code><a href=\"../LA/GeneralMatrix.html#new%28nrows%3AInt32%2Cncolumns%3AInt32%2Cvalues%3AIndexable%2Ccol_major%3Dfalse%2Cflags%3ALA%3A%3AMatrixFlags%3DMatrixFlags%3A%3ANone%29-class-method\">#new</a></code></p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args)","args_html":"(*args)","location":{"filename":"src/matrix/general_matrix.cr","line_number":329,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L329"},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"splat_index":0,"visibility":"Public","body":"new(args)"}},{"html_id":"columns(*args)-class-method","name":"columns","doc":"Creates matrix from a number of columns\n\nExample:\n```\na = GMat.columns([1, 2, 3, 4], [5, 6, 7, 8])\na.to_aa # => [[1, 5], [2, 6], [3, 7], [4, 8]]\n```","summary":"<p>Creates matrix from a number of columns</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args)","args_html":"(*args)","location":{"filename":"src/matrix/general_matrix.cr","line_number":324,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L324"},"def":{"name":"columns","args":[{"name":"args","external_name":"args","restriction":""}],"splat_index":0,"visibility":"Public","body":"(new(args)).transpose!"}},{"html_id":"diag(nrows,ncolumns,values)-class-method","name":"diag","doc":"Returns diagonal matrix of given size with diagonal elements taken from array `values`","summary":"<p>Returns diagonal matrix of given size with diagonal elements taken from array <code>values</code></p>","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"values","external_name":"values","restriction":""}],"args_string":"(nrows, ncolumns, values)","args_html":"(nrows, ncolumns, values)","location":{"filename":"src/matrix/general_matrix.cr","line_number":334,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L334"},"def":{"name":"diag","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"values","external_name":"values","restriction":""}],"visibility":"Public","body":"new(nrows, ncolumns, MatrixFlags.for_diag(nrows == ncolumns)) do |i, j|\n  i == j ? values[i] : 0\nend"}},{"html_id":"diag(nrows,ncolumns,&)-class-method","name":"diag","doc":"Returns diagonal matrix of given size with diagonal elements equal to block value","summary":"<p>Returns diagonal matrix of given size with diagonal elements equal to block value</p>","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""}],"args_string":"(nrows, ncolumns, &)","args_html":"(nrows, ncolumns, &)","location":{"filename":"src/matrix/general_matrix.cr","line_number":341,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L341"},"def":{"name":"diag","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""}],"yields":1,"block_arity":1,"visibility":"Public","body":"new(nrows, ncolumns, MatrixFlags.for_diag(nrows == ncolumns)) do |i, j|\n  i == j ? yield(i) : 0\nend"}},{"html_id":"rows(*args)-class-method","name":"rows","doc":"Creates matrix from a number of rows\n\nExample:\n```\na = GMat.rows([1, 2, 3, 4], [5, 6, 7, 8])\na.to_aa # => [[1,2,3,4], [5,6,7,8]]\n```","summary":"<p>Creates matrix from a number of rows</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args)","args_html":"(*args)","location":{"filename":"src/matrix/general_matrix.cr","line_number":313,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L313"},"def":{"name":"rows","args":[{"name":"args","external_name":"args","restriction":""}],"splat_index":0,"visibility":"Public","body":"new(args)"}}],"constructors":[{"html_id":"new(nrows:Int32,ncolumns:Int32,values:Indexable,col_major=false,flags:LA::MatrixFlags=MatrixFlags::None)-class-method","name":"new","doc":"Creates matrix with given size and populate elements from `values`\n\nif `col_major` is true, `values` content is just copied to `#raw`,\notherwise a conversion from row-major form is performed\nExample:\n```\nvalues = [1, 2, 3, 4]\na = GMat.new(2, 2, values)\na.to_aa # => [[1,2],[3,4]]\nb = GMat.new(2, 2, values, col_major: true)\nb.to_aa # => [[1,3],[2,4]]\n```","summary":"<p>Creates matrix with given size and populate elements from <code>values</code></p>","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":"::Int32"},{"name":"ncolumns","external_name":"ncolumns","restriction":"::Int32"},{"name":"values","external_name":"values","restriction":"Indexable"},{"name":"col_major","default_value":"false","external_name":"col_major","restriction":""},{"name":"flags","default_value":"MatrixFlags::None","external_name":"flags","restriction":"::LA::MatrixFlags"}],"args_string":"(nrows : Int32, ncolumns : Int32, values : Indexable, col_major = false, flags : LA::MatrixFlags = MatrixFlags::None)","args_html":"(nrows : Int32, ncolumns : Int32, values : Indexable, col_major = <span class=\"n\">false</span>, flags : <a href=\"../LA/MatrixFlags.html\">LA::MatrixFlags</a> = <span class=\"t\">MatrixFlags</span><span class=\"t\">::</span><span class=\"t\">None</span>)","location":{"filename":"src/matrix/general_matrix.cr","line_number":85,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L85"},"def":{"name":"new","args":[{"name":"nrows","external_name":"nrows","restriction":"::Int32"},{"name":"ncolumns","external_name":"ncolumns","restriction":"::Int32"},{"name":"values","external_name":"values","restriction":"Indexable"},{"name":"col_major","default_value":"false","external_name":"col_major","restriction":""},{"name":"flags","default_value":"MatrixFlags::None","external_name":"flags","restriction":"::LA::MatrixFlags"}],"visibility":"Public","body":"_ = GeneralMatrix(T).allocate\n_.initialize(nrows, ncolumns, values, col_major, flags)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(nrows:Int32,ncolumns:Int32,flags:LA::MatrixFlags=MatrixFlags::None)-class-method","name":"new","doc":"Creates zero-initialized matrix of given size\n\nExample: `LA::GMat.new(4,4)`","summary":"<p>Creates zero-initialized matrix of given size</p>","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":"::Int32"},{"name":"ncolumns","external_name":"ncolumns","restriction":"::Int32"},{"name":"flags","default_value":"MatrixFlags::None","external_name":"flags","restriction":"::LA::MatrixFlags"}],"args_string":"(nrows : Int32, ncolumns : Int32, flags : LA::MatrixFlags = MatrixFlags::None)","args_html":"(nrows : Int32, ncolumns : Int32, flags : <a href=\"../LA/MatrixFlags.html\">LA::MatrixFlags</a> = <span class=\"t\">MatrixFlags</span><span class=\"t\">::</span><span class=\"t\">None</span>)","location":{"filename":"src/matrix/general_matrix.cr","line_number":21,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L21"},"def":{"name":"new","args":[{"name":"nrows","external_name":"nrows","restriction":"::Int32"},{"name":"ncolumns","external_name":"ncolumns","restriction":"::Int32"},{"name":"flags","default_value":"MatrixFlags::None","external_name":"flags","restriction":"::LA::MatrixFlags"}],"visibility":"Public","body":"_ = GeneralMatrix(T).allocate\n_.initialize(nrows, ncolumns, flags)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(nrows:Int32,ncolumns:Int32,flags:LA::MatrixFlags=MatrixFlags::None,&)-class-method","name":"new","doc":"Creates matrix of given size and then call block to initialize each element\n\nExample: `LA::GMat.new(4,4){|i,j| i+j }`","summary":"<p>Creates matrix of given size and then call block to initialize each element</p>","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":"::Int32"},{"name":"ncolumns","external_name":"ncolumns","restriction":"::Int32"},{"name":"flags","default_value":"MatrixFlags::None","external_name":"flags","restriction":"::LA::MatrixFlags"}],"args_string":"(nrows : Int32, ncolumns : Int32, flags : LA::MatrixFlags = MatrixFlags::None, &)","args_html":"(nrows : Int32, ncolumns : Int32, flags : <a href=\"../LA/MatrixFlags.html\">LA::MatrixFlags</a> = <span class=\"t\">MatrixFlags</span><span class=\"t\">::</span><span class=\"t\">None</span>, &)","location":{"filename":"src/matrix/general_matrix.cr","line_number":29,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L29"},"def":{"name":"new","args":[{"name":"nrows","external_name":"nrows","restriction":"::Int32"},{"name":"ncolumns","external_name":"ncolumns","restriction":"::Int32"},{"name":"flags","default_value":"MatrixFlags::None","external_name":"flags","restriction":"::LA::MatrixFlags"}],"yields":2,"block_arity":2,"visibility":"Public","body":"_ = GeneralMatrix(T).allocate\n_.initialize(nrows, ncolumns, flags) do |_arg0, _arg1|\n  yield _arg0, _arg1\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(values:Indexable)-class-method","name":"new","doc":"Creates matrix from any `Indexable` of `Indexable`s\n\nExample:\n```\nm = GMat.new([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n  [10, 11, 12],\n])\n```","summary":"<p>Creates matrix from any <code>Indexable</code> of <code>Indexable</code>s</p>","abstract":false,"args":[{"name":"values","external_name":"values","restriction":"Indexable"}],"args_string":"(values : Indexable)","args_html":"(values : Indexable)","location":{"filename":"src/matrix/general_matrix.cr","line_number":49,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L49"},"def":{"name":"new","args":[{"name":"values","external_name":"values","restriction":"Indexable"}],"visibility":"Public","body":"_ = GeneralMatrix(T).allocate\n_.initialize(values)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(matrix:Matrix)-class-method","name":"new","doc":"Creates matrix with same content as another matrix","summary":"<p>Creates matrix with same content as another matrix</p>","abstract":false,"args":[{"name":"matrix","external_name":"matrix","restriction":"Matrix"}],"args_string":"(matrix : Matrix)","args_html":"(matrix : <a href=\"../LA/Matrix.html\">Matrix</a>)","location":{"filename":"src/matrix/general_matrix.cr","line_number":67,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L67"},"def":{"name":"new","args":[{"name":"matrix","external_name":"matrix","restriction":"Matrix"}],"visibility":"Public","body":"new(matrix.nrows, matrix.ncolumns, matrix.flags) do |i, j|\n  matrix.unsafe_fetch(i, j)\nend"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"see `LA::Matrix#==`","summary":"<p>see <code><a href=\"../LA/Matrix.html#%3D%3D%28other%29-instance-method\">LA::Matrix#==</a></code></p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","location":{"filename":"src/matrix/general_matrix.cr","line_number":129,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L129"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"((@nrows == other.nrows) && (@ncolumns == other.ncolumns)) && (@raw == other.raw)"}},{"html_id":"cat!(other:Matrix(T),dimension)-instance-method","name":"cat!","doc":"Concatenate matrix adding another matrix by `dimension` `Axis::Rows` (horizontal) or `Axis::Columns` (vertical)","summary":"<p>Concatenate matrix adding another matrix by <code>dimension</code> <code><a href=\"../LA/Axis.html#Rows\">Axis::Rows</a></code> (horizontal) or <code><a href=\"../LA/Axis.html#Columns\">Axis::Columns</a></code> (vertical)</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Matrix(T)"},{"name":"dimension","external_name":"dimension","restriction":""}],"args_string":"(other : Matrix(T), dimension)","args_html":"(other : <a href=\"../LA/Matrix.html\">Matrix</a>(T), dimension)","location":{"filename":"src/matrix/general_matrix.cr","line_number":286,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L286"},"def":{"name":"cat!","args":[{"name":"other","external_name":"other","restriction":"Matrix(T)"},{"name":"dimension","external_name":"dimension","restriction":""}],"visibility":"Public","body":"anew = self.cat(other, dimension)\n@nrows = anew.nrows\n@ncolumns = anew.ncolumns\n@raw = anew.raw\nclear_flags\nself\n"}},{"html_id":"clone-instance-method","name":"clone","doc":"returns copy of matrix","summary":"<p>returns copy of matrix</p>","abstract":false,"location":{"filename":"src/matrix/general_matrix.cr","line_number":115,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L115"},"def":{"name":"clone","visibility":"Public","body":"dup"}},{"html_id":"conjtranspose!-instance-method","name":"conjtranspose!","doc":"Conjurgate transposes matrix inplace\n\nCurrently, transpose of non-square matrix still allocates temporary buffer","summary":"<p>Conjurgate transposes matrix inplace</p>","abstract":false,"location":{"filename":"src/matrix/general_matrix.cr","line_number":162,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L162"},"def":{"name":"conjtranspose!","visibility":"Public","body":"{% if T != Complex %}\n        return transpose!\n      {% end %}\nif flags.hermitian?\n  return self\nend\nmap!(&.conj)\ntranspose!\n"}},{"html_id":"dup-instance-method","name":"dup","doc":"returns copy of matrix","summary":"<p>returns copy of matrix</p>","abstract":false,"location":{"filename":"src/matrix/general_matrix.cr","line_number":110,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L110"},"def":{"name":"dup","visibility":"Public","body":"GeneralMatrix(T).new(@nrows, @ncolumns, @raw, true, @flags)"}},{"html_id":"flags:MatrixFlags-instance-method","name":"flags","doc":"Matrix flags (see `MatrixFlags` for description)","summary":"<p>Matrix flags (see <code><a href=\"../LA/MatrixFlags.html\">MatrixFlags</a></code> for description)</p>","abstract":false,"location":{"filename":"src/matrix/general_matrix.cr","line_number":16,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L16"},"def":{"name":"flags","return_type":"MatrixFlags","visibility":"Public","body":"@flags"}},{"html_id":"flags=(flags:MatrixFlags)-instance-method","name":"flags=","doc":"Matrix flags (see `MatrixFlags` for description)","summary":"<p>Matrix flags (see <code><a href=\"../LA/MatrixFlags.html\">MatrixFlags</a></code> for description)</p>","abstract":false,"args":[{"name":"flags","external_name":"flags","restriction":"MatrixFlags"}],"args_string":"(flags : MatrixFlags)","args_html":"(flags : <a href=\"../LA/MatrixFlags.html\">MatrixFlags</a>)","location":{"filename":"src/matrix/general_matrix.cr","line_number":16,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L16"},"def":{"name":"flags=","args":[{"name":"flags","external_name":"flags","restriction":"MatrixFlags"}],"visibility":"Public","body":"@flags = flags"}},{"html_id":"hcat!(other)-instance-method","name":"hcat!","doc":"Concatenate matrix adding another matrix horizontally (so they form a row)","summary":"<p>Concatenate matrix adding another matrix horizontally (so they form a row)</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/matrix/general_matrix.cr","line_number":302,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L302"},"def":{"name":"hcat!","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"cat!(other, 1)"}},{"html_id":"ncolumns:Int32-instance-method","name":"ncolumns","doc":"Count of columns in matrix","summary":"<p>Count of columns in matrix</p>","abstract":false,"location":{"filename":"src/matrix/general_matrix.cr","line_number":14,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L14"},"def":{"name":"ncolumns","return_type":"Int32","visibility":"Public","body":"@ncolumns"}},{"html_id":"nrows:Int32-instance-method","name":"nrows","doc":"Count of rows in matrix","summary":"<p>Count of rows in matrix</p>","abstract":false,"location":{"filename":"src/matrix/general_matrix.cr","line_number":12,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L12"},"def":{"name":"nrows","return_type":"Int32","visibility":"Public","body":"@nrows"}},{"html_id":"raw:Slice(T)-instance-method","name":"raw","doc":"Pointer to a raw data","summary":"<p>Pointer to a raw data</p>","abstract":false,"location":{"filename":"src/matrix/general_matrix.cr","line_number":10,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L10"},"def":{"name":"raw","return_type":"Slice(T)","visibility":"Public","body":"@raw"}},{"html_id":"reshape(anrows,ancolumns,col_major=false)-instance-method","name":"reshape","doc":"Returns a matrix with different nrows and ncolumns but same elements (total number of elements must not change)\n\nif `col_major` is true, just nrows and ncolumns are changed, data kept the same\nOtherwise, elements are reordered to emulate row-major storage\nExample:\n```\na = GMat[[1, 2, 3], [4, 5, 6]]\na.reshape(2, 3).to_aa # => [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]\nb = GMat[[1, 2, 3], [4, 5, 6]]\nthis is because in-memory order of values is (1, 4, 2, 5, 3, 6)\nb.reshape(2, 3, col_major: true).to_aa # => [[1.0, 5.0], [4.0, 3.0], [2.0, 6.0]]\n```","summary":"<p>Returns a matrix with different nrows and ncolumns but same elements (total number of elements must not change)</p>","abstract":false,"args":[{"name":"anrows","external_name":"anrows","restriction":""},{"name":"ancolumns","external_name":"ancolumns","restriction":""},{"name":"col_major","default_value":"false","external_name":"col_major","restriction":""}],"args_string":"(anrows, ancolumns, col_major = false)","args_html":"(anrows, ancolumns, col_major = <span class=\"n\">false</span>)","location":{"filename":"src/matrix/general_matrix.cr","line_number":209,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L209"},"def":{"name":"reshape","args":[{"name":"anrows","external_name":"anrows","restriction":""},{"name":"ancolumns","external_name":"ancolumns","restriction":""},{"name":"col_major","default_value":"false","external_name":"col_major","restriction":""}],"visibility":"Public","body":"if col_major\n  clone.reshape!(anrows, ancolumns, col_major)\nelse\n  if (anrows * ancolumns) != @raw.size\n    raise(ArgumentError.new(\"number of elements must not change\"))\n  end\n  GeneralMatrix(T).new(anrows, ancolumns) do |i, j|\n    row_index = (i * ancolumns) + j\n    arow = row_index // @ncolumns\n    acol = row_index % @ncolumns\n    unsafe_fetch(arow, acol)\n  end\nend"}},{"html_id":"reshape!(anrows:Int32,ancolumns:Int32,col_major=false)-instance-method","name":"reshape!","doc":"Changes nrows and ncolumns of matrix (total number of elements must not change)\n\nif `col_major` is true, just nrows and ncolumns are changed, data kept the same\nOtherwise, elements are reordered to emulate row-major storage\nExample:\n```\na = GMat[[1, 2, 3], [4, 5, 6]]\na.reshape!(2, 3)\na.to_aa # => [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]\nb = GMat[[1, 2, 3], [4, 5, 6]]\nb.reshape!(2, 3, col_major: true)\nthis is because in-memory order of values is (1, 4, 2, 5, 3, 6)\nb.to_aa # => [[1.0, 5.0], [4.0, 3.0], [2.0, 6.0]]\n```","summary":"<p>Changes nrows and ncolumns of matrix (total number of elements must not change)</p>","abstract":false,"args":[{"name":"anrows","external_name":"anrows","restriction":"::Int32"},{"name":"ancolumns","external_name":"ancolumns","restriction":"::Int32"},{"name":"col_major","default_value":"false","external_name":"col_major","restriction":""}],"args_string":"(anrows : Int32, ancolumns : Int32, col_major = false)","args_html":"(anrows : Int32, ancolumns : Int32, col_major = <span class=\"n\">false</span>)","location":{"filename":"src/matrix/general_matrix.cr","line_number":185,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L185"},"def":{"name":"reshape!","args":[{"name":"anrows","external_name":"anrows","restriction":"::Int32"},{"name":"ancolumns","external_name":"ancolumns","restriction":"::Int32"},{"name":"col_major","default_value":"false","external_name":"col_major","restriction":""}],"visibility":"Public","body":"if (anrows == nrows) && (ancolumns == ncolumns)\n  return self\nend\nif (anrows * ancolumns) != @raw.size\n  raise(ArgumentError.new(\"number of elements must not change\"))\nend\nif col_major\nelse\n  anew = reshape(anrows, ancolumns, col_major)\n  @raw = anew.raw\nend\n@nrows = anrows\n@ncolumns = ancolumns\nself\n"}},{"html_id":"resize!(anrows:Int32,ancolumns:Int32)-instance-method","name":"resize!","doc":"Change number of rows and columns in matrix.\n\nif new number is higher zero elements are added,\nif new number is lower, exceeding elements are lost","summary":"<p>Change number of rows and columns in matrix.</p>","abstract":false,"args":[{"name":"anrows","external_name":"anrows","restriction":"::Int32"},{"name":"ancolumns","external_name":"ancolumns","restriction":"::Int32"}],"args_string":"(anrows : Int32, ancolumns : Int32)","args_html":"(anrows : Int32, ancolumns : Int32)","location":{"filename":"src/matrix/general_matrix.cr","line_number":227,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L227"},"def":{"name":"resize!","args":[{"name":"anrows","external_name":"anrows","restriction":"::Int32"},{"name":"ancolumns","external_name":"ancolumns","restriction":"::Int32"}],"visibility":"Public","body":"if (anrows == @nrows) && (ancolumns == @ncolumns)\n  return self\nend\nanew = GeneralMatrix(T).new(anrows, ancolumns) do |i, j|\n  if ((j >= 0 && j < ncolumns) && i >= 0) && i < nrows\n    unsafe_fetch(i, j)\n  else\n    T.new(0)\n  end\nend\n@nrows = anrows\n@ncolumns = ancolumns\n@raw = anew.raw\nclear_flags\nself\n"}},{"html_id":"to_a(col_major=false)-instance-method","name":"to_a","doc":"Converts matrix to plain array of elements\nif `col_major` is true, elements are returned as stored inplace,\notherwise row-major storage is emulated","summary":"<p>Converts matrix to plain array of elements if <code>col_major</code> is true, elements are returned as stored inplace, otherwise row-major storage is emulated</p>","abstract":false,"args":[{"name":"col_major","default_value":"false","external_name":"col_major","restriction":""}],"args_string":"(col_major = false)","args_html":"(col_major = <span class=\"n\">false</span>)","location":{"filename":"src/matrix/general_matrix.cr","line_number":247,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L247"},"def":{"name":"to_a","args":[{"name":"col_major","default_value":"false","external_name":"col_major","restriction":""}],"visibility":"Public","body":"if col_major\n  @raw.to_a\nelse\n  Array(T).new(@ncolumns * @nrows) do |i|\n    row = i // @ncolumns\n    col = i % @ncolumns\n    unsafe_fetch(row, col)\n  end\nend"}},{"html_id":"to_aa(col_major=false)-instance-method","name":"to_aa","doc":"Converts matrix to array of array of elements\nif `col_major` is true, elements are returned as stored inplace,\notherwise row-major storage is emulated\nExample:\n```\na = GMat[[1, 2], [3, 4]]\na.to_aa                  # => [[1.0, 2.0],[3.0, 4.0]]\na.to_aa(col_major: true) # => [[1.0, 3.0],[2.0, 4.0]]\n```","summary":"<p>Converts matrix to array of array of elements if <code>col_major</code> is true, elements are returned as stored inplace, otherwise row-major storage is emulated Example: <code>a = <a href=\"../LA/GMat.html\">GMat</a>[[1, 2], [3, 4]] a.to_aa # =&gt; [[1.0, 2.0],[3.0, 4.0]] a.to_aa(col_major: true) # =&gt; [[1.0, 3.0],[2.0, 4.0]]</code></p>","abstract":false,"args":[{"name":"col_major","default_value":"false","external_name":"col_major","restriction":""}],"args_string":"(col_major = false)","args_html":"(col_major = <span class=\"n\">false</span>)","location":{"filename":"src/matrix/general_matrix.cr","line_number":268,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L268"},"def":{"name":"to_aa","args":[{"name":"col_major","default_value":"false","external_name":"col_major","restriction":""}],"visibility":"Public","body":"if col_major\n  Array(Array(T)).new(@ncolumns) do |i|\n    Array(T).build(@nrows) do |pointer|\n      (pointer.to_slice(@nrows)).copy_from(@raw[i * @nrows, @nrows])\n      @nrows\n    end\n  end\nelse\n  Array(Array(T)).new(@nrows) do |i|\n    Array(T).new(@ncolumns) do |j|\n      unsafe_fetch(i, j)\n    end\n  end\nend"}},{"html_id":"to_unsafe-instance-method","name":"to_unsafe","doc":"Returns pointer to raw data, suitable to e.g. use with LAPACK","summary":"<p>Returns pointer to raw data, suitable to e.g.</p>","abstract":false,"location":{"filename":"src/matrix/general_matrix.cr","line_number":120,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L120"},"def":{"name":"to_unsafe","visibility":"Public","body":"{% if T == Complex %}\n        @raw.to_unsafe.as(LibCBLAS::ComplexDouble*)\n      {% else %}\n        @raw.to_unsafe\n      {% end %}"}},{"html_id":"transpose!-instance-method","name":"transpose!","doc":"transposes matrix inplace\n\nCurrently, transpose of non-square matrix still allocates temporary buffer","summary":"<p>transposes matrix inplace</p>","abstract":false,"location":{"filename":"src/matrix/general_matrix.cr","line_number":136,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L136"},"def":{"name":"transpose!","visibility":"Public","body":"if flags.symmetric?\n  return self\nend\nif square?\n  (0..(@nrows - 2)).each do |i|\n    ((i + 1)..(@ncolumns - 1)).each do |j|\n      a = unsafe_fetch(i, j)\n      unsafe_set(i, j, unsafe_fetch(j, i))\n      unsafe_set(j, i, a)\n    end\n  end\nelse\n  if (nrows == 1) || (ncolumns == 1)\n    @nrows, @ncolumns = @ncolumns, @nrows\n  else\n    newraw = Slice(T).new(nrows * ncolumns, T.new(0))\n    each_with_index do |v, r, c|\n      newraw[c + (r * ncolumns)] = v\n    end\n    @raw = newraw\n    @nrows, @ncolumns = @ncolumns, @nrows\n  end\nend\nself.flags = flags.transpose\nself\n"}},{"html_id":"unsafe_fetch(i,j)-instance-method","name":"unsafe_fetch","doc":"returns element at row i and column j, without performing any checks","summary":"<p>returns element at row i and column j, without performing any checks</p>","abstract":false,"args":[{"name":"i","external_name":"i","restriction":""},{"name":"j","external_name":"j","restriction":""}],"args_string":"(i, j)","args_html":"(i, j)","location":{"filename":"src/matrix/general_matrix.cr","line_number":99,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L99"},"def":{"name":"unsafe_fetch","args":[{"name":"i","external_name":"i","restriction":""},{"name":"j","external_name":"j","restriction":""}],"visibility":"Public","body":"@raw.unsafe_fetch(i + (j * nrows))"}},{"html_id":"unsafe_set(i,j,value)-instance-method","name":"unsafe_set","doc":"sets element at row i and column j to value, without performing any checks","summary":"<p>sets element at row i and column j to value, without performing any checks</p>","abstract":false,"args":[{"name":"i","external_name":"i","restriction":""},{"name":"j","external_name":"j","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(i, j, value)","args_html":"(i, j, value)","location":{"filename":"src/matrix/general_matrix.cr","line_number":104,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L104"},"def":{"name":"unsafe_set","args":[{"name":"i","external_name":"i","restriction":""},{"name":"j","external_name":"j","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"clear_flags\n@raw[i + (j * nrows)] = T.new(value)\n"}},{"html_id":"vcat!(other)-instance-method","name":"vcat!","doc":"Concatenate matrix adding another matrix vertically (so they form a column)","summary":"<p>Concatenate matrix adding another matrix vertically (so they form a column)</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/matrix/general_matrix.cr","line_number":297,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L297"},"def":{"name":"vcat!","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"cat!(other, 0)"}}]},{"html_id":"linalg/LA/GMat","path":"LA/GMat.html","kind":"alias","full_name":"LA::GMat","name":"GMat","abstract":false,"locations":[{"filename":"src/matrix/general_matrix.cr","line_number":348,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L348"}],"repository_name":"linalg","program":false,"enum":false,"alias":true,"aliased":"LA::GeneralMatrix(Float64)","aliased_html":"<a href=\"../LA/GeneralMatrix.html\">LA::GeneralMatrix(Float64)</a>","const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"}},{"html_id":"linalg/LA/GMat32","path":"LA/GMat32.html","kind":"alias","full_name":"LA::GMat32","name":"GMat32","abstract":false,"locations":[{"filename":"src/matrix/general_matrix.cr","line_number":349,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L349"}],"repository_name":"linalg","program":false,"enum":false,"alias":true,"aliased":"LA::GeneralMatrix(Float32)","aliased_html":"<a href=\"../LA/GeneralMatrix.html\">LA::GeneralMatrix(Float32)</a>","const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"}},{"html_id":"linalg/LA/GMatComplex","path":"LA/GMatComplex.html","kind":"alias","full_name":"LA::GMatComplex","name":"GMatComplex","abstract":false,"locations":[{"filename":"src/matrix/general_matrix.cr","line_number":350,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/general_matrix.cr#L350"}],"repository_name":"linalg","program":false,"enum":false,"alias":true,"aliased":"LA::GeneralMatrix(Complex)","aliased_html":"<a href=\"../LA/GeneralMatrix.html\">LA::GeneralMatrix</a>(<a href=\"../Complex.html\">Complex</a>)","const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"}},{"html_id":"linalg/LA/LinAlgError","path":"LA/LinAlgError.html","kind":"class","full_name":"LA::LinAlgError","name":"LinAlgError","abstract":false,"superclass":{"html_id":"linalg/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"linalg/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"linalg/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/linalg/linalg.cr","line_number":30,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L30"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"}},{"html_id":"linalg/LA/LSMethod","path":"LA/LSMethod.html","kind":"enum","full_name":"LA::LSMethod","name":"LSMethod","abstract":false,"ancestors":[{"html_id":"linalg/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"linalg/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"linalg/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/linalg/linalg.cr","line_number":7,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L7"}],"repository_name":"linalg","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Auto","name":"Auto","value":"0"},{"id":"QR","name":"QR","value":"1"},{"id":"Orthogonal","name":"Orthogonal","value":"2"},{"id":"SVD","name":"SVD","value":"3"},{"id":"LS","name":"LS","value":"1"},{"id":"LSY","name":"LSY","value":"2"},{"id":"LSD","name":"LSD","value":"3"}],"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"},"instance_methods":[{"html_id":"auto?-instance-method","name":"auto?","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":8,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L8"},"def":{"name":"auto?","visibility":"Public","body":"self == Auto"}},{"html_id":"ls?-instance-method","name":"ls?","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":12,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L12"},"def":{"name":"ls?","visibility":"Public","body":"self == LS"}},{"html_id":"lsd?-instance-method","name":"lsd?","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":14,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L14"},"def":{"name":"lsd?","visibility":"Public","body":"self == LSD"}},{"html_id":"lsy?-instance-method","name":"lsy?","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":13,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L13"},"def":{"name":"lsy?","visibility":"Public","body":"self == LSY"}},{"html_id":"orthogonal?-instance-method","name":"orthogonal?","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":10,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L10"},"def":{"name":"orthogonal?","visibility":"Public","body":"self == Orthogonal"}},{"html_id":"qr?-instance-method","name":"qr?","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":9,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L9"},"def":{"name":"qr?","visibility":"Public","body":"self == QR"}},{"html_id":"svd?-instance-method","name":"svd?","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":11,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L11"},"def":{"name":"svd?","visibility":"Public","body":"self == SVD"}}]},{"html_id":"linalg/LA/LUMatrix","path":"LA/LUMatrix.html","kind":"struct","full_name":"LA::LUMatrix(T)","name":"LUMatrix","abstract":false,"superclass":{"html_id":"linalg/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"linalg/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"linalg/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/linalg/lu.cr","line_number":63,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lu.cr#L63"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"},"constructors":[{"html_id":"new(a:LA::Matrix(T),ipiv:Slice(Int32))-class-method","name":"new","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"::LA::Matrix(T)"},{"name":"ipiv","external_name":"ipiv","restriction":"::Slice(::Int32)"}],"args_string":"(a : LA::Matrix(T), ipiv : Slice(Int32))","args_html":"(a : <a href=\"../LA/Matrix.html\">LA::Matrix</a>(T), ipiv : Slice(Int32))","location":{"filename":"src/linalg/lu.cr","line_number":105,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lu.cr#L105"},"def":{"name":"new","args":[{"name":"a","external_name":"a","restriction":"::LA::Matrix(T)"},{"name":"ipiv","external_name":"ipiv","restriction":"::Slice(::Int32)"}],"visibility":"Public","body":"_ = LUMatrix(T).allocate\n_.initialize(a, ipiv)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"size-instance-method","name":"size","abstract":false,"location":{"filename":"src/linalg/lu.cr","line_number":108,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lu.cr#L108"},"def":{"name":"size","visibility":"Public","body":"@a.nrows"}},{"html_id":"solve(b,transpose=LUTranspose::None,*,overwrite_b=false)-instance-method","name":"solve","abstract":false,"args":[{"name":"b","external_name":"b","restriction":""},{"name":"transpose","default_value":"LUTranspose::None","external_name":"transpose","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"args_string":"(b, transpose = LUTranspose::None, *, overwrite_b = false)","args_html":"(b, transpose = <span class=\"t\">LUTranspose</span><span class=\"t\">::</span><span class=\"t\">None</span>, *, overwrite_b = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/lu.cr","line_number":112,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lu.cr#L112"},"def":{"name":"solve","args":[{"name":"b","external_name":"b","restriction":""},{"name":"transpose","default_value":"LUTranspose::None","external_name":"transpose","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"splat_index":2,"visibility":"Public","body":"if @a.nrows == b.nrows\nelse\n  raise(ArgumentError.new(\"nrows of a and b must match\"))\nend\ntrans = (case transpose\nin .none?\n  'N'\nin .transpose?\n  'T'\nin .conj_transpose?\n  'C'\nend).ord.to_u8\nx = overwrite_b ? b : b.clone\nlapack(getrs, trans, size, b.ncolumns, @a, size, @ipiv, x, x.nrows)\nx.clear_flags\nx\n"}}],"macros":[{"html_id":"lapack(name,*args)-macro","name":"lapack","doc":"TODO - more macro magic?","summary":"<p><span class=\"flag orange\">TODO</span>  - more macro magic?</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"args","external_name":"args","restriction":""}],"args_string":"(name, *args)","args_html":"(name, *args)","location":{"filename":"src/linalg/lu.cr","line_number":68,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lu.cr#L68"},"def":{"name":"lapack","args":[{"name":"name","external_name":"name","restriction":""},{"name":"args","external_name":"args","restriction":""}],"splat_index":1,"visibility":"Public","body":"      \n{% lapack_funcs = {\"getrs\" => {4 => LapackHelper::ARG_MATRIX, 6 => LapackHelper::ARG_MATRIX, 7 => LapackHelper::ARG_MATRIX}} %}\n\n      \n{% func_data = lapack_funcs[name.stringify] %}\n\n\n      \n{% if T == Float32\n  typ = (:s).id\nelse\n  if T == Float64\n    typ = (:d).id\n  else\n    if T == Complex\n      typ = (:z).id\n    end\n  end\nend %}\n\n         \n{% for arg, index in args %}\n           {% argtype = func_data[index + 1] %}\n           {% if argtype == LapackHelper::ARG_MATRIX %}\n           {% else %}\n           %var{index} = {{ arg }}\n           {% end %}\n         {% end %}\n\n       \n%info\n = 0\n       LibLAPACK.\n{{ typ }}\n{{ name }}\n(\n       \n{% for arg, index in args %}\n       {% argtype = func_data[index + 1] %}\n       {% if argtype == LapackHelper::ARG_MATRIX %}\n         {{ arg }},\n       {% else %}\n        pointerof(%var{index}),\n       {% end %}\n       {% end %}\n\n         pointerof(\n%info\n))\n      raise LinAlgError.new(\"LAPACK.\n{{ typ }}\n{{ name }}\n returned #{\n%info\n}\") if \n%info\n != 0\n    \n"}}]},{"html_id":"linalg/LA/LUTranspose","path":"LA/LUTranspose.html","kind":"enum","full_name":"LA::LUTranspose","name":"LUTranspose","abstract":false,"ancestors":[{"html_id":"linalg/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"linalg/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"linalg/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/linalg/lu.cr","line_number":57,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lu.cr#L57"}],"repository_name":"linalg","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"None","name":"None","value":"0"},{"id":"Transpose","name":"Transpose","value":"1"},{"id":"ConjTranspose","name":"ConjTranspose","value":"2"}],"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"},"instance_methods":[{"html_id":"conj_transpose?-instance-method","name":"conj_transpose?","abstract":false,"location":{"filename":"src/linalg/lu.cr","line_number":60,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lu.cr#L60"},"def":{"name":"conj_transpose?","visibility":"Public","body":"self == ConjTranspose"}},{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/linalg/lu.cr","line_number":58,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lu.cr#L58"},"def":{"name":"none?","visibility":"Public","body":"self == None"}},{"html_id":"transpose?-instance-method","name":"transpose?","abstract":false,"location":{"filename":"src/linalg/lu.cr","line_number":59,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lu.cr#L59"},"def":{"name":"transpose?","visibility":"Public","body":"self == Transpose"}}]},{"html_id":"linalg/LA/Mat","path":"LA/Mat.html","kind":"alias","full_name":"LA::Mat","name":"Mat","abstract":false,"locations":[{"filename":"src/matrix/matrix.cr","line_number":711,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L711"}],"repository_name":"linalg","program":false,"enum":false,"alias":true,"aliased":"LA::Matrix(Float64)","aliased_html":"<a href=\"../LA/Matrix.html\">LA::Matrix(Float64)</a>","const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"}},{"html_id":"linalg/LA/Mat32","path":"LA/Mat32.html","kind":"alias","full_name":"LA::Mat32","name":"Mat32","abstract":false,"locations":[{"filename":"src/matrix/matrix.cr","line_number":712,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L712"}],"repository_name":"linalg","program":false,"enum":false,"alias":true,"aliased":"LA::Matrix(Float32)","aliased_html":"<a href=\"../LA/Matrix.html\">LA::Matrix(Float32)</a>","const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"}},{"html_id":"linalg/LA/MatComplex","path":"LA/MatComplex.html","kind":"alias","full_name":"LA::MatComplex","name":"MatComplex","abstract":false,"locations":[{"filename":"src/matrix/matrix.cr","line_number":713,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L713"}],"repository_name":"linalg","program":false,"enum":false,"alias":true,"aliased":"LA::Matrix(Complex)","aliased_html":"<a href=\"../LA/Matrix.html\">LA::Matrix</a>(<a href=\"../Complex.html\">Complex</a>)","const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"}},{"html_id":"linalg/LA/Matrix","path":"LA/Matrix.html","kind":"class","full_name":"LA::Matrix(T)","name":"Matrix","abstract":true,"superclass":{"html_id":"linalg/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"linalg/LA/LapackHelper","kind":"module","full_name":"LA::LapackHelper","name":"LapackHelper"},{"html_id":"linalg/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"linalg/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/linalg/cholesky.cr","line_number":11,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/cholesky.cr#L11"},{"filename":"src/linalg/eig.cr","line_number":11,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/eig.cr#L11"},{"filename":"src/linalg/expm.cr","line_number":28,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/expm.cr#L28"},{"filename":"src/linalg/lapack_helper.cr","line_number":18,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lapack_helper.cr#L18"},{"filename":"src/linalg/linalg.cr","line_number":53,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L53"},{"filename":"src/linalg/lu.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lu.cr#L4"},{"filename":"src/linalg/matfun.cr","line_number":13,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L13"},{"filename":"src/linalg/mult.cr","line_number":6,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/mult.cr#L6"},{"filename":"src/linalg/power.cr","line_number":3,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/power.cr#L3"},{"filename":"src/linalg/qr.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/qr.cr#L4"},{"filename":"src/linalg/rq_lq_ql.cr","line_number":41,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/rq_lq_ql.cr#L41"},{"filename":"src/linalg/schur.cr","line_number":11,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/schur.cr#L11"},{"filename":"src/matrix/flag_checks.cr","line_number":2,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flag_checks.cr#L2"},{"filename":"src/matrix/formatted_reader.cr","line_number":43,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/formatted_reader.cr#L43"},{"filename":"src/matrix/formatted_writer.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/formatted_writer.cr#L4"},{"filename":"src/matrix/iteration.cr","line_number":5,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/iteration.cr#L5"},{"filename":"src/matrix/matrix.cr","line_number":15,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L15"},{"filename":"src/matrix/special_matrix.cr","line_number":6,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L6"},{"filename":"src/matrix/special_matrix.cr","line_number":304,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L304"},{"filename":"src/matrix/special_matrix.cr","line_number":338,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L338"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"linalg/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"linalg/LA/LapackHelper","kind":"module","full_name":"LA::LapackHelper","name":"LapackHelper"}],"subclasses":[{"html_id":"linalg/LA/BandedMatrix","kind":"class","full_name":"LA::BandedMatrix(T)","name":"BandedMatrix"},{"html_id":"linalg/LA/GeneralMatrix","kind":"class","full_name":"LA::GeneralMatrix(T)","name":"GeneralMatrix"},{"html_id":"linalg/LA/Sparse/Matrix","kind":"class","full_name":"LA::Sparse::Matrix(T)","name":"Matrix"},{"html_id":"linalg/LA/SubMatrix","kind":"class","full_name":"LA::SubMatrix(T)","name":"SubMatrix"}],"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"},"doc":"class that provide all utility matrix functions","summary":"<p>class that provide all utility matrix functions</p>","class_methods":[{"html_id":"arange(start_val:T,end_val:T,delta=1.0)-class-method","name":"arange","doc":"Create row from start_val...end_val with step of delta between","summary":"<p>Create row from start_val...end_val with step of delta between</p>","abstract":false,"args":[{"name":"start_val","external_name":"start_val","restriction":"T"},{"name":"end_val","external_name":"end_val","restriction":"T"},{"name":"delta","default_value":"1.0","external_name":"delta","restriction":""}],"args_string":"(start_val : T, end_val : T, delta = 1.0)","args_html":"(start_val : T, end_val : T, delta = <span class=\"n\">1.0</span>)","location":{"filename":"src/matrix/matrix.cr","line_number":517,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L517"},"def":{"name":"arange","args":[{"name":"start_val","external_name":"start_val","restriction":"T"},{"name":"end_val","external_name":"end_val","restriction":"T"},{"name":"delta","default_value":"1.0","external_name":"delta","restriction":""}],"visibility":"Public","body":"if ((end_val - start_val).sign == delta.sign) && delta.abs > 0\nelse\n  return GeneralMatrix(T).new(1, 0)\nend\nGeneralMatrix(T).new(1, ((end_val - start_val).abs.ceil / delta.abs).ceil.to_i) do |i, j|\n  start_val + (j * delta)\nend\n"}},{"html_id":"block_diag(*args)-class-method","name":"block_diag","doc":"Create a block diagonal matrix from provided matrices\n\nGiven the inputs A, B and C, the output will have these matrices arranged on the diagonal:\n\nExample:\n```\nm = Mat.block_diag(a, b, c)\n```\nm will have following structure:\n```\n[[a, 0, 0],\n [0, b, 0],\n [0, 0, c]]\n```","summary":"<p>Create a block diagonal matrix from provided matrices</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args)","args_html":"(*args)","location":{"filename":"src/matrix/special_matrix.cr","line_number":47,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L47"},"def":{"name":"block_diag","args":[{"name":"args","external_name":"args","restriction":""}],"splat_index":0,"visibility":"Public","body":"nrows = args.sum(&.nrows)\nncolumns = args.sum(&.ncolumns)\n(GeneralMatrix(T).new(nrows, ncolumns)).tap do |result|\n  row = 0\n  column = 0\n  args.each do |arg|\n    result[row...(row + arg.nrows), column...(column + arg.ncolumns)] = arg\n    row = row + arg.nrows\n    column = column + arg.ncolumns\n  end\nend\n"}},{"html_id":"circulant(c)-class-method","name":"circulant","doc":"Construct a [Circulant matrix](https://en.wikipedia.org/wiki/Circulant_matrix)\n\nc - first column of matrix\n\nExample:\n```\na = circulant([1, 2, 3])\na.to_aa # => [[1, 3, 2],[2, 1, 3],[3, 2, 1]])\n```\nBehaviour copied from [scipy](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.circulant.html)","summary":"<p>Construct a <a href=\"https://en.wikipedia.org/wiki/Circulant_matrix\">Circulant matrix</a></p>","abstract":false,"args":[{"name":"c","external_name":"c","restriction":""}],"args_string":"(c)","args_html":"(c)","location":{"filename":"src/matrix/special_matrix.cr","line_number":116,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L116"},"def":{"name":"circulant","args":[{"name":"c","external_name":"c","restriction":""}],"visibility":"Public","body":"GeneralMatrix(T).new(c.size, c.size) do |i, j|\n  k = i - j\n  c[(k + c.size) % c.size]\nend"}},{"html_id":"column(values)-class-method","name":"column","doc":"Returns single column matrix with elements taken from array `values`","summary":"<p>Returns single column matrix with elements taken from array <code>values</code></p>","abstract":false,"args":[{"name":"values","external_name":"values","restriction":""}],"args_string":"(values)","args_html":"(values)","location":{"filename":"src/matrix/matrix.cr","line_number":479,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L479"},"def":{"name":"column","args":[{"name":"values","external_name":"values","restriction":""}],"visibility":"Public","body":"GeneralMatrix(T).new(values.size, 1, values)"}},{"html_id":"companion(a)-class-method","name":"companion","doc":"Create a companion matrix associated with the polynomial whose coefficients are given in `a`\n\nBehaviour copied from [scipy](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.companion.html)\n\nExample:\n```\nMat.companion([1, -10, 31, -30]) # =>\n# LA::GeneralMatrix(Float64) (3x3, None):\n# [10.0, -31.0, 30.0]\n# [1.0, 0.0, 0.0]\n# [0.0, 1.0, 0.0]\n```","summary":"<p>Create a companion matrix associated with the polynomial whose coefficients are given in <code>a</code></p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":""}],"args_string":"(a)","args_html":"(a)","location":{"filename":"src/matrix/special_matrix.cr","line_number":157,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L157"},"def":{"name":"companion","args":[{"name":"a","external_name":"a","restriction":""}],"visibility":"Public","body":"k = -1.0 / a[0]\n(GeneralMatrix(T).new(a.size - 1, a.size - 1)).tap do |matrix|\n  (a.size - 1).times do |i|\n    matrix.unsafe_set(0, i, T.new(a[i + 1] * k))\n  end\n  (a.size - 2).times do |i|\n    matrix.unsafe_set(i + 1, i, T.new(1))\n  end\nend\n"}},{"html_id":"dft(n,scale:DFTScale=DFTScale::None)-class-method","name":"dft","abstract":false,"args":[{"name":"n","external_name":"n","restriction":""},{"name":"scale","default_value":"DFTScale::None","external_name":"scale","restriction":"DFTScale"}],"args_string":"(n, scale : DFTScale = DFTScale::None)","args_html":"(n, scale : <a href=\"../LA/DFTScale.html\">DFTScale</a> = <span class=\"t\">DFTScale</span><span class=\"t\">::</span><span class=\"t\">None</span>)","location":{"filename":"src/matrix/special_matrix.cr","line_number":305,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L305"},"def":{"name":"dft","args":[{"name":"n","external_name":"n","restriction":""},{"name":"scale","default_value":"DFTScale::None","external_name":"scale","restriction":"DFTScale"}],"visibility":"Public","body":"{% unless T == Complex\n  raise(\"DFT matrix must be Complex\")\nend %}\nj = Complex.new(0, 1)\nw = Math.exp(((-2 * Math::PI) * j) / n)\nresult = (Matrix(T).ones(n, n)).clone\nresult.each_index do |i, j|\n  if (i == 0) || (j == 0)\n    next\n  end\n  if j == 1\n    result.unsafe_set(i, j, w * (result.unsafe_fetch(i - 1, j)))\n  else\n    result.unsafe_set(i, j, (result.unsafe_fetch(i, 1)) * (result.unsafe_fetch(i, j - 1)))\n  end\nend\ncase scale\nin .sqrt_n?\n  scale = 1.0 / (Math.sqrt(n))\n  result.map! do |v|\n    scale * v\n  end\nin .n?\n  scale = 1.0 / n\n  result.map! do |v|\n    scale * v\n  end\nin .none?\nend\nresult\n"}},{"html_id":"diag(nrows,ncolumns,value:Number|Complex)-class-method","name":"diag","doc":"Returns diagonal matrix of given size with all diagonal elements equal to `value`","summary":"<p>Returns diagonal matrix of given size with all diagonal elements equal to <code>value</code></p>","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"value","external_name":"value","restriction":"Number | Complex"}],"args_string":"(nrows, ncolumns, value : Number | Complex)","args_html":"(nrows, ncolumns, value : <a href=\"../Number.html\">Number</a> | <a href=\"../Complex.html\">Complex</a>)","location":{"filename":"src/matrix/matrix.cr","line_number":458,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L458"},"def":{"name":"diag","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"value","external_name":"value","restriction":"Number | Complex"}],"visibility":"Public","body":"diag(nrows, ncolumns) do\n  value\nend"}},{"html_id":"diag(nrows,ncolumns,values)-class-method","name":"diag","doc":"Returns diagonal matrix of given size with diagonal elements taken from array `values`","summary":"<p>Returns diagonal matrix of given size with diagonal elements taken from array <code>values</code></p>","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"values","external_name":"values","restriction":""}],"args_string":"(nrows, ncolumns, values)","args_html":"(nrows, ncolumns, values)","location":{"filename":"src/matrix/matrix.cr","line_number":463,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L463"},"def":{"name":"diag","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"values","external_name":"values","restriction":""}],"visibility":"Public","body":"GeneralMatrix(T).diag(nrows, ncolumns, values)"}},{"html_id":"diag(values)-class-method","name":"diag","doc":"Returns square diagonal matrix with diagonal elements taken from array `values`","summary":"<p>Returns square diagonal matrix with diagonal elements taken from array <code>values</code></p>","abstract":false,"args":[{"name":"values","external_name":"values","restriction":""}],"args_string":"(values)","args_html":"(values)","location":{"filename":"src/matrix/matrix.cr","line_number":474,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L474"},"def":{"name":"diag","args":[{"name":"values","external_name":"values","restriction":""}],"visibility":"Public","body":"diag(values.size, values.size, values)"}},{"html_id":"diag(nrows,ncolumns,&)-class-method","name":"diag","doc":"Returns diagonal matrix of given size with diagonal elements equal to block value","summary":"<p>Returns diagonal matrix of given size with diagonal elements equal to block value</p>","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""}],"args_string":"(nrows, ncolumns, &)","args_html":"(nrows, ncolumns, &)","location":{"filename":"src/matrix/matrix.cr","line_number":489,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L489"},"def":{"name":"diag","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""}],"yields":1,"block_arity":1,"visibility":"Public","body":"BandedMatrix(T).new(nrows, ncolumns, 0, 0, MatrixFlags.for_diag(nrows == ncolumns)) do |i, j|\n  yield i\nend"}},{"html_id":"eye(n)-class-method","name":"eye","doc":"returns identity matrix of size `n`","summary":"<p>returns identity matrix of size <code>n</code></p>","abstract":false,"args":[{"name":"n","external_name":"n","restriction":""}],"args_string":"(n)","args_html":"(n)","location":{"filename":"src/matrix/matrix.cr","line_number":512,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L512"},"def":{"name":"eye","args":[{"name":"n","external_name":"n","restriction":""}],"visibility":"Public","body":"self.identity(n)"}},{"html_id":"from_custom(str:String,prefix,columns_separator,rows_separator,postfix)-class-method","name":"from_custom","doc":"Converts a string of given format to matrix\nExample:\n```\nstr = \"( 1,2,3 | 4,5,6 | 7,8,9 )\"\nLA::GMat.from_custom(str, \"(\", \",\", \"|\", \")\")\n```","summary":"<p>Converts a string of given format to matrix Example: <code>str = &quot;( 1,2,3 | 4,5,6 | 7,8,9 )&quot; LA::GMat.from_custom(str, &quot;(&quot;, &quot;,&quot;, &quot;|&quot;, &quot;)&quot;)</code></p>","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"},{"name":"prefix","external_name":"prefix","restriction":""},{"name":"columns_separator","external_name":"columns_separator","restriction":""},{"name":"rows_separator","external_name":"rows_separator","restriction":""},{"name":"postfix","external_name":"postfix","restriction":""}],"args_string":"(str : String, prefix, columns_separator, rows_separator, postfix)","args_html":"(str : String, prefix, columns_separator, rows_separator, postfix)","location":{"filename":"src/matrix/formatted_reader.cr","line_number":96,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/formatted_reader.cr#L96"},"def":{"name":"from_custom","args":[{"name":"str","external_name":"str","restriction":"String"},{"name":"prefix","external_name":"prefix","restriction":""},{"name":"columns_separator","external_name":"columns_separator","restriction":""},{"name":"rows_separator","external_name":"rows_separator","restriction":""},{"name":"postfix","external_name":"postfix","restriction":""}],"visibility":"Public","body":"from_custom(IO::Memory.new(str), prefix, columns_separator, rows_separator, postfix)"}},{"html_id":"from_custom(io,prefix,columns_separator,rows_separator,postfix)-class-method","name":"from_custom","doc":"Converts a string of given format to matrix\nExample:\n```\nstr = \"( 1,2,3 | 4,5,6 | 7,8,9 )\"\nLA::GMat.from_custom(IO::Memory.new(str), prefix: \"(\", columns_separator: \",\", rows_separator: \"|\", postfix: \")\")\n```","summary":"<p>Converts a string of given format to matrix Example: <code>str = &quot;( 1,2,3 | 4,5,6 | 7,8,9 )&quot; LA::GMat.from_custom(IO::Memory.new(str), prefix: &quot;(&quot;, columns_separator: &quot;,&quot;, rows_separator: &quot;|&quot;, postfix: &quot;)&quot;)</code></p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""},{"name":"prefix","external_name":"prefix","restriction":""},{"name":"columns_separator","external_name":"columns_separator","restriction":""},{"name":"rows_separator","external_name":"rows_separator","restriction":""},{"name":"postfix","external_name":"postfix","restriction":""}],"args_string":"(io, prefix, columns_separator, rows_separator, postfix)","args_html":"(io, prefix, columns_separator, rows_separator, postfix)","location":{"filename":"src/matrix/formatted_reader.cr","line_number":50,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/formatted_reader.cr#L50"},"def":{"name":"from_custom","args":[{"name":"io","external_name":"io","restriction":""},{"name":"prefix","external_name":"prefix","restriction":""},{"name":"columns_separator","external_name":"columns_separator","restriction":""},{"name":"rows_separator","external_name":"rows_separator","restriction":""},{"name":"postfix","external_name":"postfix","restriction":""}],"visibility":"Public","body":"io.gets(prefix)\npostfix_empty = postfix == \"\"\narr = postfix_empty ? {columns_separator, rows_separator} : {columns_separator, rows_separator, postfix}\nscan = Utils.prepare_multi_gets(arr)\nrow = 0\ncolumn = 0\nlast_column = 0\ndata = Array(T).new\nloop do\n  token = Utils.multi_gets(io, scan)\n  if token\n    data << (T.new(token[1]))\n    case token[0]\n    when 0\n      if column >= last_column && row > 0\n        raise(MatrixParseError.new(\"row #{row} too long\"))\n      end\n      column = column + 1\n    when 1\n      if row == 0\n        last_column = column\n      else\n        if column != last_column\n          raise(MatrixParseError.new(\"row #{row} too short\"))\n        end\n      end\n      row = row + 1\n      column = 0\n    else\n      break\n    end\n  else\n    if postfix_empty\n      row = row - 1\n      break\n    else\n      raise(MatrixParseError.new(\"postfix not found\"))\n    end\n  end\nend\nGeneralMatrix(T).new(row + 1, last_column + 1, data)\n"}},{"html_id":"from_matlab(s)-class-method","name":"from_matlab","doc":"Converts a string from matlab format to matrix\nExample:\n```\nstr = \"[1,2,3; 4,5,6; 7,8,9]\"\nLA::GMat.from_matlab(str)\n```","summary":"<p>Converts a string from matlab format to matrix Example: <code>str = &quot;[1,2,3; 4,5,6; 7,8,9]&quot; LA::GMat.from_matlab(str)</code></p>","abstract":false,"args":[{"name":"s","external_name":"s","restriction":""}],"args_string":"(s)","args_html":"(s)","location":{"filename":"src/matrix/formatted_reader.cr","line_number":106,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/formatted_reader.cr#L106"},"def":{"name":"from_matlab","args":[{"name":"s","external_name":"s","restriction":""}],"visibility":"Public","body":"from_custom(IO::Memory.new(s), \"[\", \",\", \";\", \"]\")"}},{"html_id":"hadamard(n)-class-method","name":"hadamard","doc":"Constructs an n-by-n Hadamard matrix, n must be power of 2\n\nBehaviour copied from [scipy](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.hadamard.html)\n\nExample:\n```\nMat.hadamard(4) # =>\n# LA::GeneralMatrix(Float64) (4x4,  Symmetric | Hermitian):\n# [1.0, 1.0, 1.0, 1.0]\n# [1.0, -1.0, 1.0, -1.0]\n# [1.0, 1.0, -1.0, -1.0]\n# [1.0, -1.0, -1.0, 1.0]\n```","summary":"<p>Constructs an n-by-n Hadamard matrix, n must be power of 2</p>","abstract":false,"args":[{"name":"n","external_name":"n","restriction":""}],"args_string":"(n)","args_html":"(n)","location":{"filename":"src/matrix/special_matrix.cr","line_number":178,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L178"},"def":{"name":"hadamard","args":[{"name":"n","external_name":"n","restriction":""}],"visibility":"Public","body":"if n > 0\nelse\n  raise(ArgumentError.new(\"size must be positive\"))\nend\nif n.popcount == 1\nelse\n  raise(ArgumentError.new(\"size must be power of two\"))\nend\nm = case n\nwhen 1\n  GeneralMatrix(T).new([[1]])\nwhen 2\n  GeneralMatrix(T).new([[1, 1], [1, -1]])\nelse\n  (hadamard(n // 2)).kron(hadamard(2))\nend\nm.assume!(MatrixFlags::Symmetric | MatrixFlags::Hermitian)\nm\n"}},{"html_id":"hankel(column:Indexable|Matrix,row:Indexable|Matrix|Nil=nil)-class-method","name":"hankel","doc":"Create a Hankel matrix\nThe Hankel matrix has constant anti-diagonals, with `column` as its first column and `row` as its last row.\nIf `row is nil, then row with elements equal to zero is assumed.\nBehaviour copied from [scipy](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.hankel.html)\nExamples:\n```\na = Mat.hankel([1, 17, 99])\na.to_aa # => [\n# [ 1, 17, 99],\n# [17, 99,  0],\n# [99,  0,  0]]\na = Mat.hankel([1, 2, 3, 4], [4, 7, 7, 8, 9])\na.to_aa # => [\n# [1, 2, 3, 4, 7],\n# [2, 3, 4, 7, 7],\n# [3, 4, 7, 7, 8],\n# [4, 7, 7, 8, 9]]\n```","summary":"<p>Create a Hankel matrix The Hankel matrix has constant anti-diagonals, with <code><a href=\"../LA/Matrix.html#column%28values%29-class-method\">.column</a></code> as its first column and <code><a href=\"../LA/Matrix.html#row%28values%29-class-method\">.row</a></code> as its last row.</p>","abstract":false,"args":[{"name":"column","external_name":"column","restriction":"Indexable | Matrix"},{"name":"row","default_value":"nil","external_name":"row","restriction":"Indexable | Matrix | Nil"}],"args_string":"(column : Indexable | Matrix, row : Indexable | Matrix | Nil = nil)","args_html":"(column : Indexable | <a href=\"../LA/Matrix.html\">Matrix</a>, row : Indexable | <a href=\"../LA/Matrix.html\">Matrix</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/matrix/special_matrix.cr","line_number":212,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L212"},"def":{"name":"hankel","args":[{"name":"column","external_name":"column","restriction":"Indexable | Matrix"},{"name":"row","default_value":"nil","external_name":"row","restriction":"Indexable | Matrix | Nil"}],"visibility":"Public","body":"if row.is_a?(Matrix)\n  row = row.to_a\nend\nif column.is_a?(Matrix)\n  column = column.to_a\nend\nif row\n  GeneralMatrix(T).new(column.size, row.size) do |i, j|\n    k = i + j\n    if k < column.size\n      column[k]\n    else\n      row[(k - column.size) + 1]\n    end\n  end\nelse\n  GeneralMatrix(T).new(column.size, column.size, MatrixFlags::Symmetric) do |i, j|\n    k = i + j\n    if k < column.size\n      column[k]\n    else\n      0\n    end\n  end\nend\n"}},{"html_id":"helmert(n,full=false)-class-method","name":"helmert","doc":"Create an Helmert matrix of order n\n\nIf `full` is true the (n x n) matrix will be returned.\nOtherwise the submatrix that does not include the first row will be returned\n\nBehaviour copied from [scipy](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.helmert.html)\n\nExample:\n```\nMat.helmert(5, full: true) # =>\n# LA::GeneralMatrix(Float64) (5x5, Orthogonal):\n# [0.4472135954999579, 0.4472135954999579, 0.4472135954999579, 0.4472135954999579, 0.4472135954999579]\n# [0.7071067811865476, -0.7071067811865476, 0.0, 0.0, 0.0]\n# [0.408248290463863, 0.408248290463863, -0.816496580927726, 0.0, 0.0]\n# [0.28867513459481287, 0.28867513459481287, 0.28867513459481287, -0.8660254037844386, 0.0]\n# [0.22360679774997896, 0.22360679774997896, 0.22360679774997896, 0.22360679774997896, -0.8944271909999159]\n```","summary":"<p>Create an Helmert matrix of order n</p>","abstract":false,"args":[{"name":"n","external_name":"n","restriction":""},{"name":"full","default_value":"false","external_name":"full","restriction":""}],"args_string":"(n, full = false)","args_html":"(n, full = <span class=\"n\">false</span>)","location":{"filename":"src/matrix/special_matrix.cr","line_number":253,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L253"},"def":{"name":"helmert","args":[{"name":"n","external_name":"n","restriction":""},{"name":"full","default_value":"false","external_name":"full","restriction":""}],"visibility":"Public","body":"if full\n  result = GeneralMatrix(T).new(n, n)\nelse\n  result = GeneralMatrix(T).new(n - 1, n)\nend\nif full\n  result[0, 0...n] = T.new(Math.sqrt(1.0 / n))\n  rowdelta = 1\nelse\n  rowdelta = 0\nend\n(n - 1).times do |i|\n  x = i + 1\n  v = T.new(Math.sqrt(1.0 / (x + (x * x))))\n  result.unsafe_set(i + rowdelta, i + 1, (-v) * x)\n  result[i + rowdelta, 0..i] = v\nend\nif full\n  result.assume!(MatrixFlags::Orthogonal)\nend\nresult\n"}},{"html_id":"hilbert(n)-class-method","name":"hilbert","doc":"Create a Hilbert matrix of order n.\n\nReturns the n by n matrix with entries h[i,j] = 1 / (i + j + 1).\n\nBehaviour copied from [scipy](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.hilbert.html)\n\nExample:\n```\nMat.hilbert(3) # =>\n# LA::GeneralMatrix(Float64) (3x3, Symmetric | Hermitian | PositiveDefinite):\n# [1.0, 0.5, 0.3333333333333333]\n# [0.5, 0.3333333333333333, 0.25]\n# [0.3333333333333333, 0.25, 0.2]\n```","summary":"<p>Create a Hilbert matrix of order n.</p>","abstract":false,"args":[{"name":"n","external_name":"n","restriction":""}],"args_string":"(n)","args_html":"(n)","location":{"filename":"src/matrix/special_matrix.cr","line_number":291,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L291"},"def":{"name":"hilbert","args":[{"name":"n","external_name":"n","restriction":""}],"visibility":"Public","body":"GeneralMatrix(T).new(n, n, (MatrixFlags::Symmetric | MatrixFlags::Hermitian) | MatrixFlags::PositiveDefinite) do |i, j|\n  (T.new(1.0)) / ((i + j) + 1)\nend"}},{"html_id":"identity(n)-class-method","name":"identity","doc":"returns identity matrix of size `n`","summary":"<p>returns identity matrix of size <code>n</code></p>","abstract":false,"args":[{"name":"n","external_name":"n","restriction":""}],"args_string":"(n)","args_html":"(n)","location":{"filename":"src/matrix/matrix.cr","line_number":505,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L505"},"def":{"name":"identity","args":[{"name":"n","external_name":"n","restriction":""}],"visibility":"Public","body":"(diag(n, n) do |i|\n  1\nend).tap do |r|\n  r.assume!(MatrixFlags::PositiveDefinite)\nend"}},{"html_id":"invpascal(n,kind:PascalKind=PascalKind::Symmetric)-class-method","name":"invpascal","doc":"Returns the inverse of the n x n Pascal matrix\n\nThe Pascal matrix is a matrix containing the binomial coefficients as its elements.\n\n`kind` : see `PascalKind`\n\nBehaviour copied from [scipy](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.invpascal.html)\n\nExample:\n```\nMat.invpascal(4) # =>\n# LA::GeneralMatrix(Float64) (5x5, Symmetric | Hermitian | PositiveDefinite):\n# [5.0, -10.0, 10.0, -5.0, 1.0]\n# [-10.0, 30.0, -35.0, 19.0, -4.0]\n# [10.0, -35.0, 46.0, -27.0, 6.0]\n# [-5.0, 19.0, -27.0, 17.0, -4.0]\n# [1.0, -4.0, 6.0, -4.0, 1.0]\nMat.invpascal(5, PascalKind::Lower) # =>\n# LA::GeneralMatrix(Float64) (5x5, LowerTriangular):\n# [1.0, 0.0, 0.0, 0.0, 0.0]\n# [-1.0, 1.0, 0.0, 0.0, 0.0]\n# [1.0, -2.0, 1.0, 0.0, 0.0]\n# [-1.0, 3.0, -3.0, 1.0, 0.0]\n# [1.0, -4.0, 6.0, -4.0, 1.0]\n```","summary":"<p>Returns the inverse of the n x n Pascal matrix</p>","abstract":false,"args":[{"name":"n","external_name":"n","restriction":""},{"name":"kind","default_value":"PascalKind::Symmetric","external_name":"kind","restriction":"PascalKind"}],"args_string":"(n, kind : PascalKind = PascalKind::Symmetric)","args_html":"(n, kind : <a href=\"../LA/PascalKind.html\">PascalKind</a> = <span class=\"t\">PascalKind</span><span class=\"t\">::</span><span class=\"t\">Symmetric</span>)","location":{"filename":"src/matrix/special_matrix.cr","line_number":431,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L431"},"def":{"name":"invpascal","args":[{"name":"n","external_name":"n","restriction":""},{"name":"kind","default_value":"PascalKind::Symmetric","external_name":"kind","restriction":"PascalKind"}],"visibility":"Public","body":"case kind\nwhen .symmetric?\n  result = (invpascal(n, PascalKind::Upper)) * (invpascal(n, PascalKind::Lower))\n  result.assume!((MatrixFlags::Symmetric | MatrixFlags::Hermitian) | MatrixFlags::PositiveDefinite)\n  result\nelse\n  (pascal(n, kind)).map_with_index! do |v, r, c|\n    ((r - c) % 2) == 0 ? v : -v\n  end.tap do |m|\n    if kind.lower?\n      m.assume!(MatrixFlags::LowerTriangular)\n    else\n      m.assume!(MatrixFlags::UpperTriangular)\n    end\n  end\nend"}},{"html_id":"kron(a,b)-class-method","name":"kron","doc":"Returns kroneker product of matrices\n\nResulting matrix size is `{a.nrows*b.nrows, a.ncolumns*b.ncolumns}`","summary":"<p>Returns kroneker product of matrices</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""}],"args_string":"(a, b)","args_html":"(a, b)","location":{"filename":"src/matrix/matrix.cr","line_number":498,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L498"},"def":{"name":"kron","args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""}],"visibility":"Public","body":"GeneralMatrix(T).new(a.nrows * b.nrows, a.ncolumns * b.ncolumns) do |i, j|\n  (a.unsafe_fetch(i // b.nrows, j // b.ncolumns)) * (b.unsafe_fetch(i % b.nrows, j % b.ncolumns))\nend"}},{"html_id":"leslie(f,s)-class-method","name":"leslie","doc":"Create a Leslie matrix\n\nGiven the length n array of fecundity coefficients `f` and the length n-1 array of survival coefficients `s`, return the associated Leslie matrix.\n\nBehaviour copied from [scipy](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.leslie.html)\n\nExample:\n```\nMat.leslie([0.1, 2.0, 1.0, 0.1], [0.2, 0.8, 0.7]) # =>\n# LA::GeneralMatrix(Float64) (4x4, None):\n# [0.1, 2.0, 1.0, 0.1]\n# [0.2, 0.0, 0.0, 0.0]\n# [0.0, 0.8, 0.0, 0.0]\n# [0.0, 0.0, 0.7, 0.0]\n```","summary":"<p>Create a Leslie matrix</p>","abstract":false,"args":[{"name":"f","external_name":"f","restriction":""},{"name":"s","external_name":"s","restriction":""}],"args_string":"(f, s)","args_html":"(f, s)","location":{"filename":"src/matrix/special_matrix.cr","line_number":138,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L138"},"def":{"name":"leslie","args":[{"name":"f","external_name":"f","restriction":""},{"name":"s","external_name":"s","restriction":""}],"visibility":"Public","body":"(GeneralMatrix(T).new(s.size + 1, f.size)).tap do |matrix|\n  f.each_with_index do |fi, i|\n    matrix.unsafe_set(0, i, T.new(fi))\n  end\n  s.each_with_index do |si, i|\n    matrix.unsafe_set(i + 1, i, T.new(si))\n  end\nend"}},{"html_id":"load_csv(filename)-class-method","name":"load_csv","doc":"Loads a matrix from CSV (comma separated values) file\nExample:\n```\nLA::GMat.rand(30, 30).save_csv(\"./test.csv\")\na = LA::GMat.load_csv(\"./test.csv\")\n```","summary":"<p>Loads a matrix from CSV (comma separated values) file Example: <code>LA::GMat.rand(30, 30)<a href=\"../LA/Matrix.html#save_csv%28filename%29-instance-method\">.save_csv(&quot;./test.csv&quot;)</a> a = LA::GMat.load_csv(&quot;./test.csv&quot;)</code></p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":""}],"args_string":"(filename)","args_html":"(filename)","location":{"filename":"src/matrix/formatted_reader.cr","line_number":116,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/formatted_reader.cr#L116"},"def":{"name":"load_csv","args":[{"name":"filename","external_name":"filename","restriction":""}],"visibility":"Public","body":"File.open(filename, \"r\") do |f|\n  return from_custom(f, \"\", \",\", \"\\n\", \"\")\nend"}},{"html_id":"ones(nrows,ncolumns)-class-method","name":"ones","doc":"Generate matrix of given size with all elements equal to one","summary":"<p>Generate matrix of given size with all elements equal to one</p>","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""}],"args_string":"(nrows, ncolumns)","args_html":"(nrows, ncolumns)","location":{"filename":"src/matrix/matrix.cr","line_number":444,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L444"},"def":{"name":"ones","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""}],"visibility":"Public","body":"(GeneralMatrix(T).new(nrows, ncolumns) do |i, j|\n  1\nend).tap do |m|\n  if m.square?\n    m.flags = MatrixFlags::Symmetric | MatrixFlags::Hermitian\n  end\nend"}},{"html_id":"pascal(n,kind:PascalKind=PascalKind::Symmetric)-class-method","name":"pascal","doc":"Returns the n x n Pascal matrix.\n\nThe Pascal matrix is a matrix containing the binomial coefficients as its elements.\n\n`kind` : see `PascalKind`\n\nBehaviour copied from [scipy](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.pascal.html)\n\nExample:\n```\nMat.pascal(4) # =>\n# LA::GeneralMatrix(Float64) (4x4, Symmetric | Hermitian | PositiveDefinite):\n# [1.0, 1.0, 1.0, 1.0]\n# [1.0, 2.0, 3.0, 4.0]\n# [1.0, 3.0, 6.0, 10.0]\n# [1.0, 4.0, 10.0, 20.0]\nMat.pascal(4, PascalKind::Lower) # =>\n# LA::GeneralMatrix(Float64) (4x4, LowerTriangular):\n# [1.0, 0.0, 0.0, 0.0]\n# [1.0, 1.0, 0.0, 0.0]\n# [1.0, 2.0, 1.0, 0.0]\n# [1.0, 3.0, 3.0, 1.0]\n```","summary":"<p>Returns the n x n Pascal matrix.</p>","abstract":false,"args":[{"name":"n","external_name":"n","restriction":""},{"name":"kind","default_value":"PascalKind::Symmetric","external_name":"kind","restriction":"PascalKind"}],"args_string":"(n, kind : PascalKind = PascalKind::Symmetric)","args_html":"(n, kind : <a href=\"../LA/PascalKind.html\">PascalKind</a> = <span class=\"t\">PascalKind</span><span class=\"t\">::</span><span class=\"t\">Symmetric</span>)","location":{"filename":"src/matrix/special_matrix.cr","line_number":366,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L366"},"def":{"name":"pascal","args":[{"name":"n","external_name":"n","restriction":""},{"name":"kind","default_value":"PascalKind::Symmetric","external_name":"kind","restriction":"PascalKind"}],"visibility":"Public","body":"case kind\nin .upper?\n  (zeros(n, n)).tap do |m|\n    m.each_index do |i, j|\n      if i > j\n        next\n      end\n      if (i == j) || (i == 0)\n        m.unsafe_set(i, j, T.new(1.0))\n      else\n        m.unsafe_set(i, j, (m.unsafe_fetch(i - 1, j - 1)) + (m.unsafe_fetch(i, j - 1)))\n      end\n    end\n    m.assume!(MatrixFlags::UpperTriangular)\n  end\nin .lower?\n  (zeros(n, n)).tap do |m|\n    m.each_index do |i, j|\n      if i < j\n        next\n      end\n      if (i == j) || (j == 0)\n        m.unsafe_set(i, j, T.new(1.0))\n      else\n        m.unsafe_set(i, j, (m.unsafe_fetch(i - 1, j - 1)) + (m.unsafe_fetch(i - 1, j)))\n      end\n    end\n    m.assume!(MatrixFlags::LowerTriangular)\n  end\nin .symmetric?\n  (zeros(n, n)).tap do |m|\n    m.each_index do |i, j|\n      if (i == 0) || (j == 0)\n        m.unsafe_set(i, j, T.new(1.0))\n      else\n        m.unsafe_set(i, j, (m.unsafe_fetch(i - 1, j)) + (m.unsafe_fetch(i, j - 1)))\n      end\n    end\n    m.assume!((MatrixFlags::Symmetric | MatrixFlags::Hermitian) | MatrixFlags::PositiveDefinite)\n  end\nend"}},{"html_id":"rand(nrows,ncolumns,rng=Random::DEFAULT)-class-method","name":"rand","doc":"Generate matrix of given size with elements randomly distributed from range 0.0..1.0","summary":"<p>Generate matrix of given size with elements randomly distributed from range 0.0..1.0</p>","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"rng","default_value":"Random::DEFAULT","external_name":"rng","restriction":""}],"args_string":"(nrows, ncolumns, rng = Random::DEFAULT)","args_html":"(nrows, ncolumns, rng = <span class=\"t\">Random</span><span class=\"t\">::</span><span class=\"t\">DEFAULT</span>)","location":{"filename":"src/matrix/matrix.cr","line_number":434,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L434"},"def":{"name":"rand","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"rng","default_value":"Random::DEFAULT","external_name":"rng","restriction":""}],"visibility":"Public","body":"GeneralMatrix(T).new(nrows, ncolumns) do |i, j|\n  rng.rand\nend"}},{"html_id":"repmat(a:Matrix(T),nrows,ncolumns)-class-method","name":"repmat","doc":"Alias for `#repmat`","summary":"<p>Alias for <code><a href=\"../LA/Matrix.html#repmat%28arows%2Cacolumns%29-instance-method\">#repmat</a></code></p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Matrix(T)"},{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""}],"args_string":"(a : Matrix(T), nrows, ncolumns)","args_html":"(a : <a href=\"../LA/Matrix.html\">Matrix</a>(T), nrows, ncolumns)","location":{"filename":"src/matrix/matrix.cr","line_number":453,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L453"},"def":{"name":"repmat","args":[{"name":"a","external_name":"a","restriction":"Matrix(T)"},{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""}],"visibility":"Public","body":"a.repmat(nrows, ncolumns)"}},{"html_id":"row(values)-class-method","name":"row","doc":"Returns single row matrix with elements taken from array `values`","summary":"<p>Returns single row matrix with elements taken from array <code>values</code></p>","abstract":false,"args":[{"name":"values","external_name":"values","restriction":""}],"args_string":"(values)","args_html":"(values)","location":{"filename":"src/matrix/matrix.cr","line_number":484,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L484"},"def":{"name":"row","args":[{"name":"values","external_name":"values","restriction":""}],"visibility":"Public","body":"GeneralMatrix(T).new(1, values.size, values)"}},{"html_id":"toeplitz(column:Indexable|Matrix,row:Indexable|Matrix|Nil=nil)-class-method","name":"toeplitz","doc":"Create a [Toeplitz matrix](https://en.wikipedia.org/wiki/Toeplitz_matrix)\n\n`column` - first column of matrix\n\n`row` - first row of matrix (if nil, it is assumed that `row = column.map(&.conj)`)\n\nBehaviour copied from [scipy](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.toeplitz.html)\n\nExample:\n```\nMatComplex.toeplitz([1, 2, 3], [1, 4, 5, 6]) # =>\n# LA::GeneralMatrix(Float64) (3x4, None):\n# [1.0, 4.0, 5.0, 6.0]\n# [2.0, 1.0, 4.0, 5.0]\n# [3.0, 2.0, 1.0, 4.0]\nMatComplex.toeplitz([1.0, 2 + 3.i, 4 - 1.i]) # =>\n# LA::GeneralMatrix(Complex) (3x3, Hermitian):\n# [1.0 + 0.0i, 2.0 - 3.0i, 4.0 + 1.0i]\n# [2.0 + 3.0i, 1.0 + 0.0i, 2.0 - 3.0i]\n# [4.0 - 1.0i, 2.0 + 3.0i, 1.0 + 0.0i]\n```","summary":"<p>Create a <a href=\"https://en.wikipedia.org/wiki/Toeplitz_matrix\">Toeplitz matrix</a></p>","abstract":false,"args":[{"name":"column","external_name":"column","restriction":"Indexable | Matrix"},{"name":"row","default_value":"nil","external_name":"row","restriction":"Indexable | Matrix | Nil"}],"args_string":"(column : Indexable | Matrix, row : Indexable | Matrix | Nil = nil)","args_html":"(column : Indexable | <a href=\"../LA/Matrix.html\">Matrix</a>, row : Indexable | <a href=\"../LA/Matrix.html\">Matrix</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/matrix/special_matrix.cr","line_number":82,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L82"},"def":{"name":"toeplitz","args":[{"name":"column","external_name":"column","restriction":"Indexable | Matrix"},{"name":"row","default_value":"nil","external_name":"row","restriction":"Indexable | Matrix | Nil"}],"visibility":"Public","body":"if row.is_a?(Matrix)\n  row = row.to_a\nend\nif column.is_a?(Matrix)\n  column = column.to_a\nend\nif row\n  GeneralMatrix(T).new(column.size, row.size) do |i, j|\n    k = i - j\n    if k >= 0\n      column[k]\n    else\n      row[-k]\n    end\n  end\nelse\n  GeneralMatrix(T).new(column.size, column.size, MatrixFlags::Hermitian) do |i, j|\n    k = i - j\n    if k >= 0\n      column[k]\n    else\n      column[-k].conj\n    end\n  end\nend\n"}},{"html_id":"tri(nrows,ncolumns,k=0)-class-method","name":"tri","doc":"Construct (nrows, ncolumns) matrix filled with ones at and below the kth diagonal.\n\nThe matrix has A[i,j] == 1 for j <= i + k\n\n`k` - Number of subdiagonal below which matrix is filled with ones. k = 0 is the main diagonal, k < 0 subdiagonal and k > 0 superdiagonal.\n\nBehaviour copied from [scipy](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.tri.html)\n\nExample:\n```\nMat.tri(3, 5, 2).to_aa # => [[\n# [1, 1, 1, 0, 0],\n# [1, 1, 1, 1, 0],\n# [1, 1, 1, 1, 1]]\nMat.tri(3, 5, -1).to_aa # => [[\n# [0, 0, 0, 0, 0],\n# [1, 0, 0, 0, 0],\n# [1, 1, 0, 0, 0]]\n```","summary":"<p>Construct (nrows, ncolumns) matrix filled with ones at and below the kth diagonal.</p>","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"k","default_value":"0","external_name":"k","restriction":""}],"args_string":"(nrows, ncolumns, k = 0)","args_html":"(nrows, ncolumns, k = <span class=\"n\">0</span>)","location":{"filename":"src/matrix/special_matrix.cr","line_number":26,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L26"},"def":{"name":"tri","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"k","default_value":"0","external_name":"k","restriction":""}],"visibility":"Public","body":"flags = k <= 0 ? MatrixFlags::LowerTriangular : MatrixFlags::None\nGeneralMatrix(T).new(nrows, ncolumns, flags) do |i, j|\n  i >= (j - k) ? 1 : 0\nend\n"}},{"html_id":"zeros(nrows,ncolumns)-class-method","name":"zeros","doc":"Generate matrix of given size with all elements equal to zero","summary":"<p>Generate matrix of given size with all elements equal to zero</p>","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""}],"args_string":"(nrows, ncolumns)","args_html":"(nrows, ncolumns)","location":{"filename":"src/matrix/matrix.cr","line_number":439,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L439"},"def":{"name":"zeros","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""}],"visibility":"Public","body":"GeneralMatrix(T).new(nrows, ncolumns, MatrixFlags.for_diag(nrows == ncolumns))"}}],"instance_methods":[{"html_id":"*(k:Number)-instance-method","name":"*","doc":"Multiplies matrix to scalar","summary":"<p>Multiplies matrix to scalar</p>","abstract":false,"args":[{"name":"k","external_name":"k","restriction":"Number"}],"args_string":"(k : Number)","args_html":"(k : <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/matrix/matrix.cr","line_number":112,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L112"},"def":{"name":"*","args":[{"name":"k","external_name":"k","restriction":"Number"}],"visibility":"Public","body":"new_flags = self.flags.scale(false)\nmap do |v|\n  v * k\nend.tap do |result|\n  result.flags = new_flags\nend\n"}},{"html_id":"*(k:Complex)-instance-method","name":"*","doc":"Multiplies matrix to scalar","summary":"<p>Multiplies matrix to scalar</p>","abstract":false,"args":[{"name":"k","external_name":"k","restriction":"Complex"}],"args_string":"(k : Complex)","args_html":"(k : <a href=\"../Complex.html\">Complex</a>)","location":{"filename":"src/matrix/matrix.cr","line_number":118,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L118"},"def":{"name":"*","args":[{"name":"k","external_name":"k","restriction":"Complex"}],"visibility":"Public","body":"new_flags = self.flags.scale(k.imag != 0)\nmap_complex(&.*(k)).tap do |r|\n  r.flags = new_flags\nend\n"}},{"html_id":"*(m:Matrix(T))-instance-method","name":"*","doc":"Matrix product to given m\n\nThis method automatically calls optimal function depending on `MatrixFlags`.\n\nIf one of the matrix is square and triangular - trmm is called\n\nIf one of the matrix is symmetric\\hermitian - symm/hemm is called\n\nOtherwise - gemm is called","summary":"<p>Matrix product to given m</p>","abstract":false,"args":[{"name":"m","external_name":"m","restriction":"Matrix(T)"}],"args_string":"(m : Matrix(T))","args_html":"(m : <a href=\"../LA/Matrix.html\">Matrix</a>(T))","location":{"filename":"src/linalg/mult.cr","line_number":105,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/mult.cr#L105"},"def":{"name":"*","args":[{"name":"m","external_name":"m","restriction":"Matrix(T)"}],"visibility":"Public","body":"if ncolumns != m.nrows\n  raise(ArgumentError.new(\"matrix size should match ([#{nrows}x#{ncolumns}] * [#{m.nrows}x#{m.ncolumns}]\"))\nend\nif (square? && flags.triangular?) || (m.square? && m.flags.triangular?)\n  if m.square? && m.flags.triangular?\n    result = self.clone\n    result.tr_mult!(m, left: false)\n    result\n  else\n    result = m.clone\n    result.tr_mult!(self, left: true)\n    result\n  end\nelse\n  result = Matrix(T).zeros(nrows, m.ncolumns)\n  result.add_mult(self, m)\n  result.tap do |r|\n    r.flags = self.flags.mult(m.flags)\n  end\nend\n"}},{"html_id":"**(other:Int)-instance-method","name":"**","doc":"Taken from https://github.com/Exilor/matrix/","summary":"<p>Taken from https://github.com/Exilor/matrix/</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Int"}],"args_string":"(other : Int)","args_html":"(other : Int)","location":{"filename":"src/linalg/power.cr","line_number":5,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/power.cr#L5"},"def":{"name":"**","args":[{"name":"other","external_name":"other","restriction":"Int"}],"visibility":"Public","body":"if square?\nelse\n  raise(ArgumentError.new(\"matrix must be square\"))\nend\nm = self\nif other == 0\n  self.class.identity(nrows)\nelse\n  if other < 0\n    (repeated_square_power(other.abs)).inv!\n  else\n    if other == 1\n      clone\n    else\n      repeated_square_power(other)\n    end\n  end\nend\n"}},{"html_id":"+(k:Number)-instance-method","name":"+","doc":"Adds scalar value to every element","summary":"<p>Adds scalar value to every element</p>","abstract":false,"args":[{"name":"k","external_name":"k","restriction":"Number"}],"args_string":"(k : Number)","args_html":"(k : <a href=\"../Number.html\">Number</a>)","location":{"filename":"src/matrix/matrix.cr","line_number":129,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L129"},"def":{"name":"+","args":[{"name":"k","external_name":"k","restriction":"Number"}],"visibility":"Public","body":"if k.zero?\n  return clone\nend\nmap do |v|\n  v + k\nend.tap do |result|\n  result.flags = MatrixFlags::None\nend\n"}},{"html_id":"+(k:Complex)-instance-method","name":"+","doc":"Adds scalar value to every element","summary":"<p>Adds scalar value to every element</p>","abstract":false,"args":[{"name":"k","external_name":"k","restriction":"Complex"}],"args_string":"(k : Complex)","args_html":"(k : <a href=\"../Complex.html\">Complex</a>)","location":{"filename":"src/matrix/matrix.cr","line_number":135,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L135"},"def":{"name":"+","args":[{"name":"k","external_name":"k","restriction":"Complex"}],"visibility":"Public","body":"if k.zero?\n  return clone\nend\nmap_complex do |v|\n  v + k\nend.tap do |result|\n  result.flags = MatrixFlags::None\nend\n"}},{"html_id":"+(m:Matrix(T))-instance-method","name":"+","doc":"Returns element-wise sum\n\nThis method raises if another matrix doesn't have same size","summary":"<p>Returns element-wise sum</p>","abstract":false,"args":[{"name":"m","external_name":"m","restriction":"Matrix(T)"}],"args_string":"(m : Matrix(T))","args_html":"(m : <a href=\"../LA/Matrix.html\">Matrix</a>(T))","location":{"filename":"src/matrix/matrix.cr","line_number":159,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L159"},"def":{"name":"+","args":[{"name":"m","external_name":"m","restriction":"Matrix(T)"}],"visibility":"Public","body":"assert_same_size(m)\nresult = GeneralMatrix(T).new(nrows, ncolumns, flags.sum(m.flags)) do |i, j|\n  (self.unsafe_fetch(i, j)) + (m.unsafe_fetch(i, j))\nend\n"}},{"html_id":"-(k:Number|Complex)-instance-method","name":"-","doc":"Substracts scalar value from every element","summary":"<p>Substracts scalar value from every element</p>","abstract":false,"args":[{"name":"k","external_name":"k","restriction":"Number | Complex"}],"args_string":"(k : Number | Complex)","args_html":"(k : <a href=\"../Number.html\">Number</a> | <a href=\"../Complex.html\">Complex</a>)","location":{"filename":"src/matrix/matrix.cr","line_number":141,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L141"},"def":{"name":"-","args":[{"name":"k","external_name":"k","restriction":"Number | Complex"}],"visibility":"Public","body":"self + (-k)"}},{"html_id":"-(m:Matrix(T))-instance-method","name":"-","doc":"Returns element-wise substract\n\nThis method raises if another matrix doesn't have same size","summary":"<p>Returns element-wise substract</p>","abstract":false,"args":[{"name":"m","external_name":"m","restriction":"Matrix(T)"}],"args_string":"(m : Matrix(T))","args_html":"(m : <a href=\"../LA/Matrix.html\">Matrix</a>(T))","location":{"filename":"src/matrix/matrix.cr","line_number":169,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L169"},"def":{"name":"-","args":[{"name":"m","external_name":"m","restriction":"Matrix(T)"}],"visibility":"Public","body":"assert_same_size(m)\nresult = GeneralMatrix(T).new(nrows, ncolumns, flags.sum(m.flags)) do |i, j|\n  (self.unsafe_fetch(i, j)) - (m.unsafe_fetch(i, j))\nend\n"}},{"html_id":"--instance-method","name":"-","doc":"Multiplies matrix to -1","summary":"<p>Multiplies matrix to -1</p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":124,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L124"},"def":{"name":"-","visibility":"Public","body":"result = self * (-1)"}},{"html_id":"/(k:Number|Complex)-instance-method","name":"/","doc":"Divides matrix to scalar","summary":"<p>Divides matrix to scalar</p>","abstract":false,"args":[{"name":"k","external_name":"k","restriction":"Number | Complex"}],"args_string":"(k : Number | Complex)","args_html":"(k : <a href=\"../Number.html\">Number</a> | <a href=\"../Complex.html\">Complex</a>)","location":{"filename":"src/matrix/matrix.cr","line_number":146,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L146"},"def":{"name":"/","args":[{"name":"k","external_name":"k","restriction":"Number | Complex"}],"visibility":"Public","body":"self * ((T.new(1.0)) / k)"}},{"html_id":"==(other)-instance-method","name":"==","doc":"Compare with another matrix\n\nReturns True only if all element are exactly equal.\nUse `#almost_eq` If you need approximate equality","summary":"<p>Compare with another matrix</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/matrix/matrix.cr","line_number":285,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L285"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"if (nrows == other.nrows) && (ncolumns == other.ncolumns)\nelse\n  return false\nend\neach_with_index(all: true) do |value, row, column|\n  if (other.unsafe_fetch(row, column)) != value\n    return false\n  end\nend\ntrue\n"}},{"html_id":"[](i:Int32,j:Int32)-instance-method","name":"[]","doc":"Return element of matrix on row i and column j\n\nIf i or j negative they are counted from end of matrix\nIf i>=nrows or j>=ncolumns exception is raised\nUse `#unsafe_fetch` if you need to skip these checks","summary":"<p>Return element of matrix on row i and column j</p>","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"},{"name":"j","external_name":"j","restriction":"Int32"}],"args_string":"(i : Int32, j : Int32)","args_html":"(i : Int32, j : Int32)","location":{"filename":"src/matrix/matrix.cr","line_number":310,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L310"},"def":{"name":"[]","args":[{"name":"i","external_name":"i","restriction":"Int32"},{"name":"j","external_name":"j","restriction":"Int32"}],"visibility":"Public","body":"if i < 0\n  i = i + nrows\nend\nif j < 0\n  j = j + ncolumns\nend\nif ((j >= 0 && j < ncolumns) && i >= 0) && i < nrows\n  unsafe_fetch(i, j)\nelse\n  raise(IndexError.new(\"access to [#{i}, #{j}] in matrix with size #{nrows}x#{ncolumns}\"))\nend\n"}},{"html_id":"[](arows:Range(Int32|Nil,Int32|Nil),acolumns:Range(Int32|Nil,Int32|Nil))-instance-method","name":"[]","doc":"Return submatrix over given ranges.\n\nSee `SubMatrix(T)` for details on submatrices\nExample:\n```\nm = GMat32.new([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\nm1 = m[1..3, 2..3] # => [[7.0, 8.0], [11.0, 12.0], [15.0, 16.0]]\nm2 = m[..3, 2]     # => [[3.0], [7.0], [11.0], [15.0]]\n```","summary":"<p>Return submatrix over given ranges.</p>","abstract":false,"args":[{"name":"arows","external_name":"arows","restriction":"Range(Int32 | Nil, Int32 | Nil)"},{"name":"acolumns","external_name":"acolumns","restriction":"Range(Int32 | Nil, Int32 | Nil)"}],"args_string":"(arows : Range(Int32 | Nil, Int32 | Nil), acolumns : Range(Int32 | Nil, Int32 | Nil))","args_html":"(arows : Range(Int32 | Nil, Int32 | Nil), acolumns : Range(Int32 | Nil, Int32 | Nil))","location":{"filename":"src/matrix/matrix.cr","line_number":345,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L345"},"def":{"name":"[]","args":[{"name":"arows","external_name":"arows","restriction":"Range(Int32 | Nil, Int32 | Nil)"},{"name":"acolumns","external_name":"acolumns","restriction":"Range(Int32 | Nil, Int32 | Nil)"}],"visibility":"Public","body":"arows_begin = arows.begin || 0\nacolumns_begin = acolumns.begin || 0\narows_end = arows.end || nrows\nif arows.end\n  arows_end = arows_end + (arows.excludes_end? ? 0 : 1)\nend\nacolumns_end = acolumns.end || ncolumns\nif acolumns.end\n  acolumns_end = acolumns_end + (acolumns.excludes_end? ? 0 : 1)\nend\narows = arows_begin...arows_end\nacolumns = acolumns_begin...acolumns_end\nstart_row = arows.begin + (arows.begin < 0 ? nrows : 0)\nstart_col = acolumns.begin + (acolumns.begin < 0 ? ncolumns : 0)\ntotal_rows = (arows.end - start_row) + (arows.end < 0 ? nrows : 0)\ntotal_cols = (acolumns.end - start_col) + (acolumns.end < 0 ? ncolumns : 0)\nSubMatrix(T).new(self, {start_row, start_col}, {total_rows, total_cols})\n"}},{"html_id":"[](row:Int32,acolumns:Range(Int32|Nil,Int32|Nil))-instance-method","name":"[]","doc":"Return submatrix over given ranges.\n\nSee `SubMatrix(T)` for details on submatrices\nExample:\n```\nm = GMat32.new([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\nm1 = m[1..3, 2..3] # => [[7.0, 8.0], [11.0, 12.0], [15.0, 16.0]]\nm2 = m[..3, 2]     # => [[3.0], [7.0], [11.0], [15.0]]\n```","summary":"<p>Return submatrix over given ranges.</p>","abstract":false,"args":[{"name":"row","external_name":"row","restriction":"Int32"},{"name":"acolumns","external_name":"acolumns","restriction":"Range(Int32 | Nil, Int32 | Nil)"}],"args_string":"(row : Int32, acolumns : Range(Int32 | Nil, Int32 | Nil))","args_html":"(row : Int32, acolumns : Range(Int32 | Nil, Int32 | Nil))","location":{"filename":"src/matrix/matrix.cr","line_number":371,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L371"},"def":{"name":"[]","args":[{"name":"row","external_name":"row","restriction":"Int32"},{"name":"acolumns","external_name":"acolumns","restriction":"Range(Int32 | Nil, Int32 | Nil)"}],"visibility":"Public","body":"self[row..row, acolumns]"}},{"html_id":"[](arows:Range(Int32|Nil,Int32|Nil),column:Int32)-instance-method","name":"[]","doc":"Return submatrix over given ranges.\n\nSee `SubMatrix(T)` for details on submatrices\nExample:\n```\nm = GMat32.new([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\nm1 = m[1..3, 2..3] # => [[7.0, 8.0], [11.0, 12.0], [15.0, 16.0]]\nm2 = m[..3, 2]     # => [[3.0], [7.0], [11.0], [15.0]]\n```","summary":"<p>Return submatrix over given ranges.</p>","abstract":false,"args":[{"name":"arows","external_name":"arows","restriction":"Range(Int32 | Nil, Int32 | Nil)"},{"name":"column","external_name":"column","restriction":"Int32"}],"args_string":"(arows : Range(Int32 | Nil, Int32 | Nil), column : Int32)","args_html":"(arows : Range(Int32 | Nil, Int32 | Nil), column : Int32)","location":{"filename":"src/matrix/matrix.cr","line_number":376,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L376"},"def":{"name":"[]","args":[{"name":"arows","external_name":"arows","restriction":"Range(Int32 | Nil, Int32 | Nil)"},{"name":"column","external_name":"column","restriction":"Int32"}],"visibility":"Public","body":"self[arows, column..column]"}},{"html_id":"[]=(i:Int32,j:Int32,value)-instance-method","name":"[]=","doc":"Assign element of matrix on row i and column j\n\nIf i or j negative they are counted from end of matrix\nIf i>=nrows or j>=ncolumns exception is raised\nUse `#unsafe_set` if you need to skip these checks\nNote this method reset all matrix flags","summary":"<p>Assign element of matrix on row i and column j</p>","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"},{"name":"j","external_name":"j","restriction":"Int32"},{"name":"value","external_name":"value","restriction":""}],"args_string":"(i : Int32, j : Int32, value)","args_html":"(i : Int32, j : Int32, value)","location":{"filename":"src/matrix/matrix.cr","line_number":326,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L326"},"def":{"name":"[]=","args":[{"name":"i","external_name":"i","restriction":"Int32"},{"name":"j","external_name":"j","restriction":"Int32"},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"if i < 0\n  i = i + nrows\nend\nif j < 0\n  j = j + ncolumns\nend\nif ((j >= 0 && j < ncolumns) && i >= 0) && i < nrows\n  unsafe_set(i, j, value)\nelse\n  raise(IndexError.new(\"access to [#{i}, #{j}] in matrix with size #{nrows}x#{ncolumns}\"))\nend\n"}},{"html_id":"[]=(arows:Range(Int32,Int32),acolumns:Range(Int32,Int32),value)-instance-method","name":"[]=","doc":"Assign value to a given submatrix\n\nvalue can be a scalar or a matrix of same size as affected submatrix","summary":"<p>Assign value to a given submatrix</p>","abstract":false,"args":[{"name":"arows","external_name":"arows","restriction":"Range(Int32, Int32)"},{"name":"acolumns","external_name":"acolumns","restriction":"Range(Int32, Int32)"},{"name":"value","external_name":"value","restriction":""}],"args_string":"(arows : Range(Int32, Int32), acolumns : Range(Int32, Int32), value)","args_html":"(arows : Range(Int32, Int32), acolumns : Range(Int32, Int32), value)","location":{"filename":"src/matrix/matrix.cr","line_number":383,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L383"},"def":{"name":"[]=","args":[{"name":"arows","external_name":"arows","restriction":"Range(Int32, Int32)"},{"name":"acolumns","external_name":"acolumns","restriction":"Range(Int32, Int32)"},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"submatrix = self[arows, acolumns]\nif value.is_a?(Matrix)\n  if submatrix.size == value.size\n  else\n    raise(IndexError.new(\"submatrix size must match assigned value\"))\n  end\n  submatrix.each_index do |i, j|\n    submatrix.unsafe_set(i, j, value.unsafe_fetch(i, j))\n  end\nelse\n  submatrix.each_index do |i, j|\n    submatrix.unsafe_set(i, j, value)\n  end\nend\n"}},{"html_id":"[]=(row:Int32,acolumns:Range(Int32,Int32),value)-instance-method","name":"[]=","doc":"Assign value to a given submatrix\n\nvalue can be a scalar or a matrix of same size as affected submatrix","summary":"<p>Assign value to a given submatrix</p>","abstract":false,"args":[{"name":"row","external_name":"row","restriction":"Int32"},{"name":"acolumns","external_name":"acolumns","restriction":"Range(Int32, Int32)"},{"name":"value","external_name":"value","restriction":""}],"args_string":"(row : Int32, acolumns : Range(Int32, Int32), value)","args_html":"(row : Int32, acolumns : Range(Int32, Int32), value)","location":{"filename":"src/matrix/matrix.cr","line_number":394,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L394"},"def":{"name":"[]=","args":[{"name":"row","external_name":"row","restriction":"Int32"},{"name":"acolumns","external_name":"acolumns","restriction":"Range(Int32, Int32)"},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"self[row..row, acolumns] = value"}},{"html_id":"[]=(nrows:Range(Int32,Int32),column:Int32,value)-instance-method","name":"[]=","doc":"Assign value to a given submatrix\n\nvalue can be a scalar or a matrix of same size as affected submatrix","summary":"<p>Assign value to a given submatrix</p>","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":"Range(Int32, Int32)"},{"name":"column","external_name":"column","restriction":"Int32"},{"name":"value","external_name":"value","restriction":""}],"args_string":"(nrows : Range(Int32, Int32), column : Int32, value)","args_html":"(nrows : Range(Int32, Int32), column : Int32, value)","location":{"filename":"src/matrix/matrix.cr","line_number":399,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L399"},"def":{"name":"[]=","args":[{"name":"nrows","external_name":"nrows","restriction":"Range(Int32, Int32)"},{"name":"column","external_name":"column","restriction":"Int32"},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"self[nrows, column..column] = value"}},{"html_id":"abs(kind:MatrixNorm=MatrixNorm::Frobenius)-instance-method","name":"abs","abstract":false,"args":[{"name":"kind","default_value":"MatrixNorm::Frobenius","external_name":"kind","restriction":"MatrixNorm"}],"args_string":"(kind : MatrixNorm = MatrixNorm::Frobenius)","args_html":"(kind : <a href=\"../LA/MatrixNorm.html\">MatrixNorm</a> = <span class=\"t\">MatrixNorm</span><span class=\"t\">::</span><span class=\"t\">Frobenius</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":362,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L362"},"def":{"name":"abs","args":[{"name":"kind","default_value":"MatrixNorm::Frobenius","external_name":"kind","restriction":"MatrixNorm"}],"visibility":"Public","body":"norm(kind)"}},{"html_id":"add!(k:Number,m:Matrix)-instance-method","name":"add!","doc":"Perform inplace addition with matrix `m` multiplied to scalar `k`\n\n`a.add!(k, b)` is equal to `a = a + k * b`, but faster as no new matrix is allocated","summary":"<p>Perform inplace addition with matrix <code>m</code> multiplied to scalar <code>k</code></p>","abstract":false,"args":[{"name":"k","external_name":"k","restriction":"Number"},{"name":"m","external_name":"m","restriction":"Matrix"}],"args_string":"(k : Number, m : Matrix)","args_html":"(k : <a href=\"../Number.html\">Number</a>, m : <a href=\"../LA/Matrix.html\">Matrix</a>)","location":{"filename":"src/matrix/matrix.cr","line_number":634,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L634"},"def":{"name":"add!","args":[{"name":"k","external_name":"k","restriction":"Number"},{"name":"m","external_name":"m","restriction":"Matrix"}],"visibility":"Public","body":"assert_same_size(m)\noldflags = flags\nmap_with_index! do |v, i, j|\n  v + (k * (m.unsafe_fetch(i, j)))\nend\nself.flags = oldflags.sum(m.flags.scale(k.is_a?(Complex) && (k.imag != 0)))\nself\n"}},{"html_id":"add!(m)-instance-method","name":"add!","doc":"Performs inplace addition with matrix `m`\n\n`a.add!(b)` is equal to `a = a + b`, but faster as no new matrix is allocated","summary":"<p>Performs inplace addition with matrix <code>m</code></p>","abstract":false,"args":[{"name":"m","external_name":"m","restriction":""}],"args_string":"(m)","args_html":"(m)","location":{"filename":"src/matrix/matrix.cr","line_number":645,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L645"},"def":{"name":"add!","args":[{"name":"m","external_name":"m","restriction":""}],"visibility":"Public","body":"add!(1, m)"}},{"html_id":"add_mult(a,b:Matrix(T),*,alpha=1.0,beta=1.0)-instance-method","name":"add_mult","doc":"performs c = alpha*a*b + beta*c (BLAS routines gemm/symm/hemm)","summary":"<p>performs c = alpha<em>a</em>b + beta*c (BLAS routines gemm/symm/hemm)</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":"Matrix(T)"},{"name":"","external_name":"","restriction":""},{"name":"alpha","default_value":"1.0","external_name":"alpha","restriction":""},{"name":"beta","default_value":"1.0","external_name":"beta","restriction":""}],"args_string":"(a, b : Matrix(T), *, alpha = 1.0, beta = 1.0)","args_html":"(a, b : <a href=\"../LA/Matrix.html\">Matrix</a>(T), *, alpha = <span class=\"n\">1.0</span>, beta = <span class=\"n\">1.0</span>)","location":{"filename":"src/linalg/mult.cr","line_number":28,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/mult.cr#L28"},"def":{"name":"add_mult","args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":"Matrix(T)"},{"name":"","external_name":"","restriction":""},{"name":"alpha","default_value":"1.0","external_name":"alpha","restriction":""},{"name":"beta","default_value":"1.0","external_name":"beta","restriction":""}],"splat_index":2,"visibility":"Public","body":"if ((a.ncolumns != b.nrows) || (a.nrows != nrows)) || (b.ncolumns != ncolumns)\n  raise(ArgumentError.new(\"matrix size mismatch\"))\nend\naa = a.is_a?(GeneralMatrix(T)) ? a : a.to_general\nbb = b.is_a?(GeneralMatrix(T)) ? b : b.to_general\nno = LibCBLAS::CblasTranspose::CblasNoTrans\ncalpha = T.new(alpha)\ncbeta = T.new(beta)\nif ({{ T == Complex }}) && (a.flags.hermitian? || b.flags.hermitian?)\n  {% if T == Complex %}\n          side = a.flags.hermitian? ? LibCBLAS::CblasSide::CblasLeft : LibCBLAS::CblasSide::CblasRight\n          if side == LibCBLAS::CblasSide::CblasRight\n            aa, bb = bb, aa\n          end\n          up = LibCBLAS::CblasUplo::CblasUpper\n          blas(he, mm, side, up, a.ncolumns, b.nrows,\n            blas_const(calpha),\n            aa, a.nrows,\n            bb, b.nrows,\n            blas_const(cbeta),\n            self, self.nrows)\n        {% else %}\n          raise \"\" # to prevent type inference of nil\n        {% end %}\nelse\n  if a.flags.symmetric? || b.flags.symmetric?\n    side = a.flags.symmetric? ? LibCBLAS::CblasSide::CblasLeft : LibCBLAS::CblasSide::CblasRight\n    if side == LibCBLAS::CblasSide::CblasRight\n      aa, bb = bb, aa\n    end\n    up = LibCBLAS::CblasUplo::CblasUpper\n    blas(sy, mm, side, up, a.ncolumns, b.nrows, blas_const(calpha), aa, a.nrows, bb, b.nrows, blas_const(cbeta), self, self.nrows)\n  else\n    blas(ge, mm, no, no, a.nrows, b.ncolumns, a.ncolumns, blas_const(calpha), aa, a.nrows, bb, b.nrows, blas_const(cbeta), self, self.nrows)\n  end\nend\n"}},{"html_id":"almost_eq(other:Matrix(T),eps)-instance-method","name":"almost_eq","doc":"Approximately compare with `other` matrix\n\nReturns true if all elements are within `eps` from corresponding elements of `other` matrix","summary":"<p>Approximately compare with <code>other</code> matrix</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Matrix(T)"},{"name":"eps","external_name":"eps","restriction":""}],"args_string":"(other : Matrix(T), eps)","args_html":"(other : <a href=\"../LA/Matrix.html\">Matrix</a>(T), eps)","location":{"filename":"src/matrix/matrix.cr","line_number":420,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L420"},"def":{"name":"almost_eq","args":[{"name":"other","external_name":"other","restriction":"Matrix(T)"},{"name":"eps","external_name":"eps","restriction":""}],"visibility":"Public","body":"each_with_index(all: true) do |value, row, column|\n  if (value - (other.unsafe_fetch(row, column))).abs > eps\n    return false\n  end\nend\ntrue\n"}},{"html_id":"almost_eq(other:Matrix(T))-instance-method","name":"almost_eq","doc":"Approximately compare with `other` matrix\n\nReturns true if all elements are within `eps` from corresponding elements of `other` matrix\n\nUses `#tolerance` as an `eps` by default","summary":"<p>Approximately compare with <code>other</code> matrix</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Matrix(T)"}],"args_string":"(other : Matrix(T))","args_html":"(other : <a href=\"../LA/Matrix.html\">Matrix</a>(T))","location":{"filename":"src/matrix/matrix.cr","line_number":429,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L429"},"def":{"name":"almost_eq","args":[{"name":"other","external_name":"other","restriction":"Matrix(T)"}],"visibility":"Public","body":"almost_eq(other, {self.tolerance, other.tolerance}.min)"}},{"html_id":"assume!(flag:MatrixFlags,value:Bool=true)-instance-method","name":"assume!","doc":"Directly set or reset matrix `flag` without check\nSee `MatrixFlags` for description of flags","summary":"<p>Directly set or reset matrix <code>flag</code> without check See <code><a href=\"../LA/MatrixFlags.html\">MatrixFlags</a></code> for description of flags</p>","abstract":false,"args":[{"name":"flag","external_name":"flag","restriction":"MatrixFlags"},{"name":"value","default_value":"true","external_name":"value","restriction":"Bool"}],"args_string":"(flag : MatrixFlags, value : Bool = true)","args_html":"(flag : <a href=\"../LA/MatrixFlags.html\">MatrixFlags</a>, value : Bool = <span class=\"n\">true</span>)","location":{"filename":"src/matrix/flag_checks.cr","line_number":5,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flag_checks.cr#L5"},"def":{"name":"assume!","args":[{"name":"flag","external_name":"flag","restriction":"MatrixFlags"},{"name":"value","default_value":"true","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"if value\n  self.flags = self.flags | flag\nelse\n  self.flags = self.flags & (~flag)\nend"}},{"html_id":"balance(*,permute=true,scale=true,separate=false)-instance-method","name":"balance","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"permute","default_value":"true","external_name":"permute","restriction":""},{"name":"scale","default_value":"true","external_name":"scale","restriction":""},{"name":"separate","default_value":"false","external_name":"separate","restriction":""}],"args_string":"(*, permute = true, scale = true, separate = false)","args_html":"(*, permute = <span class=\"n\">true</span>, scale = <span class=\"n\">true</span>, separate = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":279,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L279"},"def":{"name":"balance","args":[{"name":"","external_name":"","restriction":""},{"name":"permute","default_value":"true","external_name":"permute","restriction":""},{"name":"scale","default_value":"true","external_name":"scale","restriction":""},{"name":"separate","default_value":"false","external_name":"separate","restriction":""}],"splat_index":0,"visibility":"Public","body":"a = clone\ns = a.balance!(permute: permute, scale: scale, separate: separate)\n{a, s}\n"}},{"html_id":"balance!(*,permute=true,scale=true,separate=false)-instance-method","name":"balance!","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"permute","default_value":"true","external_name":"permute","restriction":""},{"name":"scale","default_value":"true","external_name":"scale","restriction":""},{"name":"separate","default_value":"false","external_name":"separate","restriction":""}],"args_string":"(*, permute = true, scale = true, separate = false)","args_html":"(*, permute = <span class=\"n\">true</span>, scale = <span class=\"n\">true</span>, separate = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":259,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L259"},"def":{"name":"balance!","args":[{"name":"","external_name":"","restriction":""},{"name":"permute","default_value":"true","external_name":"permute","restriction":""},{"name":"scale","default_value":"true","external_name":"scale","restriction":""},{"name":"separate","default_value":"false","external_name":"separate","restriction":""}],"splat_index":0,"visibility":"Public","body":"if square?\nelse\n  raise(ArgumentError.new(\"matrix must be square\"))\nend\nn = self.nrows\njob = if permute && scale\n  'B'\nelse\n  if permute\n    'P'\n  else\n    if scale\n      'S'\n    else\n      return separate ? Matrix(T).ones(1, n) : Matrix(T).identity(n)\n    end\n  end\nend\ns = GeneralMatrix(T).new(1, n)\nilo = 0\nihi = 0\nlapack(gebal, job.ord.to_u8, n, self, n, ilo, ihi, s)\nseparate ? s : Matrix(T).diag(s.raw)\n"}},{"html_id":"cat(other:Matrix(T),axis:Axis)-instance-method","name":"cat","doc":"Returns concatenation with another matrix by `Axis::Rows` (horizontal) or `Axis::Columns` (vertical)","summary":"<p>Returns concatenation with another matrix by <code><a href=\"../LA/Axis.html#Rows\">Axis::Rows</a></code> (horizontal) or <code><a href=\"../LA/Axis.html#Columns\">Axis::Columns</a></code> (vertical)</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Matrix(T)"},{"name":"axis","external_name":"axis","restriction":"Axis"}],"args_string":"(other : Matrix(T), axis : Axis)","args_html":"(other : <a href=\"../LA/Matrix.html\">Matrix</a>(T), axis : <a href=\"../LA/Axis.html\">Axis</a>)","location":{"filename":"src/matrix/matrix.cr","line_number":545,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L545"},"def":{"name":"cat","args":[{"name":"other","external_name":"other","restriction":"Matrix(T)"},{"name":"axis","external_name":"axis","restriction":"Axis"}],"visibility":"Public","body":"if self.size[1 - axis.to_i] != other.size[1 - axis.to_i]\n  raise(ArgumentError.new(\"matrix size along other axis should match for concatenation\"))\nend\ncase axis\nin Axis::Columns\n  GeneralMatrix(T).new(nrows + other.nrows, ncolumns) do |row, column|\n    row < nrows ? unsafe_fetch(row, column) : other.unsafe_fetch(row - nrows, column)\n  end\nin Axis::Rows\n  GeneralMatrix(T).new(nrows, ncolumns + other.ncolumns) do |row, column|\n    column < ncolumns ? unsafe_fetch(row, column) : other.unsafe_fetch(row, column - ncolumns)\n  end\nend\n"}},{"html_id":"cho_solve(b:self,*,overwrite_b=false)-instance-method","name":"cho_solve","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"self"},{"name":"","external_name":"","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"args_string":"(b : self, *, overwrite_b = false)","args_html":"(b : <span class=\"k\">self</span>, *, overwrite_b = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/cholesky.cr","line_number":39,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/cholesky.cr#L39"},"def":{"name":"cho_solve","args":[{"name":"b","external_name":"b","restriction":"self"},{"name":"","external_name":"","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"splat_index":1,"visibility":"Public","body":"if nrows == b.nrows\nelse\n  raise(ArgumentError.new(\"nrows of a and b must match\"))\nend\nif square?\nelse\n  raise(ArgumentError.new(\"a must be square\"))\nend\nif flags.triangular?\nelse\n  raise(ArgumentError.new(\"a must be triangular\"))\nend\nx = overwrite_b ? b : b.clone\nn = nrows\nlapack(potrs, uplo, n, b.nrows, self, n, x, b.nrows)\nb.clear_flags\nx\n"}},{"html_id":"cholesky(*,lower=false,dont_clean=false)-instance-method","name":"cholesky","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"lower","default_value":"false","external_name":"lower","restriction":""},{"name":"dont_clean","default_value":"false","external_name":"dont_clean","restriction":""}],"args_string":"(*, lower = false, dont_clean = false)","args_html":"(*, lower = <span class=\"n\">false</span>, dont_clean = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/cholesky.cr","line_number":32,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/cholesky.cr#L32"},"def":{"name":"cholesky","args":[{"name":"","external_name":"","restriction":""},{"name":"lower","default_value":"false","external_name":"lower","restriction":""},{"name":"dont_clean","default_value":"false","external_name":"dont_clean","restriction":""}],"splat_index":0,"visibility":"Public","body":"clone.cholesky!(lower: lower, dont_clean: dont_clean).tap do |m|\n  self.assume!(MatrixFlags::PositiveDefinite)\nend"}},{"html_id":"cholesky!(*,lower=false,dont_clean=false)-instance-method","name":"cholesky!","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"lower","default_value":"false","external_name":"lower","restriction":""},{"name":"dont_clean","default_value":"false","external_name":"dont_clean","restriction":""}],"args_string":"(*, lower = false, dont_clean = false)","args_html":"(*, lower = <span class=\"n\">false</span>, dont_clean = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/cholesky.cr","line_number":12,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/cholesky.cr#L12"},"def":{"name":"cholesky!","args":[{"name":"","external_name":"","restriction":""},{"name":"lower","default_value":"false","external_name":"lower","restriction":""},{"name":"dont_clean","default_value":"false","external_name":"dont_clean","restriction":""}],"splat_index":0,"visibility":"Public","body":"if square?\nelse\n  raise(ArgumentError.new(\"Matrix must be square for cholesky decomposition\"))\nend\nchar = lower ? 'L' : 'U'\nlapack(potrf, char.ord.to_u8, nrows, self, nrows)\nif lower\n  if dont_clean\n    self.flags = MatrixFlags::LowerTriangular\n  else\n    tril!\n  end\nelse\n  if dont_clean\n    self.flags = MatrixFlags::UpperTriangular\n  else\n    triu!\n  end\nend\nself\n"}},{"html_id":"chop(eps=self.tolerance)-instance-method","name":"chop","doc":"Converts complex matrix to real one if all imaginary parts are less then `eps`, returns `nil` otherwise\n\nReturns just matrix if it is already real","summary":"<p>Converts complex matrix to real one if all imaginary parts are less then <code>eps</code>, returns <code>nil</code> otherwise</p>","abstract":false,"args":[{"name":"eps","default_value":"self.tolerance","external_name":"eps","restriction":""}],"args_string":"(eps = self.tolerance)","args_html":"(eps = <span class=\"k\">self</span>.tolerance)","location":{"filename":"src/matrix/matrix.cr","line_number":698,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L698"},"def":{"name":"chop","args":[{"name":"eps","default_value":"self.tolerance","external_name":"eps","restriction":""}],"visibility":"Public","body":"{% if T == Complex %}\n        if all? { |v| v.imag.abs < eps }\n          self.to_real\n        else\n          nil\n        end\n      {% else %}\n        self\n      {% end %}"}},{"html_id":"clear_flags-instance-method","name":"clear_flags","doc":"Reset matrix flags to None\nUsually is done automatically,\nbut this method could be needed if internal content was changed using `to_unsafe`","summary":"<p>Reset matrix flags to None Usually is done automatically, but this method could be needed if internal content was changed using <code><a href=\"../LA/Matrix.html#to_unsafe-instance-method\">#to_unsafe</a></code></p>","abstract":false,"location":{"filename":"src/matrix/flag_checks.cr","line_number":100,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flag_checks.cr#L100"},"def":{"name":"clear_flags","visibility":"Public","body":"self.flags = MatrixFlags::None"}},{"html_id":"columns-instance-method","name":"columns","doc":"Returns Indexable(SubMatrix(T)) that allows iterating over columns","summary":"<p>Returns Indexable(SubMatrix(T)) that allows iterating over columns</p>","abstract":false,"location":{"filename":"src/matrix/iteration.cr","line_number":30,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/iteration.cr#L30"},"def":{"name":"columns","visibility":"Public","body":"Columns(T).new(self)"}},{"html_id":"conjt-instance-method","name":"conjt","doc":"alias to `#conjtranspose`","summary":"<p>alias to <code><a href=\"../LA/Matrix.html#conjtranspose-instance-method\">#conjtranspose</a></code></p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":535,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L535"},"def":{"name":"conjt","visibility":"Public","body":"conjtranspose"}},{"html_id":"conjt!-instance-method","name":"conjt!","doc":"alias to `#conjtranspose!`","summary":"<p>alias to <code>#conjtranspose!</code></p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":540,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L540"},"def":{"name":"conjt!","visibility":"Public","body":"conjtranspose!"}},{"html_id":"conjtranspose-instance-method","name":"conjtranspose","doc":"Returns conjurgate transposed matrix\n\nresult is same as `#transpose` for real matrices","summary":"<p>Returns conjurgate transposed matrix</p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":187,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L187"},"def":{"name":"conjtranspose","visibility":"Public","body":"{% if T != Complex %}\n        return transpose\n      {% end %}\nif flags.hermitian?\n  return clone\nend\nGeneralMatrix(T).new(ncolumns, nrows, flags.transpose) do |i, j|\n  (unsafe_fetch(j, i)).conj\nend\n"}},{"html_id":"coshm-instance-method","name":"coshm","abstract":false,"location":{"filename":"src/linalg/matfun.cr","line_number":35,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L35"},"def":{"name":"coshm","visibility":"Public","body":"0.5 * (self.expm + (-self).expm)"}},{"html_id":"cosm-instance-method","name":"cosm","doc":"optimization idea for noncomplex matrix is from scipy","summary":"<p>optimization idea for noncomplex matrix is from scipy</p>","abstract":false,"location":{"filename":"src/linalg/matfun.cr","line_number":15,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L15"},"def":{"name":"cosm","visibility":"Public","body":"{% if T == Complex %}\n        0.5*((1.i*self).expm + (-1.i*self).expm)\n      {% else %}\n        GMatComplex.new(1.i*self).expm.to_real\n      {% end %}"}},{"html_id":"det(*,overwrite_a=false)-instance-method","name":"det","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(*, overwrite_a = false)","args_html":"(*, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":171,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L171"},"def":{"name":"det","args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":0,"visibility":"Public","body":"if square?\nelse\n  raise(ArgumentError.new(\"matrix must be square\"))\nend\nif flags.triangular?\n  return diag.product\nend\nlru = overwrite_a ? self : self.clone\nipiv = Slice(Int32).new(nrows)\nlapack(getrf, nrows, nrows, lru, nrows, ipiv)\nlru.clear_flags\nlru.diag.product\n"}},{"html_id":"detect(aflags:MatrixFlags=MatrixFlags::All,eps=tolerance)-instance-method","name":"detect","doc":"Detect if given `aflags` are true or flase for a matrix with tolerance `eps`\nUpdate `flags` property\nSee `MatrixFlags` for description of matrix flags\nReturns `self` for method chaining","summary":"<p>Detect if given <code>aflags</code> are true or flase for a matrix with tolerance <code>eps</code> Update <code><a href=\"../LA/Matrix.html#flags%3AMatrixFlags-instance-method\">#flags</a></code> property See <code><a href=\"../LA/MatrixFlags.html\">MatrixFlags</a></code> for description of matrix flags Returns <code>self</code> for method chaining</p>","abstract":false,"args":[{"name":"aflags","default_value":"MatrixFlags::All","external_name":"aflags","restriction":"MatrixFlags"},{"name":"eps","default_value":"tolerance","external_name":"eps","restriction":""}],"args_string":"(aflags : MatrixFlags = MatrixFlags::All, eps = tolerance)","args_html":"(aflags : <a href=\"../LA/MatrixFlags.html\">MatrixFlags</a> = <span class=\"t\">MatrixFlags</span><span class=\"t\">::</span><span class=\"t\">All</span>, eps = tolerance)","location":{"filename":"src/matrix/flag_checks.cr","line_number":92,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flag_checks.cr#L92"},"def":{"name":"detect","args":[{"name":"aflags","default_value":"MatrixFlags::All","external_name":"aflags","restriction":"MatrixFlags"},{"name":"eps","default_value":"tolerance","external_name":"eps","restriction":""}],"visibility":"Public","body":"detect?(aflags, eps)\nself\n"}},{"html_id":"detect?(aflags:MatrixFlags=MatrixFlags::All,eps=tolerance)-instance-method","name":"detect?","doc":"Detect if given `aflags` are true or flase for a matrix with tolerance `eps`\nUpdate `flags` property\nSee `MatrixFlags` for description of matrix flags\nReturns True if _all_ given flags are set","summary":"<p>Detect if given <code>aflags</code> are true or flase for a matrix with tolerance <code>eps</code> Update <code><a href=\"../LA/Matrix.html#flags%3AMatrixFlags-instance-method\">#flags</a></code> property See <code><a href=\"../LA/MatrixFlags.html\">MatrixFlags</a></code> for description of matrix flags Returns True if <em>all</em> given flags are set</p>","abstract":false,"args":[{"name":"aflags","default_value":"MatrixFlags::All","external_name":"aflags","restriction":"MatrixFlags"},{"name":"eps","default_value":"tolerance","external_name":"eps","restriction":""}],"args_string":"(aflags : MatrixFlags = MatrixFlags::All, eps = tolerance)","args_html":"(aflags : <a href=\"../LA/MatrixFlags.html\">MatrixFlags</a> = <span class=\"t\">MatrixFlags</span><span class=\"t\">::</span><span class=\"t\">All</span>, eps = tolerance)","location":{"filename":"src/matrix/flag_checks.cr","line_number":70,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flag_checks.cr#L70"},"def":{"name":"detect?","args":[{"name":"aflags","default_value":"MatrixFlags::All","external_name":"aflags","restriction":"MatrixFlags"},{"name":"eps","default_value":"tolerance","external_name":"eps","restriction":""}],"visibility":"Public","body":"result = true\n{MatrixFlags::Symmetric, MatrixFlags::Hermitian, MatrixFlags::PositiveDefinite, MatrixFlags::Orthogonal, MatrixFlags::LowerTriangular, MatrixFlags::UpperTriangular}.each do |f|\n  if (aflags & f) != MatrixFlags::None\n    if detect_single(f, eps)\n    else\n      result = false\n    end\n  end\nend\nif aflags.triangular?\n  if (detect_single(MatrixFlags::LowerTriangular, eps)) || (detect_single(MatrixFlags::UpperTriangular, eps))\n  else\n    result = false\n  end\nend\nresult\n"}},{"html_id":"diag(offset=0)-instance-method","name":"diag","doc":"Returns `Indexable(T)` that allow iterating over k-th diagonal of matrix\n\nExample:\n```\nm = GMat32.new([[-1, 2, 3, 4],\n                [5, -6, 7, 8],\n                [9, 10, -11, 12]])\nm.diag(0).to_a.should eq [-1, -6, -11]\nm.diag(1).to_a.should eq [2, 7, 12]\nm.diag(2).to_a.should eq [3, 8]\nm.diag(3).to_a.should eq [4]\nexpect_raises(ArgumentError) { m.diag(4) }\nm.diag(-1).to_a.should eq [5, 10]\nm.diag(-2).to_a.should eq [9]\nexpect_raises(ArgumentError) { m.diag(-3) }\nexpect_raises(ArgumentError) { m.diag(-4) }\n```","summary":"<p>Returns <code>Indexable(T)</code> that allow iterating over k-th diagonal of matrix</p>","abstract":false,"args":[{"name":"offset","default_value":"0","external_name":"offset","restriction":""}],"args_string":"(offset = 0)","args_html":"(offset = <span class=\"n\">0</span>)","location":{"filename":"src/matrix/iteration.cr","line_number":112,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/iteration.cr#L112"},"def":{"name":"diag","args":[{"name":"offset","default_value":"0","external_name":"offset","restriction":""}],"visibility":"Public","body":"Diagonal(T).new(self, offset)"}},{"html_id":"each(*,all=false,&)-instance-method","name":"each","doc":"Yields every element of matrix\n\n`all` argument controls whether to yield all or non-empty elements for banded\\sparse matrices\nExample:\n`m.each { |v| raise \"negative element found\" if v < 0 }`","summary":"<p>Yields every element of matrix</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"all","default_value":"false","external_name":"all","restriction":""}],"args_string":"(*, all = false, &)","args_html":"(*, all = <span class=\"n\">false</span>, &)","location":{"filename":"src/matrix/matrix.cr","line_number":268,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L268"},"def":{"name":"each","args":[{"name":"","external_name":"","restriction":""},{"name":"all","default_value":"false","external_name":"all","restriction":""}],"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"each_index(all: all) do |i, j|\n  yield(unsafe_fetch(i, j))\nend"}},{"html_id":"each_index(*,all=false,&)-instance-method","name":"each_index","doc":"Yields every index\n\n`all` argument controls whether to yield all or non-empty elements for banded\\sparse matrices\nExample:\n`m.each_index { |i, j| m[i, j] = -m[i, j] }`","summary":"<p>Yields every index</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"all","default_value":"false","external_name":"all","restriction":""}],"args_string":"(*, all = false, &)","args_html":"(*, all = <span class=\"n\">false</span>, &)","location":{"filename":"src/matrix/matrix.cr","line_number":255,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L255"},"def":{"name":"each_index","args":[{"name":"","external_name":"","restriction":""},{"name":"all","default_value":"false","external_name":"all","restriction":""}],"splat_index":0,"yields":2,"block_arity":2,"visibility":"Public","body":"nrows.times do |row|\n  ncolumns.times do |column|\n    yield row, column\n  end\nend"}},{"html_id":"each_with_index(*,all=false,&)-instance-method","name":"each_with_index","doc":"Yields every element of matrix with corresponding row and column\n\n`all` argument controls whether to yield all or non-empty elements for banded\\sparse matrices\nExample:\nm.each_with_index { |v, i, j| m2[i, j] = v }","summary":"<p>Yields every element of matrix with corresponding row and column</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"all","default_value":"false","external_name":"all","restriction":""}],"args_string":"(*, all = false, &)","args_html":"(*, all = <span class=\"n\">false</span>, &)","location":{"filename":"src/matrix/matrix.cr","line_number":277,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L277"},"def":{"name":"each_with_index","args":[{"name":"","external_name":"","restriction":""},{"name":"all","default_value":"false","external_name":"all","restriction":""}],"splat_index":0,"yields":3,"block_arity":3,"visibility":"Public","body":"each_index(all: all) do |i, j|\n  yield(unsafe_fetch(i, j), i, j)\nend"}},{"html_id":"eigs(*,left=false,overwrite_a=false)-instance-method","name":"eigs","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"left","default_value":"false","external_name":"left","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(*, left = false, overwrite_a = false)","args_html":"(*, left = <span class=\"n\">false</span>, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/eig.cr","line_number":17,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/eig.cr#L17"},"def":{"name":"eigs","args":[{"name":"","external_name":"","restriction":""},{"name":"left","default_value":"false","external_name":"left","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":0,"visibility":"Public","body":"vals, aleft, aright = eigs(overwrite_a: overwrite_a, need_left: left, need_right: !left)\nv = left ? aleft : aright\n{vals, v.not_nil!}\n"}},{"html_id":"eigs(*,need_left:Bool,need_right:Bool,overwrite_a=false)-instance-method","name":"eigs","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"need_left","external_name":"need_left","restriction":"Bool"},{"name":"need_right","external_name":"need_right","restriction":"Bool"},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(*, need_left : Bool, need_right : Bool, overwrite_a = false)","args_html":"(*, need_left : Bool, need_right : Bool, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/eig.cr","line_number":58,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/eig.cr#L58"},"def":{"name":"eigs","args":[{"name":"","external_name":"","restriction":""},{"name":"need_left","external_name":"need_left","restriction":"Bool"},{"name":"need_right","external_name":"need_right","restriction":"Bool"},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":0,"visibility":"Public","body":"if square?\nelse\n  raise(ArgumentError.new(\"matrix must be square\"))\nend\n{% if T == Complex %}\n        if flags.hermitian?\n          vals, vectors = eigsh(need_vectors: need_left || need_right, overwrite_a: overwrite_a)\n          if need_left && need_right\n            return {vals, vectors, vectors.not_nil!.clone}\n          else\n            return {vals, need_left ? vectors : nil, need_right ? vectors : nil}\n          end\n        end\n      {% else %}\n        if flags.symmetric?\n          vals, vectors = eigs_sy(need_vectors: need_left || need_right, overwrite_a: overwrite_a)\n          if need_left && need_right\n            return {vals, vectors, vectors.not_nil!.clone}\n          else\n            return {vals, need_left ? vectors : nil, need_right ? vectors : nil}\n          end\n        end\n      {% end %}\n{% if (flag?(:darwin)) && (T == Float32) %}\n        raise \"Eigenvectors for single precision on Darwin are not supported for now\" if need_left || need_right\n      {% end %}\na = overwrite_a ? self : clone\neigvectorsl = need_left ? GeneralMatrix(T).new(nrows, nrows) : nil\neigvectorsr = need_right ? GeneralMatrix(T).new(nrows, nrows) : nil\n{% if T == Complex %}\n        vals = Array(T).new(nrows, T.new(0, 0))\n        lapack(geev, need_left ? 'V'.ord.to_u8 : 'N'.ord.to_u8, need_right ? 'V'.ord.to_u8 : 'N'.ord.to_u8, nrows, a, nrows,\n          vals.to_unsafe.as(LibCBLAS::ComplexDouble*),\n          eigvectorsl ? eigvectorsl.to_unsafe : Pointer(LibCBLAS::ComplexDouble).null, nrows,\n          eigvectorsr ? eigvectorsr.to_unsafe : Pointer(LibCBLAS::ComplexDouble).null, nrows, worksize: [2*nrows])\n        a.clear_flags\n        return {vals, eigvectorsl, eigvectorsr}\n      {% else %}\n        reals = Array(T).new(nrows, T.new(0))\n        imags = Array(T).new(nrows, T.new(0))\n        lapack(geev, (need_left ? 'V' : 'N').ord.to_u8, (need_right ? 'V' : 'N').ord.to_u8, nrows, a, nrows,\n          reals, imags,\n          eigvectorsl ? eigvectorsl.to_unsafe : Pointer(T).null, nrows,\n          eigvectorsr ? eigvectorsr.to_unsafe : Pointer(T).null, nrows)\n        a.clear_flags\n        if imags.all? &.==(0)\n          vals = reals\n        else\n          vals = Array(Complex).new(nrows) { |i| Complex.new(reals[i], imags[i]) }\n        end\n        return {vals, eigvectorsl, eigvectorsr}\n      {% end %}\n"}},{"html_id":"eigs(*,b:Matrix(T),need_left:Bool,need_right:Bool,overwrite_a=false,overwrite_b=false)-instance-method","name":"eigs","doc":"generalized eigenvalues problem","summary":"<p>generalized eigenvalues problem</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"b","external_name":"b","restriction":"Matrix(T)"},{"name":"need_left","external_name":"need_left","restriction":"Bool"},{"name":"need_right","external_name":"need_right","restriction":"Bool"},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"args_string":"(*, b : Matrix(T), need_left : Bool, need_right : Bool, overwrite_a = false, overwrite_b = false)","args_html":"(*, b : <a href=\"../LA/Matrix.html\">Matrix</a>(T), need_left : Bool, need_right : Bool, overwrite_a = <span class=\"n\">false</span>, overwrite_b = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/eig.cr","line_number":146,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/eig.cr#L146"},"def":{"name":"eigs","args":[{"name":"","external_name":"","restriction":""},{"name":"b","external_name":"b","restriction":"Matrix(T)"},{"name":"need_left","external_name":"need_left","restriction":"Bool"},{"name":"need_right","external_name":"need_right","restriction":"Bool"},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"splat_index":0,"visibility":"Public","body":"if square?\nelse\n  raise(ArgumentError.new(\"a matrix must be square\"))\nend\nif b.size == self.size\nelse\n  raise(ArgumentError.new(\"b matrix must have same size as a\"))\nend\n{% if T == Complex %}\n        if flags.hermitian? && b.flags.positive_definite?\n          vals, vectors = eigs_gen_he(b: b, need_vectors: need_left || need_right, overwrite_a: overwrite_a, overwrite_b: overwrite_b)\n          beta = Array(Float64).new(nrows, 1.0)\n          if need_left && need_right\n            return {vals, beta, vectors, vectors.not_nil!.clone}\n          else\n            return {vals, beta, need_left ? vectors : nil, need_right ? vectors : nil}\n          end\n        end\n      {% else %}\n        if flags.symmetric? && b.flags.positive_definite?\n          vals, vectors = eigs_gen_sy(b: b, need_vectors: need_left || need_right, overwrite_a: overwrite_a, overwrite_b: overwrite_b)\n          beta = Array(T).new(nrows, T.new(1))\n          if need_left && need_right\n            return {vals, beta, vectors, vectors.not_nil!.clone}\n          else\n            return {vals, beta, need_left ? vectors : nil, need_right ? vectors : nil}\n          end\n        end\n      {% end %}\na = overwrite_a ? self : clone\nbb = overwrite_b ? b : b.clone\neigvectorsl = need_left ? GeneralMatrix(T).new(nrows, nrows) : nil\neigvectorsr = need_right ? GeneralMatrix(T).new(nrows, nrows) : nil\n{% if T == Complex %}\n        alpha = Array(T).new(nrows, T.new(0, 0))\n        beta = Array(T).new(nrows, T.new(0, 0))\n        lapack(ggev, (need_left ? 'V' : 'N').ord.to_u8, (need_right ? 'V' : 'N').ord.to_u8, nrows, a, nrows,\n          bb, b.nrows,\n          alpha.to_unsafe.as(LibCBLAS::ComplexDouble*),\n          beta.to_unsafe.as(LibCBLAS::ComplexDouble*),\n          eigvectorsl ? eigvectorsl.to_unsafe : Pointer(LibCBLAS::ComplexDouble).null, nrows,\n          eigvectorsr ? eigvectorsr.to_unsafe : Pointer(LibCBLAS::ComplexDouble).null, nrows, worksize: [8*nrows])\n        a.clear_flags\n        bb.clear_flags\n        return {alpha, beta, eigvectorsl, eigvectorsr}\n      {% else %}\n        alpha_reals = Array(T).new(nrows, T.new(0))\n        alpha_imags = Array(T).new(nrows, T.new(0))\n        beta = Array(T).new(nrows, T.new(0))\n        lapack(ggev, (need_left ? 'V' : 'N').ord.to_u8, (need_right ? 'V' : 'N').ord.to_u8, nrows, a, nrows,\n          overwrite_b ? b : b.clone, b.nrows,\n          alpha_reals, alpha_imags, beta,\n          eigvectorsl ? eigvectorsl.to_unsafe : Pointer(T).null, nrows,\n          eigvectorsr ? eigvectorsr.to_unsafe : Pointer(T).null, nrows)\n        a.clear_flags\n        bb.clear_flags\n        if alpha_imags.all? &.==(0)\n          alpha = alpha_reals\n        else\n          alpha = Array(Complex).new(nrows) { |i| Complex.new(alpha_reals[i], alpha_imags[i]) }\n        end\n        return {alpha, beta, eigvectorsl, eigvectorsr}\n      {% end %}\n"}},{"html_id":"eigvals(*,overwrite_a=false)-instance-method","name":"eigvals","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(*, overwrite_a = false)","args_html":"(*, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/eig.cr","line_number":12,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/eig.cr#L12"},"def":{"name":"eigvals","args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":0,"visibility":"Public","body":"vals, aleft, aright = eigs(overwrite_a: overwrite_a, need_left: false, need_right: false)\nvals\n"}},{"html_id":"expm(*,schur_fact=false)-instance-method","name":"expm","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"schur_fact","default_value":"false","external_name":"schur_fact","restriction":""}],"args_string":"(*, schur_fact = false)","args_html":"(*, schur_fact = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/expm.cr","line_number":29,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/expm.cr#L29"},"def":{"name":"expm","args":[{"name":"","external_name":"","restriction":""},{"name":"schur_fact","default_value":"false","external_name":"schur_fact","restriction":""}],"splat_index":0,"visibility":"Public","body":"if square?\nelse\n  raise(ArgumentError.new(\"Matrix must be square for expm\"))\nend\nif (norm(MatrixNorm::One)) == 0\n  return self.class.identity(nrows)\nend\nif flags.diagonal?\n  return self.class.diag(nrows, nrows) do |i|\n    v = unsafe_fetch(i, i)\n    Math.exp(v)\n  end\nend\nif nrows == 2\n  return clone.expm2_by_2!\nend\nif flags.triangular?\n  schur_fact = false\nend\nif schur_fact\n  a, q = self.schur\nelse\n  a = self\n  q = Matrix(T).zeros(0, 0)\nend\nn = a.nrows\ns = 0\na2 = a * a\neta1 = {(a2.normAm(2)) ** (1.0 / 4), (a2.normAm(3)) ** (1.0 / 6)}.max\nt = eval_alpha(a, 1)\nif eta1 <= THETA[0] && (t == 0)\n  f = a.padeApproximantOfDegree(M_VALS[0], a2)\n  if q\n  else\n    raise(\"\")\n  end\n  return schur_fact ? (q * f) * q.conjt : f\nend\na4 = a2 * a2\neta2 = {(a4.normAm(1)) ** (1.0 / 4), (a2.normAm(3)) ** (1.0 / 6)}.max\nt = eval_alpha(a, 2)\nif eta2 <= THETA[1] && (t == 0)\n  f = a.padeApproximantOfDegree(M_VALS[1], a2, a4)\n  if q\n  else\n    raise(\"\")\n  end\n  return schur_fact ? (q * f) * q.conjt : f\nend\na6 = a2 * a4\neta3 = {(a6.normAm(1)) ** (1.0 / 6), (a4.normAm(2)) ** (1.0 / 8)}.max\nh = [0.0, 0.0, 0.0, 0.0]\n(2..3).each do |i|\n  if eta3 <= THETA[i]\n    h = eval_alpha(a, i + 1)\n    if h == 0\n      f = a.padeApproximantOfDegree(M_VALS[i], a2, a4, a6)\n      return schur_fact ? (q * f) * q.conjt : f\n    end\n  end\nend\neta4 = {(a4.normAm(2)) ** (1.0 / 8), (a2.normAm(5)) ** (1.0 / 10)}.max\neta5 = {eta3, eta4}.min\ns = {(Math.log2(eta5 / THETA.last)).ceil, 0}.max\nt = eval_alpha(a / (2 ** s), 5)\ns = s + t\na = a / (2 ** s)\na2 = a2 / (2 ** (2 * s))\na4 = a4 / (2 ** (4 * s))\na6 = a6 / (2 ** (6 * s))\nf = a.padeApproximantOfDegree(M_VALS.last, a2, a4, a6)\nlower = a.flags.lower_triangular? && (!a.flags.upper_triangular?)\nif lower\n  a.t!\n  f.t!\nend\nif a.flags.triangular? || schur_fact\n  f = expm_sqtri(a, f, s)\n  if lower\n    f.transpose!\n  end\nelse\n  s.to_i.times do\n    f = f * f\n  end\nend\nreturn schur_fact ? (q * f) * q.conjt : f\n"}},{"html_id":"expm_sqtri(t,f,s)-instance-method","name":"expm_sqtri","abstract":false,"args":[{"name":"t","external_name":"t","restriction":""},{"name":"f","external_name":"f","restriction":""},{"name":"s","external_name":"s","restriction":""}],"args_string":"(t, f, s)","args_html":"(t, f, s)","location":{"filename":"src/linalg/expm.cr","line_number":246,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/expm.cr#L246"},"def":{"name":"expm_sqtri","args":[{"name":"t","external_name":"t","restriction":""},{"name":"f","external_name":"f","restriction":""},{"name":"s","external_name":"s","restriction":""}],"visibility":"Public","body":"k = 1\nistriangular = t.flags.upper_triangular?\nif istriangular\nelse\n  raise(\"not implemented\")\nend\ni = 0\nwhile i <= (s + 0.001)\n  if i > 0\n    f = f * f\n  end\n  if istriangular\n    (1..f.nrows).step(2) do |j|\n      if j < (f.nrows - 1)\n        f[(j - 1)..j, (j - 1)..j] = ((2 ** i) * t[(j - 1)..j, (j - 1)..j]).expmT2by2!\n      else\n        f[j, j] = Math.exp((2 ** i) * t[j, j])\n      end\n    end\n  end\n  i = i + 1\nend\nreturn f\n"}},{"html_id":"flags:MatrixFlags-instance-method","name":"flags","doc":"Returns flags of matrix (see `MatrixFlags`)","summary":"<p>Returns flags of matrix (see <code><a href=\"../LA/MatrixFlags.html\">MatrixFlags</a></code>)</p>","abstract":true,"location":{"filename":"src/matrix/matrix.cr","line_number":23,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L23"},"def":{"name":"flags","return_type":"MatrixFlags","visibility":"Public","body":""}},{"html_id":"hcat(other)-instance-method","name":"hcat","doc":"Returns horizontal concatenation with another matrix","summary":"<p>Returns horizontal concatenation with another matrix</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/matrix/matrix.cr","line_number":567,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L567"},"def":{"name":"hcat","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"cat(other, axis: Axis::Rows)"}},{"html_id":"hessenberg-instance-method","name":"hessenberg","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":324,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L324"},"def":{"name":"hessenberg","visibility":"Public","body":"clone.hessenberg!"}},{"html_id":"hessenberg(*,calc_q=false)-instance-method","name":"hessenberg","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"calc_q","default_value":"false","external_name":"calc_q","restriction":""}],"args_string":"(*, calc_q = false)","args_html":"(*, calc_q = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":319,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L319"},"def":{"name":"hessenberg","args":[{"name":"","external_name":"","restriction":""},{"name":"calc_q","default_value":"false","external_name":"calc_q","restriction":""}],"splat_index":0,"visibility":"Public","body":"x = self.clone\nx.hessenberg!(calc_q: calc_q)\n"}},{"html_id":"hessenberg!-instance-method","name":"hessenberg!","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":314,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L314"},"def":{"name":"hessenberg!","visibility":"Public","body":"q = hessenberg!(calc_q: false)\nself\n"}},{"html_id":"hessenberg!(*,calc_q=false)-instance-method","name":"hessenberg!","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"calc_q","default_value":"false","external_name":"calc_q","restriction":""}],"args_string":"(*, calc_q = false)","args_html":"(*, calc_q = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":285,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L285"},"def":{"name":"hessenberg!","args":[{"name":"","external_name":"","restriction":""},{"name":"calc_q","default_value":"false","external_name":"calc_q","restriction":""}],"splat_index":0,"visibility":"Public","body":"if square?\nelse\n  raise(ArgumentError.new(\"matrix must be square\"))\nend\nif nrows < 2\n  q = calc_q ? Matrix(T).identity(nrows) : Matrix(T).zeros(1, 1)\n  return {self, q}\nend\n{% if flag?(:darwin) %}\n        raise \"Hessenberg decomposition is not supported on mac\"\n      {% end %}\nn = nrows\ns = of_real_type(Slice, n)\nlapack(gebal, 'S'.ord.to_u8, n, self, n, ilo, ihi, s)\nclear_flags\ntau = GeneralMatrix(T).new(1, n)\nlapack(gehrd, n, ilo, ihi, self, ncolumns, tau)\nif calc_q\n  q = clone\n  lapack(orghr, n, ilo, ihi, q, ncolumns, tau)\n  q.flags = MatrixFlags::Orthogonal\nelse\n  q = Matrix(T).zeros(1, 1)\nend\ntriu!(-1)\n{self, q}\n"}},{"html_id":"inspect(io)-instance-method","name":"inspect","doc":"Converts matrix to string for inspection\n\nOutput looks like:\n```\nGeneralMatrix(Float64) (10x10, MatrixFlags::None)\n[1, 2, 3, .... 10]\n[11, 12, 13, .... 20]\n...\n[91, 92, 93, .... 100]\n```","summary":"<p>Converts matrix to string for inspection</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/matrix/matrix.cr","line_number":245,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L245"},"def":{"name":"inspect","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(((((((io << self.class) << \" (\") << nrows) << \"x\") << ncolumns) << \", \") << flags) << \"):\"\nto_s(io)\n"}},{"html_id":"inv-instance-method","name":"inv","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":102,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L102"},"def":{"name":"inv","visibility":"Public","body":"clone.inv!"}},{"html_id":"inv!-instance-method","name":"inv!","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":69,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L69"},"def":{"name":"inv!","visibility":"Public","body":"if square?\nelse\n  raise(ArgumentError.new(\"can't invert nonsquare matrix\"))\nend\nif flags.orthogonal?\n  return transpose!\nend\nn = self.nrows\nif flags.triangular?\n  lapack(trtri, uplo, 'N'.ord.to_u8, n, self, n)\n  adjust_triangular\nelse\n  if flags.positive_definite?\n    lapack(potrf, uplo, n, self, n)\n    lapack(potri, uplo, n, self, n)\n    adjust_symmetric\n  else\n    if ({{ T == Complex }}) && flags.hermitian?\n      {% if T == Complex %}\n          ipiv = Slice(Int32).new(n)\n          lapack(hetrf, uplo, n, self, n, ipiv)\n          lapack(hetri, uplo, n, self, n, ipiv, worksize: [n])\n          adjust_symmetric\n        {% else %}\n          raise \"error\"\n        {% end %}\n    else\n      if flags.symmetric?\n        ipiv = Slice(Int32).new(n)\n        lapack(sytrf, uplo, n, self, n, ipiv)\n        lapack(sytri, uplo, n, self, n, ipiv, worksize: [2 * n])\n        adjust_symmetric\n      else\n        ipiv = Slice(Int32).new(n)\n        lapack(getrf, n, n, self, n, ipiv)\n        lapack(getri, n, self, n, ipiv)\n      end\n    end\n  end\nend\nself\n"}},{"html_id":"kron(b:Matrix(T))-instance-method","name":"kron","doc":"Returns kroneker product with matrix b","summary":"<p>Returns kroneker product with matrix b</p>","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"Matrix(T)"}],"args_string":"(b : Matrix(T))","args_html":"(b : <a href=\"../LA/Matrix.html\">Matrix</a>(T))","location":{"filename":"src/matrix/matrix.cr","line_number":198,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L198"},"def":{"name":"kron","args":[{"name":"b","external_name":"b","restriction":"Matrix(T)"}],"visibility":"Public","body":"Matrix(T).kron(self, b)"}},{"html_id":"lq(*,overwrite_a=false)-instance-method","name":"lq","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(*, overwrite_a = false)","args_html":"(*, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/rq_lq_ql.cr","line_number":43,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/rq_lq_ql.cr#L43"},"def":{"name":"lq","args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":0,"visibility":"Public","body":"a = overwrite_a ? self : clone\ntau = lq_initial(a)\nr = a.clone\nr.tril!\nm = a.nrows\nn = a.ncolumns\nk = {m, n}.min\nlapack(orglq, m, n, k, a, a.nrows, tau)\na.assume!(MatrixFlags::Orthogonal)\n{r, a}\n"}},{"html_id":"lq_r(*,overwrite_a=false)-instance-method","name":"lq_r","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(*, overwrite_a = false)","args_html":"(*, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/rq_lq_ql.cr","line_number":43,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/rq_lq_ql.cr#L43"},"def":{"name":"lq_r","args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":0,"visibility":"Public","body":"a = overwrite_a ? self : clone\ntau = lq_initial(a)\na.tril!\na\n"}},{"html_id":"lstsq(b:self,method:LSMethod=LSMethod::Auto,*,overwrite_a=false,overwrite_b=false,cond=-1)-instance-method","name":"lstsq","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"self"},{"name":"method","default_value":"LSMethod::Auto","external_name":"method","restriction":"LSMethod"},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""},{"name":"cond","default_value":"-1","external_name":"cond","restriction":""}],"args_string":"(b : self, method : LSMethod = LSMethod::Auto, *, overwrite_a = false, overwrite_b = false, cond = -1)","args_html":"(b : <span class=\"k\">self</span>, method : <a href=\"../LA/LSMethod.html\">LSMethod</a> = <span class=\"t\">LSMethod</span><span class=\"t\">::</span><span class=\"t\">Auto</span>, *, overwrite_a = <span class=\"n\">false</span>, overwrite_b = <span class=\"n\">false</span>, cond = <span class=\"n\">-1</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":198,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L198"},"def":{"name":"lstsq","args":[{"name":"b","external_name":"b","restriction":"self"},{"name":"method","default_value":"LSMethod::Auto","external_name":"method","restriction":"LSMethod"},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""},{"name":"cond","default_value":"-1","external_name":"cond","restriction":""}],"splat_index":2,"visibility":"Public","body":"if nrows == b.nrows\nelse\n  raise(ArgumentError.new(\"nrows of a and b must match\"))\nend\nif method.auto?\n  method = LSMethod::QR\nend\na = overwrite_a ? self : self.clone\nif ncolumns > nrows\n  x = GeneralMatrix(T).new(ncolumns, b.ncolumns) do |r, c|\n    r < nrows ? b.unsafe_fetch(r, c) : T.new(0)\n  end\nelse\n  x = overwrite_b ? b : b.clone\nend\nrank = 0\ncase method\nwhen .ls?\n  lapack(gels, 'N'.ord.to_u8, nrows, ncolumns, b.ncolumns, a, nrows, x, x.nrows)\n  s = of_real_type(Array, 0)\nwhen .lsd?\n  ssize = {nrows, ncolumns}.min\n  s = of_real_type(Array, ssize)\n  rcond = of_real_type(cond)\n  lapack(gelsd, nrows, ncolumns, b.ncolumns, a, nrows, x, x.nrows, s, rcond, rank)\nwhen .lsy?\n  jpvt = Slice(Int32).new(ncolumns)\n  rcond = of_real_type(cond)\n  lapack(gelsy, nrows, ncolumns, b.ncolumns, a, nrows, x, x.nrows, jpvt, rcond, rank, worksize: [2 * ncolumns])\n  s = of_real_type(Array, 0)\nelse\n  s = of_real_type(Array, 0)\nend\na.clear_flags\nx.clear_flags\n{x, rank, s}\n"}},{"html_id":"lu(*,overwrite_a=false)-instance-method","name":"lu","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(*, overwrite_a = false)","args_html":"(*, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/lu.cr","line_number":5,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lu.cr#L5"},"def":{"name":"lu","args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":0,"visibility":"Public","body":"a = overwrite_a ? self : self.clone\nm = nrows\nn = ncolumns\nk = {nrows, ncolumns}.min\nipiv = Slice(Int32).new(m)\nlapack(getrf, nrows, ncolumns, a, nrows, ipiv)\na.clear_flags\npiv = (1..m).to_a\nk.times do |i|\n  tmp = piv[i]\n  piv[i] = piv[ipiv[i] - 1]\n  piv[ipiv[i] - 1] = tmp\nend\np = GeneralMatrix(T).new(m, m)\nm.times do |i|\n  p[piv[i] - 1, i] = T.new(1)\nend\nl = GeneralMatrix(T).new(m, k) do |i, j|\n  case i <=> j\n  when 0\n    T.new(1)\n  when 1\n    a[i, j]\n  else\n    T.new(0)\n  end\nend\nu = GeneralMatrix(T).new(k, n) do |i, j|\n  if i <= j\n    a[i, j]\n  else\n    T.new(0)\n  end\nend\n{p, l, u}\n"}},{"html_id":"lu_factor-instance-method","name":"lu_factor","abstract":false,"location":{"filename":"src/linalg/lu.cr","line_number":52,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lu.cr#L52"},"def":{"name":"lu_factor","visibility":"Public","body":"clone.lu_factor!"}},{"html_id":"lu_factor!-instance-method","name":"lu_factor!","abstract":false,"location":{"filename":"src/linalg/lu.cr","line_number":44,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lu.cr#L44"},"def":{"name":"lu_factor!","visibility":"Public","body":"if square?\nelse\n  raise(ArgumentError.new(\"matrix must be square\"))\nend\nipiv = Slice(Int32).new(nrows)\nlapack(getrf, nrows, ncolumns, self, nrows, ipiv)\nclear_flags\nLUMatrix(T).new(self, ipiv)\n"}},{"html_id":"map(&)-instance-method","name":"map","doc":"Returns result of appliyng block to every element (without index)","summary":"<p>Returns result of appliyng block to every element (without index)</p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":589,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L589"},"def":{"name":"map","yields":1,"block_arity":1,"visibility":"Public","body":"map_with_index do |v, i, j|\n  yield(v)\nend"}},{"html_id":"map!(&)-instance-method","name":"map!","doc":"Yields each element (without index) and replace it with returned value","summary":"<p>Yields each element (without index) and replace it with returned value</p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":578,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L578"},"def":{"name":"map!","yields":1,"block_arity":1,"visibility":"Public","body":"map_with_index! do |v, i, j|\n  yield(v)\nend\nself\n"}},{"html_id":"map_with_index(&)-instance-method","name":"map_with_index","doc":"Returns result of appliyng block to every element with index","summary":"<p>Returns result of appliyng block to every element with index</p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":584,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L584"},"def":{"name":"map_with_index","yields":3,"block_arity":3,"visibility":"Public","body":"GeneralMatrix(T).new(nrows, ncolumns) do |i, j|\n  yield(unsafe_fetch(i, j), i, j)\nend"}},{"html_id":"map_with_index!(&)-instance-method","name":"map_with_index!","doc":"Yields each element with index and replace it with returned value","summary":"<p>Yields each element with index and replace it with returned value</p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":572,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L572"},"def":{"name":"map_with_index!","yields":3,"block_arity":3,"visibility":"Public","body":"each_with_index do |v, i, j|\n  unsafe_set(i, j, yield(v, i, j))\nend\nself\n"}},{"html_id":"max(axis:Axis)-instance-method","name":"max","doc":"Calculate maximum over given `axis`","summary":"<p>Calculate maximum over given <code>axis</code></p>","abstract":false,"args":[{"name":"axis","external_name":"axis","restriction":"Axis"}],"args_string":"(axis : Axis)","args_html":"(axis : <a href=\"../LA/Axis.html\">Axis</a>)","location":{"filename":"src/matrix/matrix.cr","line_number":686,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L686"},"def":{"name":"max","args":[{"name":"axis","external_name":"axis","restriction":"Axis"}],"visibility":"Public","body":"reduce(axis, -T::INFINITY) do |memo, e|\n  {memo, e}.max\nend"}},{"html_id":"min(axis:Axis)-instance-method","name":"min","doc":"Calculate minimum over given `axis`","summary":"<p>Calculate minimum over given <code>axis</code></p>","abstract":false,"args":[{"name":"axis","external_name":"axis","restriction":"Axis"}],"args_string":"(axis : Axis)","args_html":"(axis : <a href=\"../LA/Axis.html\">Axis</a>)","location":{"filename":"src/matrix/matrix.cr","line_number":691,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L691"},"def":{"name":"min","args":[{"name":"axis","external_name":"axis","restriction":"Axis"}],"visibility":"Public","body":"reduce(axis, T::INFINITY) do |memo, e|\n  {memo, e}.min\nend"}},{"html_id":"ncolumns:Int32-instance-method","name":"ncolumns","doc":"Returns number of columns in matrix","summary":"<p>Returns number of columns in matrix</p>","abstract":true,"location":{"filename":"src/matrix/matrix.cr","line_number":21,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L21"},"def":{"name":"ncolumns","return_type":"Int32","visibility":"Public","body":""}},{"html_id":"norm(kind:MatrixNorm=MatrixNorm::Frobenius)-instance-method","name":"norm","doc":"returns matrix norm","summary":"<p>returns matrix norm</p>","abstract":false,"args":[{"name":"kind","default_value":"MatrixNorm::Frobenius","external_name":"kind","restriction":"MatrixNorm"}],"args_string":"(kind : MatrixNorm = MatrixNorm::Frobenius)","args_html":"(kind : <a href=\"../LA/MatrixNorm.html\">MatrixNorm</a> = <span class=\"t\">MatrixNorm</span><span class=\"t\">::</span><span class=\"t\">Frobenius</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":329,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L329"},"def":{"name":"norm","args":[{"name":"kind","default_value":"MatrixNorm::Frobenius","external_name":"kind","restriction":"MatrixNorm"}],"visibility":"Public","body":"let = (case kind\nin .frobenius?\n  'F'\nin .one?\n  'O'\nin .inf?\n  'I'\nin .max_abs?\n  'M'\nend).ord.to_u8\nworksize = kind.inf? ? nrows : 0\n{% if (flag?(:darwin)) && (T == Float32) %}\n        return GMat.new(self).norm(kind)\n      {% end %}\nif flags.triangular?\n  lapack_util(lantr, worksize, let, uplo, 'N'.ord.to_u8, @nrows, @ncolumns, matrix(self), @nrows)\nelse\n  if flags.hermitian?\n    {% if T == Complex %}\n          lapack_util(lanhe, worksize, let, uplo, @nrows, matrix(self), @nrows)\n        {% else %}\n          lapack_util(lange, worksize, let, @nrows, @ncolumns, matrix(self), @nrows)\n        {% end %}\n  else\n    if flags.symmetric?\n      lapack_util(lansy, worksize, let, uplo, @nrows, matrix(self), @nrows)\n    else\n      lapack_util(lange, worksize, let, @nrows, @ncolumns, matrix(self), @nrows)\n    end\n  end\nend\n"}},{"html_id":"nrows:Int32-instance-method","name":"nrows","doc":"Returns number of rows in matrix","summary":"<p>Returns number of rows in matrix</p>","abstract":true,"location":{"filename":"src/matrix/matrix.cr","line_number":19,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L19"},"def":{"name":"nrows","return_type":"Int32","visibility":"Public","body":""}},{"html_id":"pinv-instance-method","name":"pinv","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":106,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L106"},"def":{"name":"pinv","visibility":"Public","body":"u, s, v = self.svd\nv.conjtranspose!\nu.conjtranspose!\ns_inverse = s.map! do |e|\n  if e != 0\n    1.0 / e\n  else\n    e\n  end\nend\ns_dash : GeneralMatrix(T) = GeneralMatrix(T).diag(s_inverse)\nappend_rows = 0\nappend_cols = 0\nif v.ncolumns >= s_dash.nrows\n  append_rows = v.ncolumns - s_dash.nrows\nelse\n  puts(\"S` #{s_dash}\")\n  puts(\"v #{v}\")\n  raise(Exception.new(\"Invalid dimension, S` larger than v\"))\nend\nif u.nrows >= s_dash.ncolumns\n  append_cols = u.nrows - s_dash.ncolumns\nelse\n  puts(\"S` #{s_dash}\\nShape #{s_dash.size}\")\n  puts(\"U #{u}\\nShape #{u.size}\")\n  raise(Exception.new(\"Invalid dimension, S` larger than U\"))\nend\ns_dash.resize!(s_dash.nrows + append_rows, s_dash.ncolumns + append_cols)\nreturn (v * s_dash) * u\n"}},{"html_id":"product(axis:Axis)-instance-method","name":"product","doc":"Perform product over given `axis`","summary":"<p>Perform product over given <code>axis</code></p>","abstract":false,"args":[{"name":"axis","external_name":"axis","restriction":"Axis"}],"args_string":"(axis : Axis)","args_html":"(axis : <a href=\"../LA/Axis.html\">Axis</a>)","location":{"filename":"src/matrix/matrix.cr","line_number":681,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L681"},"def":{"name":"product","args":[{"name":"axis","external_name":"axis","restriction":"Axis"}],"visibility":"Public","body":"reduce(axis, 1) do |memo, e|\n  memo * e\nend"}},{"html_id":"ql(*,overwrite_a=false)-instance-method","name":"ql","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(*, overwrite_a = false)","args_html":"(*, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/rq_lq_ql.cr","line_number":44,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/rq_lq_ql.cr#L44"},"def":{"name":"ql","args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":0,"visibility":"Public","body":"a = overwrite_a ? self : clone\ntau = ql_initial(a)\nr = a.clone\nr.tril!\nm = a.nrows\nn = a.ncolumns\nk = {m, n}.min\nlapack(orgql, m, n, k, a, a.nrows, tau)\na.assume!(MatrixFlags::Orthogonal)\n{a, r}\n"}},{"html_id":"ql_r(*,overwrite_a=false)-instance-method","name":"ql_r","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(*, overwrite_a = false)","args_html":"(*, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/rq_lq_ql.cr","line_number":44,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/rq_lq_ql.cr#L44"},"def":{"name":"ql_r","args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":0,"visibility":"Public","body":"a = overwrite_a ? self : clone\ntau = ql_initial(a)\na.tril!\na\n"}},{"html_id":"qr(*,overwrite_a=false,pivoting=false)-instance-method","name":"qr","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"pivoting","default_value":"false","external_name":"pivoting","restriction":""}],"args_string":"(*, overwrite_a = false, pivoting = false)","args_html":"(*, overwrite_a = <span class=\"n\">false</span>, pivoting = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/qr.cr","line_number":34,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/qr.cr#L34"},"def":{"name":"qr","args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"pivoting","default_value":"false","external_name":"pivoting","restriction":""}],"splat_index":0,"visibility":"Public","body":"a = overwrite_a ? self : clone\ntau, pvt = qr_initial(a, pivoting)\nr = a.clone\nr.triu!\nm = a.nrows\nn = a.ncolumns\nk = {m, n}.min\nlapack(orgqr, m, n, k, a, a.nrows, tau)\na.assume!(MatrixFlags::Orthogonal)\n{a, r, pvt}\n"}},{"html_id":"qr_r(*,overwrite_a=false,pivoting=false)-instance-method","name":"qr_r","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"pivoting","default_value":"false","external_name":"pivoting","restriction":""}],"args_string":"(*, overwrite_a = false, pivoting = false)","args_html":"(*, overwrite_a = <span class=\"n\">false</span>, pivoting = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/qr.cr","line_number":27,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/qr.cr#L27"},"def":{"name":"qr_r","args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"pivoting","default_value":"false","external_name":"pivoting","restriction":""}],"splat_index":0,"visibility":"Public","body":"a = overwrite_a ? self : clone\ntau, pvt = qr_initial(a, pivoting)\na.triu!\n{a, pvt}\n"}},{"html_id":"qr_raw(*,overwrite_a=false,pivoting=false)-instance-method","name":"qr_raw","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"pivoting","default_value":"false","external_name":"pivoting","restriction":""}],"args_string":"(*, overwrite_a = false, pivoting = false)","args_html":"(*, overwrite_a = <span class=\"n\">false</span>, pivoting = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/qr.cr","line_number":21,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/qr.cr#L21"},"def":{"name":"qr_raw","args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"pivoting","default_value":"false","external_name":"pivoting","restriction":""}],"splat_index":0,"visibility":"Public","body":"a = overwrite_a ? self : clone\ntau, pvt = qr_initial(a, pivoting)\n{a, tau, pvt}\n"}},{"html_id":"qz(b,overwrite_a=false,overwrite_b=false)-instance-method","name":"qz","abstract":false,"args":[{"name":"b","external_name":"b","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"args_string":"(b, overwrite_a = false, overwrite_b = false)","args_html":"(b, overwrite_a = <span class=\"n\">false</span>, overwrite_b = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/schur.cr","line_number":35,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/schur.cr#L35"},"def":{"name":"qz","args":[{"name":"b","external_name":"b","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"visibility":"Public","body":"if square?\nelse\n  raise(ArgumentError.new(\"matrix must be square\"))\nend\na = overwrite_a ? self : clone\nbb = overwrite_b ? b : b.clone\nvsl = GeneralMatrix(T).new(*size)\nvsr = GeneralMatrix(T).new(*size)\n{% if T == Complex %}\n        alpha = Slice(T).new(nrows, T.new(0))\n        beta = Slice(T).new(nrows, T.new(0))\n        lapack(gges, 'V'.ord.to_u8, 'V'.ord.to_u8, 'N'.ord.to_u8, nil,\n          nrows, a, ncolumns, bb, bb.ncolumns,\n          sdim,\n          alpha.to_unsafe.as(LibCBLAS::ComplexDouble*),\n          beta.to_unsafe.as(LibCBLAS::ComplexDouble*),\n          vsl, ncolumns, vsr, ncolumns, worksize: [8*nrows])\n        a.clear_flags\n        bb.clear_flags\n        bb.assume! MatrixFlags::UpperTriangular\n      {% else %}\n        alphar = Slice(T).new(nrows)\n        alphai = Slice(T).new(nrows)\n        beta = Slice(T).new(nrows)\n        lapack(gges, 'V'.ord.to_u8, 'V'.ord.to_u8, 'N'.ord.to_u8, nil, nrows, a, ncolumns, bb, ncolumns, sdim,\n          alphar, alphai, beta, vsl, ncolumns, vsr, ncolumns)\n        a.clear_flags\n        bb.clear_flags\n        bb.detect MatrixFlags::UpperTriangular\n      {% end %}\nvsl.assume!(MatrixFlags::Orthogonal)\nvsr.assume!(MatrixFlags::Orthogonal)\nreturn {a, bb, vsl, vsr}\n"}},{"html_id":"rank(eps=self.tolerance,*,method:RankMethod=RankMethod::SVD,overwrite_a=false)-instance-method","name":"rank","doc":"determine effective rank either by SVD method or QR-factorization with pivoting\nQR method is faster, but could fail to determine rank in some cases","summary":"<p>determine effective rank either by SVD method or QR-factorization with pivoting QR method is faster, but could fail to determine rank in some cases</p>","abstract":false,"args":[{"name":"eps","default_value":"self.tolerance","external_name":"eps","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"method","default_value":"RankMethod::SVD","external_name":"method","restriction":"RankMethod"},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(eps = self.tolerance, *, method : RankMethod = RankMethod::SVD, overwrite_a = false)","args_html":"(eps = <span class=\"k\">self</span>.tolerance, *, method : <a href=\"../LA/RankMethod.html\">RankMethod</a> = <span class=\"t\">RankMethod</span><span class=\"t\">::</span><span class=\"t\">SVD</span>, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":368,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L368"},"def":{"name":"rank","args":[{"name":"eps","default_value":"self.tolerance","external_name":"eps","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"method","default_value":"RankMethod::SVD","external_name":"method","restriction":"RankMethod"},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":1,"visibility":"Public","body":"if flags.triangular?\n  return diag.count do |v|\n    v.abs > eps\n  end\nend\ncase method\nin .qrp?\n  a, pvt = qr_r(overwrite_a: overwrite_a, pivoting: true)\n  a.diag.count do |v|\n    v.abs > eps\n  end\nin .svd?\n  s = svdvals(overwrite_a: overwrite_a)\n  s.count do |x|\n    x.abs > eps\n  end\nend\n"}},{"html_id":"reduce(axis:Axis,initial,&)-instance-method","name":"reduce","doc":"Perform `reduce` from `initial` value over given `axis`","summary":"<p>Perform <code><a href=\"../LA/Matrix.html#reduce%28axis%3AAxis%2Cinitial%2C%26%29-instance-method\">#reduce</a></code> from <code>initial</code> value over given <code>axis</code></p>","abstract":false,"args":[{"name":"axis","external_name":"axis","restriction":"Axis"},{"name":"initial","external_name":"initial","restriction":""}],"args_string":"(axis : Axis, initial, &)","args_html":"(axis : <a href=\"../LA/Axis.html\">Axis</a>, initial, &)","location":{"filename":"src/matrix/matrix.cr","line_number":658,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L658"},"def":{"name":"reduce","args":[{"name":"axis","external_name":"axis","restriction":"Axis"},{"name":"initial","external_name":"initial","restriction":""}],"yields":2,"block_arity":2,"visibility":"Public","body":"case axis\nin Axis::Columns\n  GeneralMatrix(T).new(1, ncolumns) do |_, column|\n    result = T.new(initial)\n    nrows.times do |row|\n      result = yield(result, unsafe_fetch(row, column))\n    end\n    result\n  end\nin Axis::Rows\n  GeneralMatrix(T).new(nrows, 1) do |row, _|\n    result = T.new(initial)\n    ncolumns.times do |column|\n      result = yield(result, unsafe_fetch(row, column))\n    end\n    result\n  end\nend"}},{"html_id":"repmat(arows,acolumns)-instance-method","name":"repmat","doc":"Return matrix repeated `arows` times by vertical and `acolumns` times by horizontal","summary":"<p>Return matrix repeated <code>arows</code> times by vertical and <code>acolumns</code> times by horizontal</p>","abstract":false,"args":[{"name":"arows","external_name":"arows","restriction":""},{"name":"acolumns","external_name":"acolumns","restriction":""}],"args_string":"(arows, acolumns)","args_html":"(arows, acolumns)","location":{"filename":"src/matrix/matrix.cr","line_number":299,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L299"},"def":{"name":"repmat","args":[{"name":"arows","external_name":"arows","restriction":""},{"name":"acolumns","external_name":"acolumns","restriction":""}],"visibility":"Public","body":"GeneralMatrix(T).new(nrows * arows, ncolumns * acolumns) do |i, j|\n  unsafe_fetch(i % nrows, j % ncolumns)\nend"}},{"html_id":"rows-instance-method","name":"rows","doc":"Returns Indexable(SubMatrix(T)) that allows iterating over rows","summary":"<p>Returns Indexable(SubMatrix(T)) that allows iterating over rows</p>","abstract":false,"location":{"filename":"src/matrix/iteration.cr","line_number":31,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/iteration.cr#L31"},"def":{"name":"rows","visibility":"Public","body":"Rows(T).new(self)"}},{"html_id":"rq(*,overwrite_a=false)-instance-method","name":"rq","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(*, overwrite_a = false)","args_html":"(*, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/rq_lq_ql.cr","line_number":42,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/rq_lq_ql.cr#L42"},"def":{"name":"rq","args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":0,"visibility":"Public","body":"a = overwrite_a ? self : clone\ntau = rq_initial(a)\nr = a.clone\nr.triu!\nm = a.nrows\nn = a.ncolumns\nk = {m, n}.min\nlapack(orgrq, m, n, k, a, a.nrows, tau)\na.assume!(MatrixFlags::Orthogonal)\n{r, a}\n"}},{"html_id":"rq_r(*,overwrite_a=false)-instance-method","name":"rq_r","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(*, overwrite_a = false)","args_html":"(*, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/rq_lq_ql.cr","line_number":42,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/rq_lq_ql.cr#L42"},"def":{"name":"rq_r","args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":0,"visibility":"Public","body":"a = overwrite_a ? self : clone\ntau = rq_initial(a)\na.triu!\na\n"}},{"html_id":"save_csv(filename)-instance-method","name":"save_csv","doc":"Save a matrix to CSV (comma separated values) file\nExample:\n```\nLA::GMat.rand(30, 30).save_csv(\"./test.csv\")\na = LA::GMat.load_csv(\"./test.csv\")\n```","summary":"<p>Save a matrix to CSV (comma separated values) file Example: <code>LA::GMat.rand(30, 30)<a href=\"../LA/Matrix.html#save_csv%28filename%29-instance-method\">.save_csv(&quot;./test.csv&quot;)</a> a = LA::GMat.load_csv(&quot;./test.csv&quot;)</code></p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":""}],"args_string":"(filename)","args_html":"(filename)","location":{"filename":"src/matrix/formatted_writer.cr","line_number":65,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/formatted_writer.cr#L65"},"def":{"name":"save_csv","args":[{"name":"filename","external_name":"filename","restriction":""}],"visibility":"Public","body":"File.open(filename, \"w\") do |f|\n  to_custom(f, \"\", \",\", \"\\n\", \"\\n\")\nend"}},{"html_id":"scale!(k:Number|Complex)-instance-method","name":"scale!","doc":"Perform inplace multiplication to scalar `k`","summary":"<p>Perform inplace multiplication to scalar <code>k</code></p>","abstract":false,"args":[{"name":"k","external_name":"k","restriction":"Number | Complex"}],"args_string":"(k : Number | Complex)","args_html":"(k : <a href=\"../Number.html\">Number</a> | <a href=\"../Complex.html\">Complex</a>)","location":{"filename":"src/matrix/matrix.cr","line_number":650,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L650"},"def":{"name":"scale!","args":[{"name":"k","external_name":"k","restriction":"Number | Complex"}],"visibility":"Public","body":"oldflags = flags\nmap_with_index! do |v, i, j|\n  k * v\nend\nnew_flags = oldflags.scale(k.is_a?(Complex) && (k.imag != 0))\nself\n"}},{"html_id":"schur(*,overwrite_a=false)-instance-method","name":"schur","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(*, overwrite_a = false)","args_html":"(*, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/schur.cr","line_number":12,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/schur.cr#L12"},"def":{"name":"schur","args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":0,"visibility":"Public","body":"if square?\nelse\n  raise(ArgumentError.new(\"matrix must be square\"))\nend\na = overwrite_a ? self : clone\n{% if T == Complex %}\n        w = Slice(T).new(nrows, T.new(0))\n        z = GeneralMatrix(T).new(*size)\n        lapack(gees, 'V'.ord.to_u8, 'N'.ord.to_u8, nil, nrows, a, ncolumns, sdim, w.to_unsafe.as(LibCBLAS::ComplexDouble*), z, ncolumns, worksize: [nrows])\n        a.clear_flags\n        a.assume! MatrixFlags::UpperTriangular\n        z.assume! MatrixFlags::Orthogonal\n        return {a, z}\n      {% else %}\n        wr = Slice(T).new(nrows)\n        wi = Slice(T).new(nrows)\n        z = GeneralMatrix(T).new(*size)\n        lapack(gees, 'V'.ord.to_u8, 'N'.ord.to_u8, nil, nrows, a, ncolumns, sdim, wr, wi, z, ncolumns)\n        a.clear_flags\n        a.detect MatrixFlags::UpperTriangular\n        z.assume! MatrixFlags::Orthogonal\n        return {a, z}\n      {% end %}\n"}},{"html_id":"shape-instance-method","name":"shape","doc":"Returns shape of matrix in a form of tuple {nrows, ncolumns}","summary":"<p>Returns shape of matrix in a form of tuple {nrows, ncolumns}</p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":71,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L71"},"def":{"name":"shape","visibility":"Public","body":"size"}},{"html_id":"sinhm-instance-method","name":"sinhm","abstract":false,"location":{"filename":"src/linalg/matfun.cr","line_number":39,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L39"},"def":{"name":"sinhm","visibility":"Public","body":"0.5 * (self.expm - (-self).expm)"}},{"html_id":"sinm-instance-method","name":"sinm","abstract":false,"location":{"filename":"src/linalg/matfun.cr","line_number":23,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L23"},"def":{"name":"sinm","visibility":"Public","body":"{% if T == Complex %}\n        -0.5.i*((1.i*self).expm - (-1.i*self).expm)\n      {% else %}\n        GMatComplex.new(1.i*self).expm.to_imag\n      {% end %}"}},{"html_id":"size:Tuple(Int32,Int32)-instance-method","name":"size","doc":"Returns shape of matrix in a form of tuple {nrows, ncolumns}","summary":"<p>Returns shape of matrix in a form of tuple {nrows, ncolumns}</p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":66,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L66"},"def":{"name":"size","return_type":"Tuple(Int32, Int32)","visibility":"Public","body":"{nrows, ncolumns}"}},{"html_id":"solve(b:self,*,overwrite_a=false,overwrite_b=false)-instance-method","name":"solve","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"self"},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"args_string":"(b : self, *, overwrite_a = false, overwrite_b = false)","args_html":"(b : <span class=\"k\">self</span>, *, overwrite_a = <span class=\"n\">false</span>, overwrite_b = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":144,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L144"},"def":{"name":"solve","args":[{"name":"b","external_name":"b","restriction":"self"},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""}],"splat_index":1,"visibility":"Public","body":"if nrows == b.nrows\nelse\n  raise(ArgumentError.new(\"nrows of a and b must match\"))\nend\nif square?\nelse\n  raise(ArgumentError.new(\"a must be square\"))\nend\na = overwrite_b ? self : self.clone\nx = overwrite_b ? b : b.clone\nn = nrows\nif flags.triangular?\n  lapack(trtrs, uplo, 'N'.ord.to_u8, 'N'.ord.to_u8, n, b.nrows, a, n, x, b.nrows)\nelse\n  if flags.positive_definite?\n    lapack(posv, 'U'.ord.to_u8, n, b.ncolumns, a, n, x, b.nrows)\n  else\n    if flags.hermitian?\n      {% if T == Complex %}\n          ipiv = Slice(Int32).new(n)\n          lapack(hesv, uplo, n, b.ncolumns, a, n, ipiv, x, b.nrows)\n        {% end %}\n    else\n      if flags.symmetric?\n        ipiv = Slice(Int32).new(n)\n        lapack(sysv, uplo, n, b.ncolumns, a, n, ipiv, x, b.nrows)\n      else\n        ipiv = Slice(Int32).new(n)\n        lapack(gesv, n, b.ncolumns, a, n, ipiv, x, b.nrows)\n      end\n    end\n  end\nend\na.clear_flags\nx.clear_flags\nx\n"}},{"html_id":"solvels(b:self,*,overwrite_a=false,overwrite_b=false,cond=-1)-instance-method","name":"solvels","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"self"},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""},{"name":"cond","default_value":"-1","external_name":"cond","restriction":""}],"args_string":"(b : self, *, overwrite_a = false, overwrite_b = false, cond = -1)","args_html":"(b : <span class=\"k\">self</span>, *, overwrite_a = <span class=\"n\">false</span>, overwrite_b = <span class=\"n\">false</span>, cond = <span class=\"n\">-1</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":183,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L183"},"def":{"name":"solvels","args":[{"name":"b","external_name":"b","restriction":"self"},{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""},{"name":"overwrite_b","default_value":"false","external_name":"overwrite_b","restriction":""},{"name":"cond","default_value":"-1","external_name":"cond","restriction":""}],"splat_index":1,"visibility":"Public","body":"if nrows == b.nrows\nelse\n  raise(ArgumentError.new(\"nrows of a and b must match\"))\nend\na = overwrite_a ? self : self.clone\nif ncolumns > nrows\n  x = GeneralMatrix(T).new(ncolumns, b.ncolumns) do |r, c|\n    r < nrows ? b.unsafe_fetch(r, c) : T.new(0)\n  end\nelse\n  x = overwrite_b ? b : b.clone\nend\nlapack(gels, 'N'.ord.to_u8, nrows, ncolumns, b.ncolumns, a, nrows, x, x.nrows)\na.clear_flags\nx.clear_flags\nx\n"}},{"html_id":"square?-instance-method","name":"square?","doc":"Returns True if matrix is square and False otherwise","summary":"<p>Returns True if matrix is square and False otherwise</p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":294,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L294"},"def":{"name":"square?","visibility":"Public","body":"nrows == ncolumns"}},{"html_id":"sum(axis:Axis)-instance-method","name":"sum","doc":"Perform sum over given `axis`","summary":"<p>Perform sum over given <code>axis</code></p>","abstract":false,"args":[{"name":"axis","external_name":"axis","restriction":"Axis"}],"args_string":"(axis : Axis)","args_html":"(axis : <a href=\"../LA/Axis.html\">Axis</a>)","location":{"filename":"src/matrix/matrix.cr","line_number":676,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L676"},"def":{"name":"sum","args":[{"name":"axis","external_name":"axis","restriction":"Axis"}],"visibility":"Public","body":"reduce(axis, 0) do |memo, e|\n  memo + e\nend"}},{"html_id":"svd(*,overwrite_a=false)-instance-method","name":"svd","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(*, overwrite_a = false)","args_html":"(*, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":233,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L233"},"def":{"name":"svd","args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":0,"visibility":"Public","body":"a = overwrite_a ? self : self.clone\nm = nrows\nn = ncolumns\nmn = {m, n}.min\nmx = {m, n}.max\ns = of_real_type(Array, mn)\nu = GeneralMatrix(T).new(m, m)\nvt = GeneralMatrix(T).new(n, n)\nlapack(gesdd, 'A'.ord.to_u8, m, n, a, nrows, s, u, m, vt, n, worksize: [{((5 * mn) * mn) + (5 * mn), (((2 * mx) * mn) + ((2 * mn) * mn)) + mn}.max, 8 * mn])\na.clear_flags\nreturn {u, s, vt}\n"}},{"html_id":"svdvals(*,overwrite_a=false)-instance-method","name":"svdvals","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"args_string":"(*, overwrite_a = false)","args_html":"(*, overwrite_a = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/linalg.cr","line_number":247,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L247"},"def":{"name":"svdvals","args":[{"name":"","external_name":"","restriction":""},{"name":"overwrite_a","default_value":"false","external_name":"overwrite_a","restriction":""}],"splat_index":0,"visibility":"Public","body":"a = overwrite_a ? self : self.clone\nm = nrows\nn = ncolumns\nmn = {m, n}.min\nmx = {m, n}.max\ns = of_real_type(Array, mn)\nlapack(gesdd, 'N'.ord.to_u8, m, n, a, nrows, s, nil, m, nil, n, worksize: [5 * mn, 8 * mn])\na.clear_flags\ns\n"}},{"html_id":"t-instance-method","name":"t","doc":"alias to `#transpose`","summary":"<p>alias to <code><a href=\"../LA/Matrix.html#transpose-instance-method\">#transpose</a></code></p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":525,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L525"},"def":{"name":"t","visibility":"Public","body":"transpose"}},{"html_id":"t!-instance-method","name":"t!","doc":"alias to `#transpose!`","summary":"<p>alias to <code>#transpose!</code></p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":530,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L530"},"def":{"name":"t!","visibility":"Public","body":"transpose!"}},{"html_id":"tanhm-instance-method","name":"tanhm","abstract":false,"location":{"filename":"src/linalg/matfun.cr","line_number":43,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L43"},"def":{"name":"tanhm","visibility":"Public","body":"self.sinhm * self.coshm.inv!"}},{"html_id":"tanm-instance-method","name":"tanm","abstract":false,"location":{"filename":"src/linalg/matfun.cr","line_number":31,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/matfun.cr#L31"},"def":{"name":"tanm","visibility":"Public","body":"self.sinm * self.cosm.inv!"}},{"html_id":"to_custom(io,prefix,columns_separator,rows_separator,postfix)-instance-method","name":"to_custom","doc":"to_custom(io, \"[\", \",\", \"],[\", \"]\")\nConverts a matrix to string with custom format.\nExample:\n```\na = LA::GMat[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nstr = String.build do |io|\n  a.to_custom(io, prefix: \"(\", columns_separator: \",\", rows_separator: \"|\", postfix: \")\")\nend\nstr # => \"(1,2,3|4,5,6|7,8,9)\"\n```","summary":"<p>to_custom(io, &quot;[&quot;, &quot;,&quot;, &quot;],[&quot;, &quot;]&quot;) Converts a matrix to string with custom format.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""},{"name":"prefix","external_name":"prefix","restriction":""},{"name":"columns_separator","external_name":"columns_separator","restriction":""},{"name":"rows_separator","external_name":"rows_separator","restriction":""},{"name":"postfix","external_name":"postfix","restriction":""}],"args_string":"(io, prefix, columns_separator, rows_separator, postfix)","args_html":"(io, prefix, columns_separator, rows_separator, postfix)","location":{"filename":"src/matrix/formatted_writer.cr","line_number":15,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/formatted_writer.cr#L15"},"def":{"name":"to_custom","args":[{"name":"io","external_name":"io","restriction":""},{"name":"prefix","external_name":"prefix","restriction":""},{"name":"columns_separator","external_name":"columns_separator","restriction":""},{"name":"rows_separator","external_name":"rows_separator","restriction":""},{"name":"postfix","external_name":"postfix","restriction":""}],"visibility":"Public","body":"each_with_index(all: true) do |v, r, c|\n  if c > 0\n    io << columns_separator\n  else\n    if r > 0\n      io << rows_separator\n    else\n      io << prefix\n    end\n  end\n  io << v\nend\nio << postfix\n"}},{"html_id":"to_custom(prefix,columns_separator,rows_separator,postfix)-instance-method","name":"to_custom","doc":"to_custom(io, \"[\", \",\", \"],[\", \"]\")\nConverts a matrix to string with custom format.\nExample:\n```\na = LA::GMat[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nstr = a.to_custom(prefix: \"(\", columns_separator: \",\", rows_separator: \"|\", postfix: \")\")\nstr # => \"(1,2,3|4,5,6|7,8,9)\"\n```","summary":"<p>to_custom(io, &quot;[&quot;, &quot;,&quot;, &quot;],[&quot;, &quot;]&quot;) Converts a matrix to string with custom format.</p>","abstract":false,"args":[{"name":"prefix","external_name":"prefix","restriction":""},{"name":"columns_separator","external_name":"columns_separator","restriction":""},{"name":"rows_separator","external_name":"rows_separator","restriction":""},{"name":"postfix","external_name":"postfix","restriction":""}],"args_string":"(prefix, columns_separator, rows_separator, postfix)","args_html":"(prefix, columns_separator, rows_separator, postfix)","location":{"filename":"src/matrix/formatted_writer.cr","line_number":37,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/formatted_writer.cr#L37"},"def":{"name":"to_custom","args":[{"name":"prefix","external_name":"prefix","restriction":""},{"name":"columns_separator","external_name":"columns_separator","restriction":""},{"name":"rows_separator","external_name":"rows_separator","restriction":""},{"name":"postfix","external_name":"postfix","restriction":""}],"visibility":"Public","body":"String.build do |io|\n  to_custom(io, prefix, columns_separator, rows_separator, postfix)\nend"}},{"html_id":"to_general-instance-method","name":"to_general","doc":"Creates general matrix with same content. Useful for banded\\sparse matrices","summary":"<p>Creates general matrix with same content.</p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":76,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L76"},"def":{"name":"to_general","visibility":"Public","body":"GeneralMatrix(T).new(nrows, ncolumns, flags) do |i, j|\n  unsafe_fetch(i, j)\nend"}},{"html_id":"to_imag-instance-method","name":"to_imag","doc":"Converts complex matrix to imaginary part","summary":"<p>Converts complex matrix to imaginary part</p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":92,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L92"},"def":{"name":"to_imag","visibility":"Public","body":"{% if T == Complex %}{% else %}\n        {% raise(\"Only complex matrices have #to_imag\") %}\n      {% end %}\nnew_flags = flags.imag\nmap_f64(&.imag).tap do |r|\n  r.flags = new_flags\nend\n"}},{"html_id":"to_matlab(io)-instance-method","name":"to_matlab","doc":"Converts a matrix to matlab format","summary":"<p>Converts a matrix to matlab format</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/matrix/formatted_writer.cr","line_number":44,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/formatted_writer.cr#L44"},"def":{"name":"to_matlab","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_custom(io, \"[\", \", \", \"; \", \"]\")"}},{"html_id":"to_matlab-instance-method","name":"to_matlab","doc":"Converts a matrix to matlab format string\nExample:\n```\nLA::GMat[[1, 2, 3], [4, 5, 6], [7, 8, 9]].to_matlab # => \"[1,2,3; 4,5,6; 7,8,9]\"\n```","summary":"<p>Converts a matrix to matlab format string Example: <code><a href=\"../LA/GMat.html\">LA::GMat</a>[[1, 2, 3], [4, 5, 6], [7, 8, 9]]<a href=\"../LA/Matrix.html#to_matlab-instance-method\">.to_matlab</a> # =&gt; &quot;[1,2,3; 4,5,6; 7,8,9]&quot;</code></p>","abstract":false,"location":{"filename":"src/matrix/formatted_writer.cr","line_number":53,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/formatted_writer.cr#L53"},"def":{"name":"to_matlab","visibility":"Public","body":"String.build do |io|\n  to_matlab(io)\nend"}},{"html_id":"to_real-instance-method","name":"to_real","doc":"Converts complex matrix to real part","summary":"<p>Converts complex matrix to real part</p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":83,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L83"},"def":{"name":"to_real","visibility":"Public","body":"{% if T == Complex %}{% else %}\n        {% raise(\"Only complex matrices have #to_real\") %}\n      {% end %}\nnew_flags = flags.real\nmap_f64(&.real).tap do |r|\n  r.flags = new_flags\nend\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","doc":"Converts matrix to string, with linefeeds before and after matrix:\n\nOutput looks like:\n```\n[1, 2, 3, .... 10]\n[11, 12, 13, .... 20]\n...\n[91, 92, 93, .... 100]\n```","summary":"<p>Converts matrix to string, with linefeeds before and after matrix:</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/matrix/matrix.cr","line_number":231,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L231"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_custom(io, \"\\n[\", \", \", \"]\\n[\", \"]\\n\\n\")"}},{"html_id":"to_unsafe-instance-method","name":"to_unsafe","doc":"Returns pointer to underlying data\n\nStorage format depends of matrix type\nThis method raises at runtime if matrix doesn't have raw pointer","summary":"<p>Returns pointer to underlying data</p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":61,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L61"},"def":{"name":"to_unsafe","visibility":"Public","body":"raise(ArgumentError.new(\"#{self.class} can't be passed unsafe!\"))"}},{"html_id":"tolerance-instance-method","name":"tolerance","doc":"Returns estimated tolerance of equality\\inequality\n\nThis value is used by default in `#almost_eq` compare","summary":"<p>Returns estimated tolerance of equality\\inequality</p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":406,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L406"},"def":{"name":"tolerance","visibility":"Public","body":"amax = 0.0\neach do |value|\n  vabs = {% if T == Complex %}value.real.abs + value.imag.abs{% else %}value.abs{% end %}\n  if amax < vabs\n    amax = vabs\n  end\nend\nif amax < 1.0\n  amax = 1.0\nend\n(((amax * nrows) * ncolumns) * 10) * (real_type_const(EPSILON))\n"}},{"html_id":"tr_mult!(a:Matrix(T),*,alpha=1.0,left=false)-instance-method","name":"tr_mult!","doc":"performs b = alpha*a*b or b = alpha*b*a (BLAS routine trmm)\n\n`a` must be a square triangular `GeneralMatrix(T)`\n\nif `left` is true, `alpha*a*b` is calculated, otherwise `alpha*b*a`","summary":"<p>performs b = alpha<em>a</em>b or b = alpha<em>b</em>a (BLAS routine trmm)</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Matrix(T)"},{"name":"","external_name":"","restriction":""},{"name":"alpha","default_value":"1.0","external_name":"alpha","restriction":""},{"name":"left","default_value":"false","external_name":"left","restriction":""}],"args_string":"(a : Matrix(T), *, alpha = 1.0, left = false)","args_html":"(a : <a href=\"../LA/Matrix.html\">Matrix</a>(T), *, alpha = <span class=\"n\">1.0</span>, left = <span class=\"n\">false</span>)","location":{"filename":"src/linalg/mult.cr","line_number":80,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/mult.cr#L80"},"def":{"name":"tr_mult!","args":[{"name":"a","external_name":"a","restriction":"Matrix(T)"},{"name":"","external_name":"","restriction":""},{"name":"alpha","default_value":"1.0","external_name":"alpha","restriction":""},{"name":"left","default_value":"false","external_name":"left","restriction":""}],"splat_index":1,"visibility":"Public","body":"if self.is_a?(GeneralMatrix(T))\nelse\n  raise(\"GeneralMatrix required for tr_mult!\")\nend\nif ncolumns != a.nrows\n  raise(ArgumentError.new(\"matrix size should match\"))\nend\nif a.square? && a.flags.triangular?\nelse\n  raise(\"tr_mult! require square triangular matrix\")\nend\naa = a.is_a?(GeneralMatrix(T)) ? a : a.to_general\nno = LibCBLAS::CblasTranspose::CblasNoTrans\ncalpha = T.new(alpha)\nauplo = aa.flags.upper_triangular? ? LibCBLAS::CblasUplo::CblasUpper : LibCBLAS::CblasUplo::CblasLower\nside = left ? LibCBLAS::CblasSide::CblasLeft : LibCBLAS::CblasSide::CblasRight\nblas(tr, mm, side, auplo, no, LibCBLAS::CblasDiag::CblasNonUnit, self.nrows, self.ncolumns, blas_const(calpha), aa, aa.nrows, self, nrows)\nself\n"}},{"html_id":"trace-instance-method","name":"trace","doc":"Returns sum of diagonal elements (trace of matrix)","summary":"<p>Returns sum of diagonal elements (trace of matrix)</p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":627,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L627"},"def":{"name":"trace","visibility":"Public","body":"diag.sum"}},{"html_id":"transpose-instance-method","name":"transpose","doc":"Returns transposed matrix","summary":"<p>Returns transposed matrix</p>","abstract":false,"location":{"filename":"src/matrix/matrix.cr","line_number":177,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L177"},"def":{"name":"transpose","visibility":"Public","body":"if flags.symmetric?\n  return clone\nend\nGeneralMatrix(T).new(ncolumns, nrows, flags.transpose) do |i, j|\n  unsafe_fetch(j, i)\nend\n"}},{"html_id":"tril(k=0)-instance-method","name":"tril","doc":"Same as tril in scipy - returns lower triangular or trapezoidal part of matrix\n\nReturns a matrix with all elements above k-th diagonal zeroed","summary":"<p>Same as tril in scipy - returns lower triangular or trapezoidal part of matrix</p>","abstract":false,"args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"args_string":"(k = 0)","args_html":"(k = <span class=\"n\">0</span>)","location":{"filename":"src/matrix/matrix.cr","line_number":205,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L205"},"def":{"name":"tril","args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"visibility":"Public","body":"x = GeneralMatrix(T).new(nrows, ncolumns, flags.tril(k <= 0, square?)) do |i, j|\n  i >= (j - k) ? unsafe_fetch(i, j) : 0\nend\nx\n"}},{"html_id":"tril!(k=0)-instance-method","name":"tril!","doc":"Works like a tril in scipy - remove all elements above k-diagonal","summary":"<p>Works like a tril in scipy - remove all elements above k-diagonal</p>","abstract":false,"args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"args_string":"(k = 0)","args_html":"(k = <span class=\"n\">0</span>)","location":{"filename":"src/matrix/matrix.cr","line_number":611,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L611"},"def":{"name":"tril!","args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"visibility":"Public","body":"oldflags = flags\nmap_with_index! do |v, i, j|\n  i < (j - k) ? 0 : v\nend\nself.flags = oldflags.tril(k <= 0, square?)\nself\n"}},{"html_id":"triu(k=0)-instance-method","name":"triu","doc":"Same as triu in scipy - returns upper triangular or trapezoidal part of matrix\n\nReturns a matrix with all elements below k-th diagonal zeroed","summary":"<p>Same as triu in scipy - returns upper triangular or trapezoidal part of matrix</p>","abstract":false,"args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"args_string":"(k = 0)","args_html":"(k = <span class=\"n\">0</span>)","location":{"filename":"src/matrix/matrix.cr","line_number":215,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L215"},"def":{"name":"triu","args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"visibility":"Public","body":"x = GeneralMatrix(T).new(nrows, ncolumns, flags.triu(k >= 0, square?)) do |i, j|\n  i <= (j - k) ? unsafe_fetch(i, j) : 0\nend\nx\n"}},{"html_id":"triu!(k=0)-instance-method","name":"triu!","doc":"Works like a triu in scipy - remove all elements below k-diagonal","summary":"<p>Works like a triu in scipy - remove all elements below k-diagonal</p>","abstract":false,"args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"args_string":"(k = 0)","args_html":"(k = <span class=\"n\">0</span>)","location":{"filename":"src/matrix/matrix.cr","line_number":619,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L619"},"def":{"name":"triu!","args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"visibility":"Public","body":"oldflags = flags\nmap_with_index! do |v, i, j|\n  i > (j - k) ? 0 : v\nend\nself.flags = oldflags.triu(k >= 0, square?)\nself\n"}},{"html_id":"vcat(other)-instance-method","name":"vcat","doc":"Returns vertical concatenation with another matrix","summary":"<p>Returns vertical concatenation with another matrix</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/matrix/matrix.cr","line_number":562,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/matrix.cr#L562"},"def":{"name":"vcat","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"cat(other, Axis::Columns)"}}],"macros":[{"html_id":"lapack(name,*args,worksize=nil)-macro","name":"lapack","doc":"Complex utility macros that simplifies calling certain LAPACK functions\nIt substitute first letter, allocate workareas, raise exception if return value is negative\nCheck source to see supported functions\nExample:\n```\n# Calling *geev to calculate eigenvalues\nlapack(geev, 'N'.ord.to_u8, 'N'.ord.to_u8, nrows, a, nrows,\n  vals.to_unsafe.as(LibCBLAS::ComplexDouble*),\n  Pointer(LibCBLAS::ComplexDouble).null, nrows,\n  Pointer(LibCBLAS::ComplexDouble).null, nrows, worksize: [2*nrows])\n```\nNote that it should be called only from methods of `Matrix` or its descendants","summary":"<p>Complex utility macros that simplifies calling certain LAPACK functions It substitute first letter, allocate workareas, raise exception if return value is negative Check source to see supported functions Example: <code># Calling *geev to calculate eigenvalues lapack(geev, 'N'.ord.to_u8, 'N'.ord.to_u8, nrows, a, nrows, vals.to_unsafe.as(LibCBLAS::ComplexDouble*), Pointer(LibCBLAS::ComplexDouble).null, nrows, Pointer(LibCBLAS::ComplexDouble).null, nrows, worksize: [2*nrows])</code> Note that it should be called only from methods of <code><a href=\"../LA/Matrix.html\">Matrix</a></code> or its descendants</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"args","external_name":"args","restriction":""},{"name":"worksize","default_value":"nil","external_name":"worksize","restriction":""}],"args_string":"(name, *args, worksize = nil)","args_html":"(name, *args, worksize = <span class=\"n\">nil</span>)","location":{"filename":"src/linalg/lapack_helper.cr","line_number":79,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lapack_helper.cr#L79"},"def":{"name":"lapack","args":[{"name":"name","external_name":"name","restriction":""},{"name":"args","external_name":"args","restriction":""},{"name":"worksize","default_value":"nil","external_name":"worksize","restriction":""}],"splat_index":1,"visibility":"Public","body":"      \n{% lapack_args = {\"gbtrf\" => {5 => ARG_MATRIX, 7 => ARG_MATRIX}, \"gbsv\" => {5 => ARG_MATRIX, 7 => ARG_MATRIX, 8 => ARG_MATRIX}, \"gebal\" => {3 => ARG_MATRIX, 5 => ARG_INTOUT, 6 => ARG_INTOUT, 7 => ARG_MATRIX}, \"gees\" => {3 => ARG_MATRIX, 5 => ARG_MATRIX, 7 => ARG_INTOUT, 8 => ARG_MATRIX, 9 => ARG_MATRIX, 10 => ARG_MATRIX}, \"geev\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX, 7 => ARG_MATRIX, 8 => ARG_MATRIX, 10 => ARG_MATRIX}, \"gehrd\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX}, \"gels\" => {5 => ARG_MATRIX, 7 => ARG_MATRIX}, \"gelsd\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX, 8 => ARG_MATRIX, 10 => ARG_INTOUT}, \"gelsy\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX, 8 => ARG_MATRIX, 10 => ARG_INTOUT}, \"geqp3\" => {3 => ARG_MATRIX, 5 => ARG_MATRIX, 6 => ARG_MATRIX}, \"geqrf\" => {3 => ARG_MATRIX, 5 => ARG_MATRIX}, \"gerqf\" => {3 => ARG_MATRIX, 5 => ARG_MATRIX}, \"gelqf\" => {3 => ARG_MATRIX, 5 => ARG_MATRIX}, \"geqlf\" => {3 => ARG_MATRIX, 5 => ARG_MATRIX}, \"gesdd\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX, 7 => ARG_MATRIX, 9 => ARG_MATRIX}, \"gesv\" => {3 => ARG_MATRIX, 5 => ARG_MATRIX, 6 => ARG_MATRIX}, \"getrf\" => {3 => ARG_MATRIX, 5 => ARG_MATRIX}, \"getri\" => {2 => ARG_MATRIX, 4 => ARG_MATRIX}, \"getrs\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX, 7 => ARG_MATRIX}, \"gges\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX, 8 => ARG_MATRIX, 10 => ARG_INTOUT, 11 => ARG_MATRIX, 12 => ARG_MATRIX, 13 => ARG_MATRIX, 14 => ARG_MATRIX, 16 => ARG_MATRIX}, \"ggev\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX, 8 => ARG_MATRIX, 9 => ARG_MATRIX, 10 => ARG_MATRIX, 11 => ARG_MATRIX, 13 => ARG_MATRIX}, \"heevr\" => {5 => ARG_MATRIX, 12 => ARG_INTOUT, 13 => ARG_MATRIX, 14 => ARG_MATRIX, 16 => ARG_MATRIX}, \"hegvd\" => {5 => ARG_MATRIX, 7 => ARG_MATRIX, 9 => ARG_MATRIX}, \"hesv\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX, 7 => ARG_MATRIX}, \"hetrf\" => {3 => ARG_MATRIX, 5 => ARG_MATRIX}, \"hetri\" => {3 => ARG_MATRIX, 5 => ARG_MATRIX}, \"orghr\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX}, \"orgqr\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX}, \"orgrq\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX}, \"orglq\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX}, \"orgql\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX}, \"pbsv\" => {5 => ARG_MATRIX, 7 => ARG_MATRIX}, \"posv\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX}, \"potrf\" => {3 => ARG_MATRIX}, \"potri\" => {3 => ARG_MATRIX}, \"potrs\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX}, \"syevr\" => {5 => ARG_MATRIX, 12 => ARG_INTOUT, 13 => ARG_MATRIX, 14 => ARG_MATRIX, 16 => ARG_MATRIX}, \"sygvd\" => {5 => ARG_MATRIX, 7 => ARG_MATRIX, 9 => ARG_MATRIX}, \"sysv\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX, 7 => ARG_MATRIX}, \"sytrf\" => {3 => ARG_MATRIX, 5 => ARG_MATRIX}, \"sytri\" => {3 => ARG_MATRIX, 5 => ARG_MATRIX}, \"tbtrs\" => {7 => ARG_MATRIX, 9 => ARG_MATRIX}, \"trtri\" => {4 => ARG_MATRIX}, \"trtrs\" => {6 => ARG_MATRIX, 8 => ARG_MATRIX}}\nlapack_args_complex = {\"gees\" => {3 => ARG_MATRIX, 5 => ARG_MATRIX, 7 => ARG_INTOUT, 8 => ARG_MATRIX, 9 => ARG_MATRIX}, \"geev\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX, 7 => ARG_MATRIX, 9 => ARG_MATRIX}, \"gges\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX, 8 => ARG_MATRIX, 10 => ARG_INTOUT, 11 => ARG_MATRIX, 12 => ARG_MATRIX, 13 => ARG_MATRIX, 15 => ARG_MATRIX}, \"ggev\" => {4 => ARG_MATRIX, 6 => ARG_MATRIX, 8 => ARG_MATRIX, 9 => ARG_MATRIX, 10 => ARG_MATRIX, 12 => ARG_MATRIX}}\nlapack_worksize = {\"gees\" => {\"cwork\" => WORK_DETECT, \"rwork\" => WORK_PARAM1, \"bwork\" => WORK_EMPTY}, \"geev\" => {\"cwork\" => WORK_DETECT, \"rwork\" => WORK_PARAM1}, \"gehrd\" => {\"cwork\" => WORK_DETECT}, \"gels\" => {\"cwork\" => WORK_DETECT}, \"gelsd\" => {\"cwork\" => WORK_DETECT, \"rwork\" => WORK_DETECT_SPECIAL, \"iwork\" => WORK_DETECT_SPECIAL}, \"gelsy\" => {\"cwork\" => WORK_DETECT, \"rwork\" => WORK_PARAM1}, \"geqp3\" => {\"cwork\" => WORK_DETECT, \"rwork\" => WORK_PARAM1}, \"geqrf\" => {\"cwork\" => WORK_DETECT}, \"gerqf\" => {\"cwork\" => WORK_DETECT}, \"gelqf\" => {\"cwork\" => WORK_DETECT}, \"geqlf\" => {\"cwork\" => WORK_DETECT}, \"gesdd\" => {\"cwork\" => WORK_DETECT, \"rwork\" => WORK_PARAM1, \"iwork\" => WORK_PARAM2}, \"getri\" => {\"cwork\" => WORK_DETECT}, \"gges\" => {\"cwork\" => WORK_DETECT, \"rwork\" => WORK_PARAM1, \"bwork\" => WORK_EMPTY}, \"ggev\" => {\"cwork\" => WORK_DETECT, \"rwork\" => WORK_PARAM1}, \"heevr\" => {\"cwork\" => WORK_DETECT, \"rwork\" => WORK_DETECT, \"iwork\" => WORK_DETECT}, \"hegvd\" => {\"cwork\" => WORK_DETECT, \"rwork\" => WORK_DETECT, \"iwork\" => WORK_DETECT}, \"hesv\" => {\"cwork\" => WORK_DETECT}, \"hetrf\" => {\"cwork\" => WORK_DETECT}, \"hetri\" => {\"cwork\" => WORK_PARAM1}, \"orghr\" => {\"cwork\" => WORK_DETECT}, \"orgqr\" => {\"cwork\" => WORK_DETECT}, \"orgrq\" => {\"cwork\" => WORK_DETECT}, \"orglq\" => {\"cwork\" => WORK_DETECT}, \"orgql\" => {\"cwork\" => WORK_DETECT}, \"syevr\" => {\"cwork\" => WORK_DETECT, \"iwork\" => WORK_DETECT}, \"sygvd\" => {\"cwork\" => WORK_DETECT, \"iwork\" => WORK_DETECT}, \"sysv\" => {\"cwork\" => WORK_DETECT}, \"sytrf\" => {\"cwork\" => WORK_DETECT}, \"sytri\" => {\"cwork\" => WORK_PARAM1}}\n %}\n\n\n\n      \n{% if T == Float32\n  typ = (:s).id\nelse\n  if T == Float64\n    typ = (:d).id\n  else\n    if T == Complex\n      typ = (:z).id\n    end\n  end\nend %}\n\n      \n{% if T == Complex\n  func_args = lapack_args_complex[name.stringify] || lapack_args[name.stringify]\nelse\n  func_args = lapack_args[name.stringify]\nend %}\n\n      \n{% func_worksize = lapack_worksize[name.stringify] %}\n\n\n      \n{% if T == Complex\n  name = (name.stringify.gsub(/^(or)/, \"un\")).id\nend %}\n\n\n      \n{% for arg, index in args %}\n        {% argtype = func_args[index + 1] %}\n        {% if argtype == ARG_MATRIX %}\n        {% else %}{% if argtype == ARG_INTOUT %}\n          {{ arg }} = 0\n        {% else %}\n        %var{index} = {{ arg }}\n        {% end %}{% end %}\n      {% end %}\n\n\n      \n{% if func_worksize && ((func_worksize.values.includes?(WORK_DETECT)) || (func_worksize.values.includes?(WORK_DETECT_SPECIAL))) %}\n        #let's detect sizes\n        #1. init vars\n        {% if func_worksize[\"cwork\"] %}\n          %csize = -1\n          %cresult = T.new(0.0)\n        {% end %}\n        {% if func_worksize[\"rwork\"] %}\n          %rsize = -1\n          %rresult = of_real_type(0.0)\n        {% end %}\n        {% if func_worksize[\"iwork\"] %}\n          %isize = -1\n          %iresult = 0\n        {% end %}\n\n        # 2. do workspace query\n        %info = 0\n        LibLAPACK.{{ typ }}{{ name }}(\n          {% for arg, index in args %}\n          {% argtype = func_args[index + 1] %}\n          {% if argtype == ARG_MATRIX %}\n            {{ arg }},\n          {% else %}{% if argtype == ARG_INTOUT %}\n            pointerof({{ arg }}),\n          {% else %}\n           pointerof(%var{index}),\n          {% end %}{% end %}\n          {% end %}\n\n          {% if func_worksize %}\n            {% if func_worksize[\"cwork\"] %}\n              {% if T == Complex %} pointerof(%cresult).as(LibCBLAS::ComplexDouble*) {% else %}pointerof(%cresult) {% end %},\n               {% if func_worksize[\"cwork\"] == WORK_DETECT %}\n                 pointerof(%csize),\n               {% end %}\n            {% end %}\n            {% if (T == Complex) && func_worksize[\"rwork\"] %}\n              pointerof(%rresult),\n               {% if func_worksize[\"rwork\"] == WORK_DETECT %}\n                 pointerof(%rsize),\n               {% end %}\n            {% end %}\n            {% if func_worksize[\"iwork\"] %}\n              pointerof(%iresult),\n               {% if func_worksize[\"iwork\"] == WORK_DETECT %}\n                 pointerof(%isize),\n               {% end %}\n            {% end %}\n            {% if func_worksize[\"bwork\"] %}\n               nil,\n            {% end %}\n          {% end %}\n\n          pointerof(%info))\n         #3. set sizes\n         {% if func_worksize[\"cwork\"] == WORK_DETECT %}\n           %csize = {% if T == Complex %} %cresult.real.to_i {% else %}%cresult.to_i {% end %}\n         {% end %}\n         {% if ((T == Complex) && (func_worksize[\"rwork\"] == WORK_DETECT)) || (func_worksize[\"rwork\"] == WORK_DETECT_SPECIAL) %}\n           %rsize = %rresult.to_i\n         {% end %}\n         {% if (func_worksize[\"iwork\"] == WORK_DETECT) || (func_worksize[\"iwork\"] == WORK_DETECT_SPECIAL) %}\n           %isize = %iresult\n         {% end %}\n      {% end %}\n\n\n\n      \n{% if func_worksize %}\n        %asize = 0\n        {% if func_worksize[\"cwork\"] %}\n          {% if func_worksize[\"cwork\"] == WORK_PARAM1 %}\n            %csize = {{ worksize[0] }}\n          {% else %}{% if func_worksize[\"cwork\"] == WORK_PARAM2 %}\n            %csize = {{ worksize[1] }}\n          {% end %}{% end %}\n          %asize += %csize*sizeof(T)\n        {% end %}\n\n        {% if (T == Complex) && func_worksize[\"rwork\"] %}\n          {% if func_worksize[\"rwork\"] == WORK_PARAM1 %}\n            %rsize = {{ worksize[0] }}\n          {% else %}{% if func_worksize[\"rwork\"] == WORK_PARAM2 %}\n            %rsize = {{ worksize[1] }}\n          {% end %}{% end %}\n          %asize += %rsize*{% if T == Complex %} sizeof(Float64) {% else %} sizeof(T) {% end %}\n        {% end %}\n\n        {% if func_worksize[\"iwork\"] %}\n          {% if func_worksize[\"iwork\"] == WORK_PARAM1 %}\n            %isize = {{ worksize[0] }}\n          {% else %}{% if func_worksize[\"iwork\"] == WORK_PARAM2 %}\n            %isize = {{ worksize[1] }}\n          {% end %}{% end %}\n          %asize += %isize*sizeof(Int32)\n        {% end %}\n\n        WORK_POOL.reallocate(%asize)\n\n        {% if func_worksize[\"cwork\"] %}\n          %cbuf = alloc_type(%csize)\n        {% end %}\n\n        {% if (T == Complex) && func_worksize[\"rwork\"] %}\n          %rbuf = alloc_real_type(%rsize)\n        {% end %}\n\n        {% if func_worksize[\"iwork\"] %}\n          %ibuf = WORK_POOL.get_i32(%isize)\n        {% end %}\n\n      {% end %}\n\n\n       \n%info\n = 0\n       LibLAPACK.\n{{ typ }}\n{{ name }}\n(\n         \n{% for arg, index in args %}\n         {% argtype = func_args[index + 1] %}\n         {% if argtype == ARG_MATRIX %}\n           {{ arg }},\n         {% else %}{% if argtype == ARG_INTOUT %}\n           pointerof({{ arg }}),\n         {% else %}\n          pointerof(%var{index}),\n         {% end %}{% end %}\n         {% end %}\n\n\n         \n{% if func_worksize %}\n           {% if func_worksize[\"cwork\"] %}\n              %cbuf,\n              {% if func_worksize[\"cwork\"] == WORK_DETECT %}\n                pointerof(%csize),\n              {% end %}\n           {% end %}\n           {% if (T == Complex) && func_worksize[\"rwork\"] %}\n              %rbuf,\n              {% if func_worksize[\"rwork\"] == WORK_DETECT %}\n                pointerof(%rsize),\n              {% end %}\n           {% end %}\n           {% if func_worksize[\"iwork\"] %}\n              %ibuf,\n              {% if func_worksize[\"iwork\"] == WORK_DETECT %}\n                pointerof(%isize),\n              {% end %}\n           {% end %}\n           {% if func_worksize[\"bwork\"] %}\n              nil,\n           {% end %}\n         {% end %}\n\n\n         pointerof(\n%info\n))\n\n         \n{% if func_worksize %}\n           WORK_POOL.release\n         {% end %}\n\n      raise LinAlgError.new(\"LAPACK.\n{{ typ }}\n{{ name }}\n returned #{\n%info\n}\") if \n%info\n != 0\n    \n"}},{"html_id":"lapack_util(name,worksize,*args)-macro","name":"lapack_util","doc":"Utility macros that simplifies calling certain LAPACK functions\nArguments that point to matrix should be passed as `matrix(arg)`\nExample:\n```\n# Calling *lange to calculate infinity-norm\nlapack_util(lange, worksize, 'I', m.nrows, m.ncolumns, matrix(m), m.nrows)\n```\nNote that it should be called only from methods of `Matrix` or its descendants","summary":"<p>Utility macros that simplifies calling certain LAPACK functions Arguments that point to matrix should be passed as <code>matrix(arg)</code> Example: <code># Calling *lange to calculate infinity-norm lapack_util(lange, worksize, 'I', m.nrows, m.ncolumns, matrix(m), m.nrows)</code> Note that it should be called only from methods of <code><a href=\"../LA/Matrix.html\">Matrix</a></code> or its descendants</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"worksize","external_name":"worksize","restriction":""},{"name":"args","external_name":"args","restriction":""}],"args_string":"(name, worksize, *args)","args_html":"(name, worksize, *args)","location":{"filename":"src/linalg/lapack_helper.cr","line_number":37,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/lapack_helper.cr#L37"},"def":{"name":"lapack_util","args":[{"name":"name","external_name":"name","restriction":""},{"name":"worksize","external_name":"worksize","restriction":""},{"name":"args","external_name":"args","restriction":""}],"splat_index":2,"visibility":"Public","body":"      WORK_POOL.reallocate(worksize*\n{% if T == Complex %} sizeof(Float64) {% else %} sizeof(T) {% end %}\n)\n      \n%buf\n = alloc_real_type(worksize)\n      \n{% if T == Float32\n  typ = (:s).id\nelse\n  if T == Float64\n    typ = (:d).id\n  else\n    if T == Complex\n      typ = (:z).id\n    end\n  end\nend %}\n\n\n      \n{% for arg, index in args %}\n        {% if !(arg.stringify =~ (/^matrix\\(.*\\)$/)) %}\n          %var{index} = {{ arg }}\n        {% end %}\n      {% end %}\n\n\n      \n%result\n = LibLAPACK.\n{{ typ }}\n{{ name }}\n(\n        \n{% for arg, index in args %}\n          {% if !(arg.stringify =~ (/^matrix\\(.*\\)$/)) %}\n            pointerof(%var{index}),\n          {% else %}\n            {{ (arg.stringify.gsub(/^matrix\\((.*)\\)$/, \"(\\\\1)\")).id }},\n          {% end %}\n        {% end %}\n\n        \n%buf\n)\n      WORK_POOL.release\n      \n%result\n\n    \n"}}],"types":[{"html_id":"linalg/LA/Matrix/Columns","path":"LA/Matrix/Columns.html","kind":"struct","full_name":"LA::Matrix::Columns(T)","name":"Columns","abstract":false,"superclass":{"html_id":"linalg/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"linalg/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"linalg/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"linalg/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"linalg/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"linalg/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/matrix/iteration.cr","line_number":30,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/iteration.cr#L30"},{"filename":"src/matrix/iteration.cr","line_number":35,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/iteration.cr#L35"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"linalg/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"namespace":{"html_id":"linalg/LA/Matrix","kind":"class","full_name":"LA::Matrix(T)","name":"Matrix"},"doc":"Indexable(SubMatrix(T)) that allows iterating over columns","summary":"<p>Indexable(SubMatrix(T)) that allows iterating over columns</p>","instance_methods":[{"html_id":"[](range:Range)-instance-method","name":"[]","doc":"Returns `SubMatrix` that consist of given columns\n\nTODO - open ranges\n\nExample:\n```\nm = GMat32.new([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\nm.columns[1...3].should eq m[0..2, 1..2]\n```","summary":"<p>Returns <code><a href=\"../../LA/SubMatrix.html\">SubMatrix</a></code> that consist of given columns</p>","abstract":false,"args":[{"name":"range","external_name":"range","restriction":"Range"}],"args_string":"(range : Range)","args_html":"(range : Range)","location":{"filename":"src/matrix/iteration.cr","line_number":45,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/iteration.cr#L45"},"def":{"name":"[]","args":[{"name":"range","external_name":"range","restriction":"Range"}],"visibility":"Public","body":"start = range.begin + (range.begin < 0 ? @base.ncolumns : 0)\nsize = (range.end - start) + (range.end < 0 ? @base.ncolumns : 0)\nSubMatrix(T).new(@base, {0, start}, {@base.nrows, size})\n"}}]},{"html_id":"linalg/LA/Matrix/Rows","path":"LA/Matrix/Rows.html","kind":"struct","full_name":"LA::Matrix::Rows(T)","name":"Rows","abstract":false,"superclass":{"html_id":"linalg/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"linalg/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"linalg/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"linalg/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"linalg/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"linalg/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/matrix/iteration.cr","line_number":31,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/iteration.cr#L31"},{"filename":"src/matrix/iteration.cr","line_number":52,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/iteration.cr#L52"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"linalg/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"namespace":{"html_id":"linalg/LA/Matrix","kind":"class","full_name":"LA::Matrix(T)","name":"Matrix"},"doc":"Indexable(SubMatrix(T)) that allows iterating over rows","summary":"<p>Indexable(SubMatrix(T)) that allows iterating over rows</p>","instance_methods":[{"html_id":"[](range:Range)-instance-method","name":"[]","doc":"Returns `SubMatrix` that consist of given rows\n\nTODO - open ranges\n\nExample:\n```\nm = GMat32.new([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\nm.rows[1..2].should eq m[1..2, 0..3]\n```","summary":"<p>Returns <code><a href=\"../../LA/SubMatrix.html\">SubMatrix</a></code> that consist of given rows</p>","abstract":false,"args":[{"name":"range","external_name":"range","restriction":"Range"}],"args_string":"(range : Range)","args_html":"(range : Range)","location":{"filename":"src/matrix/iteration.cr","line_number":62,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/iteration.cr#L62"},"def":{"name":"[]","args":[{"name":"range","external_name":"range","restriction":"Range"}],"visibility":"Public","body":"size = range.size\nif range.end < 0\n  size = size + @base.nrows\nend\nSubMatrix(T).new(@base, {range.begin, 0}, {size, @base.ncolumns})\n"}}]}]},{"html_id":"linalg/LA/MatrixFlags","path":"LA/MatrixFlags.html","kind":"enum","full_name":"LA::MatrixFlags","name":"MatrixFlags","abstract":false,"ancestors":[{"html_id":"linalg/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"linalg/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"linalg/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/matrix/flags.cr","line_number":20,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flags.cr#L20"}],"repository_name":"linalg","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Symmetric","name":"Symmetric","value":"1","doc":"This flag shows that matrix is symmetric (equal to its transpose)","summary":"<p>This flag shows that matrix is symmetric (equal to its transpose)</p>"},{"id":"Hermitian","name":"Hermitian","value":"2","doc":"This flag shows that matrix is hermitian (equal to its conjtranspose))","summary":"<p>This flag shows that matrix is hermitian (equal to its conjtranspose))</p>"},{"id":"PositiveDefinite","name":"PositiveDefinite","value":"4","doc":"This flag shows that matrix is [positive definite](https://en.wikipedia.org/wiki/Definite_matrix)","summary":"<p>This flag shows that matrix is <a href=\"https://en.wikipedia.org/wiki/Definite_matrix\">positive definite</a></p>"},{"id":"Orthogonal","name":"Orthogonal","value":"8","doc":"This flag shows that matrix is orthogonal (its columns and rows are orthonormal vectors)","summary":"<p>This flag shows that matrix is orthogonal (its columns and rows are orthonormal vectors)</p>"},{"id":"UpperTriangular","name":"UpperTriangular","value":"16","doc":"This flag shows that matrix is upper triangular (all the entries below the main diagonal are zero)","summary":"<p>This flag shows that matrix is upper triangular (all the entries below the main diagonal are zero)</p>"},{"id":"LowerTriangular","name":"LowerTriangular","value":"32","doc":"This flag shows that matrix is lower triangular (all the entries above the main diagonal are zero)","summary":"<p>This flag shows that matrix is lower triangular (all the entries above the main diagonal are zero)</p>"},{"id":"Triangular","name":"Triangular","value":"48","doc":"Combination of `UpperTriangular | LowerTriangular` for internal use","summary":"<p>Combination of <code><a href=\"../LA/MatrixFlags.html#UpperTriangular\">UpperTriangular</a> | <a href=\"../LA/MatrixFlags.html#LowerTriangular\">LowerTriangular</a></code> for internal use</p>"}],"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"},"doc":"MatrixFlags represent properties of matrix (symmetric, positive definite etc)\nThey are used to automatically select faster algorithms from LAPACK.\nFlags are partially enforced by runtime checks, with the possibility of user override.\nExamples:\n```\na.detect(MatrixFlags::Symmetric) # will perform a check and if matrix is symmetric, corresponding flag will be set\na.detect # perform check for all flags\na.assume!(MatrixFlags::Symmetric) # we know that matrix is symmetric, so we use `assume!` to set flag without check\na.transpose # will return clone of matrix, as for symmetrix matrices `a == a.transpose`\nSimple operations correctly update flags:\n(a + Mat.diag(*a.size)).flags.symmetric # => True\nBut direct access reset flags\na[1,1] = 1\na.flags.symmetric? # => False\n```\n\nNote that simple flag access doesn't perform check, so `a.flags.symmetric?` can be false for symmetric matrix, unless you called `detect` before.","summary":"<p>MatrixFlags represent properties of matrix (symmetric, positive definite etc) They are used to automatically select faster algorithms from LAPACK.</p>","instance_methods":[{"html_id":"diagonal?-instance-method","name":"diagonal?","doc":"returns true if matrix is diagonal (both UpperTriangular and LowerTriangular)","summary":"<p>returns true if matrix is diagonal (both UpperTriangular and LowerTriangular)</p>","abstract":false,"location":{"filename":"src/matrix/flags.cr","line_number":49,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flags.cr#L49"},"def":{"name":"diagonal?","visibility":"Public","body":"self.upper_triangular? && self.lower_triangular?"}},{"html_id":"hermitian?-instance-method","name":"hermitian?","abstract":false,"location":{"filename":"src/matrix/flags.cr","line_number":24,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flags.cr#L24"},"def":{"name":"hermitian?","visibility":"Public","body":"self.includes?(Hermitian)"}},{"html_id":"lower_triangular?-instance-method","name":"lower_triangular?","abstract":false,"location":{"filename":"src/matrix/flags.cr","line_number":32,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flags.cr#L32"},"def":{"name":"lower_triangular?","visibility":"Public","body":"self.includes?(LowerTriangular)"}},{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/matrix/flags.cr","line_number":20,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flags.cr#L20"},"def":{"name":"none?","visibility":"Public","body":"value == 0"}},{"html_id":"orthogonal?-instance-method","name":"orthogonal?","abstract":false,"location":{"filename":"src/matrix/flags.cr","line_number":28,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flags.cr#L28"},"def":{"name":"orthogonal?","visibility":"Public","body":"self.includes?(Orthogonal)"}},{"html_id":"positive_definite?-instance-method","name":"positive_definite?","abstract":false,"location":{"filename":"src/matrix/flags.cr","line_number":26,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flags.cr#L26"},"def":{"name":"positive_definite?","visibility":"Public","body":"self.includes?(PositiveDefinite)"}},{"html_id":"symmetric?-instance-method","name":"symmetric?","abstract":false,"location":{"filename":"src/matrix/flags.cr","line_number":22,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flags.cr#L22"},"def":{"name":"symmetric?","visibility":"Public","body":"self.includes?(Symmetric)"}},{"html_id":"triangular?-instance-method","name":"triangular?","doc":"returns true if matrix is either UpperTriangular or LowerTriangular","summary":"<p>returns true if matrix is either UpperTriangular or LowerTriangular</p>","abstract":false,"location":{"filename":"src/matrix/flags.cr","line_number":44,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flags.cr#L44"},"def":{"name":"triangular?","visibility":"Public","body":"self.upper_triangular? || self.lower_triangular?"}},{"html_id":"upper_triangular?-instance-method","name":"upper_triangular?","abstract":false,"location":{"filename":"src/matrix/flags.cr","line_number":30,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/flags.cr#L30"},"def":{"name":"upper_triangular?","visibility":"Public","body":"self.includes?(UpperTriangular)"}}]},{"html_id":"linalg/LA/MatrixNorm","path":"LA/MatrixNorm.html","kind":"enum","full_name":"LA::MatrixNorm","name":"MatrixNorm","abstract":false,"ancestors":[{"html_id":"linalg/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"linalg/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"linalg/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/linalg/linalg.cr","line_number":22,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L22"}],"repository_name":"linalg","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Frobenius","name":"Frobenius","value":"0"},{"id":"One","name":"One","value":"1"},{"id":"Inf","name":"Inf","value":"2","doc":"Two","summary":"<p>Two</p>"},{"id":"MaxAbs","name":"MaxAbs","value":"3"}],"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"},"instance_methods":[{"html_id":"frobenius?-instance-method","name":"frobenius?","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":23,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L23"},"def":{"name":"frobenius?","visibility":"Public","body":"self == Frobenius"}},{"html_id":"inf?-instance-method","name":"inf?","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":26,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L26"},"def":{"name":"inf?","visibility":"Public","body":"self == Inf"}},{"html_id":"max_abs?-instance-method","name":"max_abs?","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":27,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L27"},"def":{"name":"max_abs?","visibility":"Public","body":"self == MaxAbs"}},{"html_id":"one?-instance-method","name":"one?","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":24,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L24"},"def":{"name":"one?","visibility":"Public","body":"self == One"}}]},{"html_id":"linalg/LA/PascalKind","path":"LA/PascalKind.html","kind":"enum","full_name":"LA::PascalKind","name":"PascalKind","abstract":false,"ancestors":[{"html_id":"linalg/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"linalg/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"linalg/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/matrix/special_matrix.cr","line_number":332,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L332"}],"repository_name":"linalg","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Upper","name":"Upper","value":"0"},{"id":"Lower","name":"Lower","value":"1"},{"id":"Symmetric","name":"Symmetric","value":"2"}],"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"},"instance_methods":[{"html_id":"lower?-instance-method","name":"lower?","abstract":false,"location":{"filename":"src/matrix/special_matrix.cr","line_number":334,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L334"},"def":{"name":"lower?","visibility":"Public","body":"self == Lower"}},{"html_id":"symmetric?-instance-method","name":"symmetric?","abstract":false,"location":{"filename":"src/matrix/special_matrix.cr","line_number":335,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L335"},"def":{"name":"symmetric?","visibility":"Public","body":"self == Symmetric"}},{"html_id":"upper?-instance-method","name":"upper?","abstract":false,"location":{"filename":"src/matrix/special_matrix.cr","line_number":333,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/special_matrix.cr#L333"},"def":{"name":"upper?","visibility":"Public","body":"self == Upper"}}]},{"html_id":"linalg/LA/RankMethod","path":"LA/RankMethod.html","kind":"enum","full_name":"LA::RankMethod","name":"RankMethod","abstract":false,"ancestors":[{"html_id":"linalg/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"linalg/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"linalg/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/linalg/linalg.cr","line_number":17,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L17"}],"repository_name":"linalg","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"SVD","name":"SVD","value":"0"},{"id":"QRP","name":"QRP","value":"1"}],"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"},"instance_methods":[{"html_id":"qrp?-instance-method","name":"qrp?","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":19,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L19"},"def":{"name":"qrp?","visibility":"Public","body":"self == QRP"}},{"html_id":"svd?-instance-method","name":"svd?","abstract":false,"location":{"filename":"src/linalg/linalg.cr","line_number":18,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/linalg.cr#L18"},"def":{"name":"svd?","visibility":"Public","body":"self == SVD"}}]},{"html_id":"linalg/LA/RowColumn","path":"LA/RowColumn.html","kind":"alias","full_name":"LA::RowColumn","name":"RowColumn","abstract":false,"locations":[{"filename":"src/matrix/submatrix.cr","line_number":5,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/submatrix.cr#L5"}],"repository_name":"linalg","program":false,"enum":false,"alias":true,"aliased":"Tuple(Int32, Int32)","aliased_html":"{Int32, Int32}","const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"},"doc":"tuple of coordinates - row and column","summary":"<p>tuple of coordinates - row and column</p>"},{"html_id":"linalg/LA/Sparse","path":"LA/Sparse.html","kind":"module","full_name":"LA::Sparse","name":"Sparse","abstract":false,"locations":[{"filename":"src/matrix/sparse_matrix.cr","line_number":6,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L6"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"},"types":[{"html_id":"linalg/LA/Sparse/COOMatrix","path":"LA/Sparse/COOMatrix.html","kind":"class","full_name":"LA::Sparse::COOMatrix(T)","name":"COOMatrix","abstract":false,"superclass":{"html_id":"linalg/LA/Sparse/Matrix","kind":"class","full_name":"LA::Sparse::Matrix","name":"Matrix"},"ancestors":[{"html_id":"linalg/LA/Sparse/Matrix","kind":"class","full_name":"LA::Sparse::Matrix","name":"Matrix"},{"html_id":"linalg/LA/Matrix","kind":"class","full_name":"LA::Matrix","name":"Matrix"},{"html_id":"linalg/LA/LapackHelper","kind":"module","full_name":"LA::LapackHelper","name":"LapackHelper"},{"html_id":"linalg/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"linalg/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/matrix/sparse_matrix.cr","line_number":33,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L33"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"linalg/LA/Sparse","kind":"module","full_name":"LA::Sparse","name":"Sparse"},"class_methods":[{"html_id":"diag(nrows,ncolumns,values)-class-method","name":"diag","doc":"Returns diagonal matrix of given size with diagonal elements taken from array `values`\n\nRaises if `values.size > {nrows, ncolumns}.min`","summary":"<p>Returns diagonal matrix of given size with diagonal elements taken from array <code>values</code></p>","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"values","external_name":"values","restriction":""}],"args_string":"(nrows, ncolumns, values)","args_html":"(nrows, ncolumns, values)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":153,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L153"},"def":{"name":"diag","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"values","external_name":"values","restriction":""}],"visibility":"Public","body":"if values.size > {nrows, ncolumns}.min\n  raise(ArgumentError.new(\"Too much elements for diag matrix\"))\nend\nnew(nrows, ncolumns, values.size)\nvalues.each_with_index do |v, i|\n  push_element(i, i, v)\nend\n"}},{"html_id":"diag(nrows,ncolumns,&)-class-method","name":"diag","doc":"Returns diagonal matrix of given size with diagonal elements equal to block value","summary":"<p>Returns diagonal matrix of given size with diagonal elements equal to block value</p>","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""}],"args_string":"(nrows, ncolumns, &)","args_html":"(nrows, ncolumns, &)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":162,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L162"},"def":{"name":"diag","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""}],"yields":1,"block_arity":1,"visibility":"Public","body":"n = {nrows, ncolumns}.min\nnew(nrows, ncolumns, n)\nn.times do |i|\n  value = yield(i)\n  push_element(i, i, T.new(v))\nend\n"}},{"html_id":"rand(nrows,ncolumns,*,nonzero_elements,rng:Random=Random::DEFAULT)-class-method","name":"rand","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"nonzero_elements","external_name":"nonzero_elements","restriction":""},{"name":"rng","default_value":"Random::DEFAULT","external_name":"rng","restriction":"Random"}],"args_string":"(nrows, ncolumns, *, nonzero_elements, rng : Random = Random::DEFAULT)","args_html":"(nrows, ncolumns, *, nonzero_elements, rng : Random = <span class=\"t\">Random</span><span class=\"t\">::</span><span class=\"t\">DEFAULT</span>)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":332,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L332"},"def":{"name":"rand","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"nonzero_elements","external_name":"nonzero_elements","restriction":""},{"name":"rng","default_value":"Random::DEFAULT","external_name":"rng","restriction":"Random"}],"splat_index":2,"visibility":"Public","body":"if nonzero_elements > ((nrows * ncolumns) // 2)\n  raise(ArgumentError.new(\"Too many nonzero elements, maximum is nrows*ncolumns/2\"))\nend\nresult = new(nrows, ncolumns, capacity: nonzero_elements)\nnonzero_elements.times do\n  i = j = 0\n  loop do\n    i = rng.rand(nrows)\n    j = rng.rand(ncolumns)\n    if !(result.dictionary.has_key?({i, j}))\n      break\n    end\n  end\n  v = rng.rand\n  result.push_element(i, j, v)\nend\nresult.clear_flags\nresult\n"}},{"html_id":"rand(nrows,ncolumns,*,fill_factor,rng:Random=Random::DEFAULT)-class-method","name":"rand","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"fill_factor","external_name":"fill_factor","restriction":""},{"name":"rng","default_value":"Random::DEFAULT","external_name":"rng","restriction":"Random"}],"args_string":"(nrows, ncolumns, *, fill_factor, rng : Random = Random::DEFAULT)","args_html":"(nrows, ncolumns, *, fill_factor, rng : Random = <span class=\"t\">Random</span><span class=\"t\">::</span><span class=\"t\">DEFAULT</span>)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":349,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L349"},"def":{"name":"rand","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"fill_factor","external_name":"fill_factor","restriction":""},{"name":"rng","default_value":"Random::DEFAULT","external_name":"rng","restriction":"Random"}],"splat_index":2,"visibility":"Public","body":"result = new(nrows, ncolumns, capacity: (((nrows * ncolumns) * fill_factor) * 1.1).to_i)\nnrows.times do |i|\n  ncolumns.times do |j|\n    if rng.rand >= fill_factor\n      next\n    end\n    v = rng.rand\n    result.push_element(i, j, v)\n  end\nend\nresult.clear_flags\nresult\n"}}],"constructors":[{"html_id":"new(nrows,ncolumns,rows:Array(Int32),columns:Array(Int32),values:Array(T),flags=MatrixFlags::None,*,dont_clone:Bool=false,dont_check:Bool=false,dictionary=nil)-class-method","name":"new","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"rows","external_name":"rows","restriction":"Array(Int32)"},{"name":"columns","external_name":"columns","restriction":"Array(Int32)"},{"name":"values","external_name":"values","restriction":"Array(T)"},{"name":"flags","default_value":"MatrixFlags::None","external_name":"flags","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"dont_clone","default_value":"false","external_name":"dont_clone","restriction":"Bool"},{"name":"dont_check","default_value":"false","external_name":"dont_check","restriction":"Bool"},{"name":"dictionary","default_value":"nil","external_name":"dictionary","restriction":""}],"args_string":"(nrows, ncolumns, rows : Array(Int32), columns : Array(Int32), values : Array(T), flags = MatrixFlags::None, *, dont_clone : Bool = false, dont_check : Bool = false, dictionary = nil)","args_html":"(nrows, ncolumns, rows : Array(Int32), columns : Array(Int32), values : Array(T), flags = <span class=\"t\">MatrixFlags</span><span class=\"t\">::</span><span class=\"t\">None</span>, *, dont_clone : Bool = <span class=\"n\">false</span>, dont_check : Bool = <span class=\"n\">false</span>, dictionary = <span class=\"n\">nil</span>)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":46,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L46"},"def":{"name":"new","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"rows","external_name":"rows","restriction":"Array(Int32)"},{"name":"columns","external_name":"columns","restriction":"Array(Int32)"},{"name":"values","external_name":"values","restriction":"Array(T)"},{"name":"flags","default_value":"MatrixFlags::None","external_name":"flags","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"dont_clone","default_value":"false","external_name":"dont_clone","restriction":"Bool"},{"name":"dont_check","default_value":"false","external_name":"dont_check","restriction":"Bool"},{"name":"dictionary","default_value":"nil","external_name":"dictionary","restriction":""}],"splat_index":6,"visibility":"Public","body":"_ = COOMatrix(T).allocate\n_.initialize(nrows, ncolumns, rows, columns, values, flags, dont_clone: dont_clone, dont_check: dont_check, dictionary: dictionary)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(nrows,ncolumns,capacity=0)-class-method","name":"new","abstract":false,"args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"capacity","default_value":"0","external_name":"capacity","restriction":""}],"args_string":"(nrows, ncolumns, capacity = 0)","args_html":"(nrows, ncolumns, capacity = <span class=\"n\">0</span>)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":39,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L39"},"def":{"name":"new","args":[{"name":"nrows","external_name":"nrows","restriction":""},{"name":"ncolumns","external_name":"ncolumns","restriction":""},{"name":"capacity","default_value":"0","external_name":"capacity","restriction":""}],"visibility":"Public","body":"_ = COOMatrix(T).allocate\n_.initialize(nrows, ncolumns, capacity)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(matrix:COOMatrix(T))-class-method","name":"new","abstract":false,"args":[{"name":"matrix","external_name":"matrix","restriction":"COOMatrix(T)"}],"args_string":"(matrix : COOMatrix(T))","args_html":"(matrix : <a href=\"../../LA/Sparse/COOMatrix.html\">COOMatrix</a>(T))","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":84,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L84"},"def":{"name":"new","args":[{"name":"matrix","external_name":"matrix","restriction":"COOMatrix(T)"}],"visibility":"Public","body":"new(matrix.nrows, matrix.ncolumns, matrix.raw_rows, matrix.raw_columns, matrix.raw_values, dictionary: matrix.dictionary, flags: matrix.flags)"}},{"html_id":"new(matrix:COOMatrix)-class-method","name":"new","abstract":false,"args":[{"name":"matrix","external_name":"matrix","restriction":"COOMatrix"}],"args_string":"(matrix : COOMatrix)","args_html":"(matrix : <a href=\"../../LA/Sparse/COOMatrix.html\">COOMatrix</a>)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":88,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L88"},"def":{"name":"new","args":[{"name":"matrix","external_name":"matrix","restriction":"COOMatrix"}],"visibility":"Public","body":"new(matrix.nrows, matrix.ncolumns, matrix.raw_rows.dup, matrix.raw_columns.dup, matrix.raw_values.map do |v|\n  T.new(v)\nend, dont_clone: true, dictionary: matrix.dictionary, flags: matrix.flags)"}},{"html_id":"new(matrix:LA::Matrix)-class-method","name":"new","abstract":false,"args":[{"name":"matrix","external_name":"matrix","restriction":"LA::Matrix"}],"args_string":"(matrix : LA::Matrix)","args_html":"(matrix : <a href=\"../../LA/Matrix.html\">LA::Matrix</a>)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":92,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L92"},"def":{"name":"new","args":[{"name":"matrix","external_name":"matrix","restriction":"LA::Matrix"}],"visibility":"Public","body":"if matrix.is_a?(Sparse::Matrix)\n  result = new(matrix.nrows, matrix.ncolumns, matrix.nonzeros)\nelse\n  result = new(matrix.nrows, matrix.ncolumns)\nend\nmatrix.each_with_index(all: false) do |v, i, j|\n  result.push_element(i, j, v)\nend\nresult.flags = matrix.flags\nresult\n"}}],"instance_methods":[{"html_id":"+(m:LA::Matrix)-instance-method","name":"+","doc":"returns element-wise sum","summary":"<p>returns element-wise sum</p>","abstract":false,"args":[{"name":"m","external_name":"m","restriction":"LA::Matrix"}],"args_string":"(m : LA::Matrix)","args_html":"(m : <a href=\"../../LA/Matrix.html\">LA::Matrix</a>)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":247,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L247"},"def":{"name":"+","args":[{"name":"m","external_name":"m","restriction":"LA::Matrix"}],"visibility":"Public","body":"result = clone.add!(T.new(1), m)\nresult.flags = self.flags.sum(m.flags)\nresult\n"}},{"html_id":"-(m:LA::Matrix)-instance-method","name":"-","abstract":false,"args":[{"name":"m","external_name":"m","restriction":"LA::Matrix"}],"args_string":"(m : LA::Matrix)","args_html":"(m : <a href=\"../../LA/Matrix.html\">LA::Matrix</a>)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":253,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L253"},"def":{"name":"-","args":[{"name":"m","external_name":"m","restriction":"LA::Matrix"}],"visibility":"Public","body":"result = clone.add!(-(T.new(1)), m)\nresult.flags = self.flags.sum(m.flags)\nresult\n"}},{"html_id":"add!(k:Number|Complex,m:Sparse::Matrix)-instance-method","name":"add!","abstract":false,"args":[{"name":"k","external_name":"k","restriction":"Number | Complex"},{"name":"m","external_name":"m","restriction":"Sparse::Matrix"}],"args_string":"(k : Number | Complex, m : Sparse::Matrix)","args_html":"(k : <a href=\"../../Number.html\">Number</a> | <a href=\"../../Complex.html\">Complex</a>, m : <a href=\"../../LA/Sparse/Matrix.html\">Sparse::Matrix</a>)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":259,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L259"},"def":{"name":"add!","args":[{"name":"k","external_name":"k","restriction":"Number | Complex"},{"name":"m","external_name":"m","restriction":"Sparse::Matrix"}],"visibility":"Public","body":"assert_same_size(m)\nm.each_with_index(all: false) do |v, i, j|\n  add_element(i, j, k * v)\nend\nself.flags = self.flags.sum(m.flags.scale(k.is_a?(Complex) && (k.imag != 0)))\nself\n"}},{"html_id":"add!(k:Number|Complex,m:LA::Matrix)-instance-method","name":"add!","abstract":false,"args":[{"name":"k","external_name":"k","restriction":"Number | Complex"},{"name":"m","external_name":"m","restriction":"LA::Matrix"}],"args_string":"(k : Number | Complex, m : LA::Matrix)","args_html":"(k : <a href=\"../../Number.html\">Number</a> | <a href=\"../../Complex.html\">Complex</a>, m : <a href=\"../../LA/Matrix.html\">LA::Matrix</a>)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":268,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L268"},"def":{"name":"add!","args":[{"name":"k","external_name":"k","restriction":"Number | Complex"},{"name":"m","external_name":"m","restriction":"LA::Matrix"}],"visibility":"Public","body":"raise(ArgumentError.new(\"can't `add!` dense matrix to sparse\"))"}},{"html_id":"clear-instance-method","name":"clear","abstract":false,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":286,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L286"},"def":{"name":"clear","visibility":"Public","body":"@dictionary.clear\n@raw_rows.clear\n@raw_columns.clear\n@raw_values.clear\n@flags = MatrixFlags.for_diag(square?)\n"}},{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":146,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L146"},"def":{"name":"clone","visibility":"Public","body":"dup"}},{"html_id":"conjtranspose-instance-method","name":"conjtranspose","doc":"Returns conjurgate transposed matrix\n\nresult is same as `#transpose` for real matrices","summary":"<p>Returns conjurgate transposed matrix</p>","abstract":false,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":238,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L238"},"def":{"name":"conjtranspose","visibility":"Public","body":"{% if T != Complex %}\n        return transpose\n      {% end %}\nif flags.hermitian?\n  return clone\nend\nCOOMatrix(T).new(@ncolumns, @nrows, @raw_columns.dup, @raw_rows.dup, @raw_values.map(&.conj), flags: @flags.transpose, dont_clone: true)\n"}},{"html_id":"dup-instance-method","name":"dup","doc":"Returns a shallow copy of this object.\n\nThis allocates a new object and copies the contents of\n`self` into it.","summary":"<p>Returns a shallow copy of this object.</p>","abstract":false,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":142,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L142"},"def":{"name":"dup","visibility":"Public","body":"COOMatrix(T).new(self)"}},{"html_id":"each_index(*,all=false,&)-instance-method","name":"each_index","doc":"Yields every index\n\n`all` argument controls whether to yield all or non-empty elements for banded\\sparse matrices\nExample:\n`m.each_index { |i, j| m[i, j] = -m[i, j] }`","summary":"<p>Yields every index</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"all","default_value":"false","external_name":"all","restriction":""}],"args_string":"(*, all = false, &)","args_html":"(*, all = <span class=\"n\">false</span>, &)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":171,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L171"},"def":{"name":"each_index","args":[{"name":"","external_name":"","restriction":""},{"name":"all","default_value":"false","external_name":"all","restriction":""}],"splat_index":0,"yields":2,"block_arity":2,"visibility":"Public","body":"if all\n  super(all: true) do |i, j|\n    yield(i, j)\n  end\nelse\n  nonzeros.times do |i|\n    yield(@raw_rows[i], @raw_columns[i])\n  end\nend"}},{"html_id":"each_with_index(*,all=false,&)-instance-method","name":"each_with_index","doc":"Yields every element of matrix with corresponding row and column\n\n`all` argument controls whether to yield all or non-empty elements for banded\\sparse matrices\nExample:\nm.each_with_index { |v, i, j| m2[i, j] = v }","summary":"<p>Yields every element of matrix with corresponding row and column</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"all","default_value":"false","external_name":"all","restriction":""}],"args_string":"(*, all = false, &)","args_html":"(*, all = <span class=\"n\">false</span>, &)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":181,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L181"},"def":{"name":"each_with_index","args":[{"name":"","external_name":"","restriction":""},{"name":"all","default_value":"false","external_name":"all","restriction":""}],"splat_index":0,"yields":3,"block_arity":3,"visibility":"Public","body":"if all\n  super(all: true) do |v, i, j|\n    yield(v, i, j)\n  end\nelse\n  nonzeros.times do |i|\n    yield(@raw_values[i], @raw_rows[i], @raw_columns[i])\n  end\nend"}},{"html_id":"map_with_index(&)-instance-method","name":"map_with_index","doc":"Returns result of appliyng block to every element with index","summary":"<p>Returns result of appliyng block to every element with index</p>","abstract":false,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":198,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L198"},"def":{"name":"map_with_index","yields":3,"block_arity":3,"visibility":"Public","body":"values = @raw_values.map_with_index do |v, i|\n  T.new(yield(v, @raw_rows[i], @raw_columns[i]))\nend\nCOOMatrix(T).new(@nrows, @ncolumns, @raw_rows.dup, @raw_columns.dup, values, dont_clone: true, dictionary: @dictionary)\n"}},{"html_id":"map_with_index!(&)-instance-method","name":"map_with_index!","doc":"Yields each element with index and replace it with returned value","summary":"<p>Yields each element with index and replace it with returned value</p>","abstract":false,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":191,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L191"},"def":{"name":"map_with_index!","yields":3,"block_arity":3,"visibility":"Public","body":"nonzeros.times do |i|\n  @raw_values[i] = T.new(yield(@raw_values[i], @raw_rows[i], @raw_columns[i]))\nend\nself\n"}},{"html_id":"map_with_index_complex(&)-instance-method","name":"map_with_index_complex","abstract":false,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":208,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L208"},"def":{"name":"map_with_index_complex","yields":3,"block_arity":3,"visibility":"Public","body":"values = @raw_values.map_with_index do |v, i|\n  Complex.new(yield(v, @raw_rows[i], @raw_columns[i]))\nend\nCOOMatrix(Complex).new(@nrows, @ncolumns, @raw_rows.dup, @raw_columns.dup, values, dont_clone: true, dictionary: @dictionary)\n"}},{"html_id":"map_with_index_f64(&)-instance-method","name":"map_with_index_f64","doc":"TODO - macro magic?","summary":"<p><span class=\"flag orange\">TODO</span>  - macro magic?</p>","abstract":false,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":203,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L203"},"def":{"name":"map_with_index_f64","yields":3,"block_arity":3,"visibility":"Public","body":"values = @raw_values.map_with_index do |v, i|\n  Float64.new(yield(v, @raw_rows[i], @raw_columns[i]))\nend\nCOOMatrix(Float64).new(@nrows, @ncolumns, @raw_rows.dup, @raw_columns.dup, values, dont_clone: true, dictionary: @dictionary)\n"}},{"html_id":"nonzeros:Int32-instance-method","name":"nonzeros","abstract":false,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":80,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L80"},"def":{"name":"nonzeros","return_type":"Int32","visibility":"Public","body":"@raw_rows.size"}},{"html_id":"to_dense-instance-method","name":"to_dense","abstract":false,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":371,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L371"},"def":{"name":"to_dense","visibility":"Public","body":"to_general"}},{"html_id":"to_general-instance-method","name":"to_general","doc":"Creates general matrix with same content. Useful for banded\\sparse matrices","summary":"<p>Creates general matrix with same content.</p>","abstract":false,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":362,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L362"},"def":{"name":"to_general","visibility":"Public","body":"result = GeneralMatrix(T).new(nrows, ncolumns)\nself.each_with_index(all: false) do |v, i, j|\n  result.unsafe_set(i, j, v)\nend\nresult.flags = flags\nresult\n"}},{"html_id":"transpose-instance-method","name":"transpose","doc":"Returns transposed matrix","summary":"<p>Returns transposed matrix</p>","abstract":false,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":233,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L233"},"def":{"name":"transpose","visibility":"Public","body":"if flags.symmetric?\n  return clone\nend\nCOOMatrix(T).new(@ncolumns, @nrows, @raw_columns, @raw_rows, @raw_values, flags: @flags.transpose)\n"}},{"html_id":"transpose!-instance-method","name":"transpose!","abstract":false,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":222,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L222"},"def":{"name":"transpose!","visibility":"Public","body":"if flags.symmetric?\n  return self\nend\nnonzeros.times do |i|\n  @raw_rows[i], @raw_columns[i] = @raw_columns[i], @raw_rows[i]\nend\n@nrows, @ncolumns = @ncolumns, @nrows\nself.flags = flags.transpose\nrebuild_dictionary\nself\n"}},{"html_id":"tril(k=0)-instance-method","name":"tril","doc":"Same as tril in scipy - returns lower triangular or trapezoidal part of matrix\n\nReturns a matrix with all elements above k-th diagonal zeroed","summary":"<p>Same as tril in scipy - returns lower triangular or trapezoidal part of matrix</p>","abstract":false,"args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"args_string":"(k = 0)","args_html":"(k = <span class=\"n\">0</span>)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":314,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L314"},"def":{"name":"tril","args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"visibility":"Public","body":"result = COOMatrix(T).new(@nrows, @ncolumns)\neach_with_index do |v, i, j|\n  if i >= (j - k)\n    result.push_element(i, j, v)\n  end\nend\nresult.flags = self.flags.tril(k <= 0, square?)\nresult\n"}},{"html_id":"tril!(k=0)-instance-method","name":"tril!","doc":"Works like a tril in scipy - remove all elements above k-diagonal","summary":"<p>Works like a tril in scipy - remove all elements above k-diagonal</p>","abstract":false,"args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"args_string":"(k = 0)","args_html":"(k = <span class=\"n\">0</span>)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":304,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L304"},"def":{"name":"tril!","args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"visibility":"Public","body":"(nonzeros - 1).downto(0) do |index|\n  i = @raw_rows[index]\n  j = @raw_columns[index]\n  if i < (j - k)\n    remove_element(index)\n  end\nend\nself.flags = self.flags.tril(k <= 0, square?)\nself\n"}},{"html_id":"triu(k=0)-instance-method","name":"triu","doc":"Same as triu in scipy - returns upper triangular or trapezoidal part of matrix\n\nReturns a matrix with all elements below k-th diagonal zeroed","summary":"<p>Same as triu in scipy - returns upper triangular or trapezoidal part of matrix</p>","abstract":false,"args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"args_string":"(k = 0)","args_html":"(k = <span class=\"n\">0</span>)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":323,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L323"},"def":{"name":"triu","args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"visibility":"Public","body":"result = COOMatrix(T).new(@nrows, @ncolumns)\neach_with_index do |v, i, j|\n  if i <= (j - k)\n    result.push_element(i, j, v)\n  end\nend\nresult.flags = self.flags.triu(k >= 0, square?)\nresult\n"}},{"html_id":"triu!(k=0)-instance-method","name":"triu!","doc":"Works like a triu in scipy - remove all elements below k-diagonal","summary":"<p>Works like a triu in scipy - remove all elements below k-diagonal</p>","abstract":false,"args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"args_string":"(k = 0)","args_html":"(k = <span class=\"n\">0</span>)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":294,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L294"},"def":{"name":"triu!","args":[{"name":"k","default_value":"0","external_name":"k","restriction":""}],"visibility":"Public","body":"(nonzeros - 1).downto(0) do |index|\n  i = @raw_rows[index]\n  j = @raw_columns[index]\n  if i > (j - k)\n    remove_element(index)\n  end\nend\nself.flags = self.flags.triu(k >= 0, square?)\nself\n"}},{"html_id":"unsafe_fetch(i,j)-instance-method","name":"unsafe_fetch","abstract":false,"args":[{"name":"i","external_name":"i","restriction":""},{"name":"j","external_name":"j","restriction":""}],"args_string":"(i, j)","args_html":"(i, j)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":105,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L105"},"def":{"name":"unsafe_fetch","args":[{"name":"i","external_name":"i","restriction":""},{"name":"j","external_name":"j","restriction":""}],"visibility":"Public","body":"if index = @dictionary[{i, j}]?\n  @raw_values[index]\nelse\n  T.new(0.0)\nend"}},{"html_id":"unsafe_set(i,j,value)-instance-method","name":"unsafe_set","abstract":false,"args":[{"name":"i","external_name":"i","restriction":""},{"name":"j","external_name":"j","restriction":""},{"name":"value","external_name":"value","restriction":""}],"args_string":"(i, j, value)","args_html":"(i, j, value)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":129,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L129"},"def":{"name":"unsafe_set","args":[{"name":"i","external_name":"i","restriction":""},{"name":"j","external_name":"j","restriction":""},{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"clear_flags\nif index = @dictionary[{i, j}]?\n  if value == (T.new(0))\n    remove_element(index)\n  else\n    @raw_values[index] = T.new(value)\n  end\nelse\n  push_element(i, j, value)\nend\n"}}]},{"html_id":"linalg/LA/Sparse/Matrix","path":"LA/Sparse/Matrix.html","kind":"class","full_name":"LA::Sparse::Matrix(T)","name":"Matrix","abstract":true,"superclass":{"html_id":"linalg/LA/Matrix","kind":"class","full_name":"LA::Matrix","name":"Matrix"},"ancestors":[{"html_id":"linalg/LA/Matrix","kind":"class","full_name":"LA::Matrix","name":"Matrix"},{"html_id":"linalg/LA/LapackHelper","kind":"module","full_name":"LA::LapackHelper","name":"LapackHelper"},{"html_id":"linalg/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"linalg/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/matrix/sparse_matrix.cr","line_number":7,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L7"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"linalg/LA/Sparse/COOMatrix","kind":"class","full_name":"LA::Sparse::COOMatrix(T)","name":"COOMatrix"}],"namespace":{"html_id":"linalg/LA/Sparse","kind":"module","full_name":"LA::Sparse","name":"Sparse"},"instance_methods":[{"html_id":"==(other:Sparse::Matrix(T))-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Sparse::Matrix(T)"}],"args_string":"(other : Sparse::Matrix(T))","args_html":"(other : <a href=\"../../LA/Sparse/Matrix.html\">Sparse::Matrix</a>(T))","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":14,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L14"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"Sparse::Matrix(T)"}],"visibility":"Public","body":"if (nrows == other.nrows) && (ncolumns == other.ncolumns)\nelse\n  return false\nend\nif (other.nonzeros + self.nonzeros) < ((nrows * ncolumns) // 4)\n  a, b = self, other\n  if a.nonzeros < b.nonzeros\n    a, b = b, a\n  end\n  a.each_with_index(all: false) do |v, i, j|\n    if (b.unsafe_fetch(i, j)) != v\n      return false\n    end\n  end\n  b.each_with_index(all: false) do |v, i, j|\n    if (a.unsafe_fetch(i, j)) != v\n      return false\n    end\n  end\n  true\nelse\n  super(other)\nend\n"}},{"html_id":"flags:MatrixFlags-instance-method","name":"flags","doc":"Returns flags of matrix (see `MatrixFlags`)","summary":"<p>Returns flags of matrix (see <code><a href=\"../../LA/MatrixFlags.html\">MatrixFlags</a></code>)</p>","abstract":false,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":10,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L10"},"def":{"name":"flags","return_type":"MatrixFlags","visibility":"Public","body":"@flags"}},{"html_id":"flags=(flags:MatrixFlags)-instance-method","name":"flags=","doc":"Returns flags of matrix (see `MatrixFlags`)","summary":"<p>Returns flags of matrix (see <code><a href=\"../../LA/MatrixFlags.html\">MatrixFlags</a></code>)</p>","abstract":false,"args":[{"name":"flags","external_name":"flags","restriction":"MatrixFlags"}],"args_string":"(flags : MatrixFlags)","args_html":"(flags : <a href=\"../../LA/MatrixFlags.html\">MatrixFlags</a>)","location":{"filename":"src/matrix/sparse_matrix.cr","line_number":10,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L10"},"def":{"name":"flags=","args":[{"name":"flags","external_name":"flags","restriction":"MatrixFlags"}],"visibility":"Public","body":"@flags = flags"}},{"html_id":"ncolumns:Int32-instance-method","name":"ncolumns","doc":"Returns number of columns in matrix","summary":"<p>Returns number of columns in matrix</p>","abstract":false,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":9,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L9"},"def":{"name":"ncolumns","return_type":"Int32","visibility":"Public","body":"@ncolumns"}},{"html_id":"nonzeros:Int32-instance-method","name":"nonzeros","abstract":true,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":12,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L12"},"def":{"name":"nonzeros","return_type":"Int32","visibility":"Public","body":""}},{"html_id":"nrows:Int32-instance-method","name":"nrows","doc":"Returns number of rows in matrix","summary":"<p>Returns number of rows in matrix</p>","abstract":false,"location":{"filename":"src/matrix/sparse_matrix.cr","line_number":8,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/sparse_matrix.cr#L8"},"def":{"name":"nrows","return_type":"Int32","visibility":"Public","body":"@nrows"}}]}]},{"html_id":"linalg/LA/SubMatrix","path":"LA/SubMatrix.html","kind":"class","full_name":"LA::SubMatrix(T)","name":"SubMatrix","abstract":false,"superclass":{"html_id":"linalg/LA/Matrix","kind":"class","full_name":"LA::Matrix","name":"Matrix"},"ancestors":[{"html_id":"linalg/LA/Matrix","kind":"class","full_name":"LA::Matrix","name":"Matrix"},{"html_id":"linalg/LA/LapackHelper","kind":"module","full_name":"LA::LapackHelper","name":"LapackHelper"},{"html_id":"linalg/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"linalg/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/matrix/submatrix.cr","line_number":10,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/submatrix.cr#L10"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"},"doc":"it's like Slice, but for matrices.\nLightweight class that stores only pointer to basic matrix, size and offset\nBut allow all operations that allow `Matrix(T)`","summary":"<p>it's like Slice, but for matrices.</p>","constructors":[{"html_id":"new(base:Matrix(T),offset:Tuple(Int32,Int32),size:RowColumn)-class-method","name":"new","doc":"Creates submatrix from a given `base`, `offset` and `size`","summary":"<p>Creates submatrix from a given <code>base</code>, <code><a href=\"../LA/SubMatrix.html#offset%3ARowColumn-instance-method\">#offset</a></code> and <code>size</code></p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"Matrix(T)"},{"name":"offset","external_name":"offset","restriction":"::Tuple(::Int32, ::Int32)"},{"name":"size","external_name":"size","restriction":"RowColumn"}],"args_string":"(base : Matrix(T), offset : Tuple(Int32, Int32), size : RowColumn)","args_html":"(base : <a href=\"../LA/Matrix.html\">Matrix</a>(T), offset : Tuple(Int32, Int32), size : <a href=\"../LA/RowColumn.html\">RowColumn</a>)","location":{"filename":"src/matrix/submatrix.cr","line_number":29,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/submatrix.cr#L29"},"def":{"name":"new","args":[{"name":"base","external_name":"base","restriction":"Matrix(T)"},{"name":"offset","external_name":"offset","restriction":"::Tuple(::Int32, ::Int32)"},{"name":"size","external_name":"size","restriction":"RowColumn"}],"visibility":"Public","body":"_ = SubMatrix(T).allocate\n_.initialize(base, offset, size)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Converts a submatrix to a GeneralMatrix(T)","summary":"<p>Converts a submatrix to a GeneralMatrix(T)</p>","abstract":false,"location":{"filename":"src/matrix/submatrix.cr","line_number":54,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/submatrix.cr#L54"},"def":{"name":"clone","visibility":"Public","body":"to_general"}},{"html_id":"dup-instance-method","name":"dup","doc":"Returns submatrix pointing to same area","summary":"<p>Returns submatrix pointing to same area</p>","abstract":false,"location":{"filename":"src/matrix/submatrix.cr","line_number":49,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/submatrix.cr#L49"},"def":{"name":"dup","visibility":"Public","body":"SubMatrix(T).new(@base, @offset, {@nrows, @ncolumns})"}},{"html_id":"ncolumns:Int32-instance-method","name":"ncolumns","doc":"number of columns in submatrix","summary":"<p>number of columns in submatrix</p>","abstract":false,"location":{"filename":"src/matrix/submatrix.cr","line_number":16,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/submatrix.cr#L16"},"def":{"name":"ncolumns","return_type":"Int32","visibility":"Public","body":"@ncolumns"}},{"html_id":"nrows:Int32-instance-method","name":"nrows","doc":"number of rows in submatrix","summary":"<p>number of rows in submatrix</p>","abstract":false,"location":{"filename":"src/matrix/submatrix.cr","line_number":14,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/submatrix.cr#L14"},"def":{"name":"nrows","return_type":"Int32","visibility":"Public","body":"@nrows"}},{"html_id":"offset:RowColumn-instance-method","name":"offset","doc":"index of a submatrix first row and column","summary":"<p>index of a submatrix first row and column</p>","abstract":false,"location":{"filename":"src/matrix/submatrix.cr","line_number":12,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/submatrix.cr#L12"},"def":{"name":"offset","return_type":"RowColumn","visibility":"Public","body":"@offset"}}]},{"html_id":"linalg/LA/WorkPool","path":"LA/WorkPool.html","kind":"class","full_name":"LA::WorkPool","name":"WorkPool","abstract":false,"superclass":{"html_id":"linalg/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"linalg/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/linalg/workpool.cr","line_number":5,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/workpool.cr#L5"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"linalg/LA","kind":"module","full_name":"LA","name":"LA"},"doc":"Work arrays pool for lapack routines\nIt isn't thread safe for now because crystal isn't multithreaded\nTODO - Crystal is now multithreaded!","summary":"<p>Work arrays pool for lapack routines It isn't thread safe for now because crystal isn't multithreaded TODO - Crystal is now multithreaded!</p>","instance_methods":[{"html_id":"get(n):Bytes-instance-method","name":"get","doc":"allocate and return Bytes of size `n`","summary":"<p>allocate and return Bytes of size <code>n</code></p>","abstract":false,"args":[{"name":"n","external_name":"n","restriction":""}],"args_string":"(n) : Bytes","args_html":"(n) : Bytes","location":{"filename":"src/linalg/workpool.cr","line_number":10,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/workpool.cr#L10"},"def":{"name":"get","args":[{"name":"n","external_name":"n","restriction":""}],"return_type":"Bytes","visibility":"Public","body":"reallocate(n + @used)\n@area[@used, n].tap do\n  @used = @used + n\nend\n"}},{"html_id":"get_cmplx(n):Slice(LibCBLAS::ComplexDouble)-instance-method","name":"get_cmplx","doc":"allocate and return Slice(LibCBLAS::ComplexDouble) of size `n`","summary":"<p>allocate and return Slice(LibCBLAS::ComplexDouble) of size <code>n</code></p>","abstract":false,"args":[{"name":"n","external_name":"n","restriction":""}],"args_string":"(n) : Slice(LibCBLAS::ComplexDouble)","args_html":"(n) : Slice(LibCBLAS::ComplexDouble)","location":{"filename":"src/linalg/workpool.cr","line_number":26,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/workpool.cr#L26"},"def":{"name":"get_cmplx","args":[{"name":"n","external_name":"n","restriction":""}],"return_type":"Slice(LibCBLAS::ComplexDouble)","visibility":"Public","body":"(get(n * (sizeof(LibCBLAS::ComplexDouble)))).unsafe_as(Slice(LibCBLAS::ComplexDouble))"}},{"html_id":"get_f32(n):Slice(Float32)-instance-method","name":"get_f32","doc":"allocate and return Slice(Float32) of size `n`","summary":"<p>allocate and return Slice(Float32) of size <code>n</code></p>","abstract":false,"args":[{"name":"n","external_name":"n","restriction":""}],"args_string":"(n) : Slice(Float32)","args_html":"(n) : Slice(Float32)","location":{"filename":"src/linalg/workpool.cr","line_number":16,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/workpool.cr#L16"},"def":{"name":"get_f32","args":[{"name":"n","external_name":"n","restriction":""}],"return_type":"Slice(Float32)","visibility":"Public","body":"(get(n * (sizeof(Float32)))).unsafe_as(Slice(Float32))"}},{"html_id":"get_f64(n):Slice(Float64)-instance-method","name":"get_f64","doc":"allocate and return Slice(Float64) of size `n`","summary":"<p>allocate and return Slice(Float64) of size <code>n</code></p>","abstract":false,"args":[{"name":"n","external_name":"n","restriction":""}],"args_string":"(n) : Slice(Float64)","args_html":"(n) : Slice(Float64)","location":{"filename":"src/linalg/workpool.cr","line_number":21,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/workpool.cr#L21"},"def":{"name":"get_f64","args":[{"name":"n","external_name":"n","restriction":""}],"return_type":"Slice(Float64)","visibility":"Public","body":"(get(n * (sizeof(Float64)))).unsafe_as(Slice(Float64))"}},{"html_id":"get_i32(n):Slice(Int32)-instance-method","name":"get_i32","doc":"allocate and return Slice(Int32) of size `n`","summary":"<p>allocate and return Slice(Int32) of size <code>n</code></p>","abstract":false,"args":[{"name":"n","external_name":"n","restriction":""}],"args_string":"(n) : Slice(Int32)","args_html":"(n) : Slice(Int32)","location":{"filename":"src/linalg/workpool.cr","line_number":31,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/workpool.cr#L31"},"def":{"name":"get_i32","args":[{"name":"n","external_name":"n","restriction":""}],"return_type":"Slice(Int32)","visibility":"Public","body":"(get(n * (sizeof(Int32)))).unsafe_as(Slice(Int32))"}},{"html_id":"reallocate(required_size)-instance-method","name":"reallocate","doc":"increase internal pool to `required_size`","summary":"<p>increase internal pool to <code>required_size</code></p>","abstract":false,"args":[{"name":"required_size","external_name":"required_size","restriction":""}],"args_string":"(required_size)","args_html":"(required_size)","location":{"filename":"src/linalg/workpool.cr","line_number":51,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/workpool.cr#L51"},"def":{"name":"reallocate","args":[{"name":"required_size","external_name":"required_size","restriction":""}],"visibility":"Public","body":"{% if !(flag?(:release)) %}\n        required_size += 4\n      {% end %}\nn = @area.size\nif n < required_size\n  while n < required_size\n    n = n * 2\n  end\n  @area = Bytes.new(n)\nend\n{% if !(flag?(:release)) %}\n        @area[required_size - 4] = 0xDE\n        @area[required_size - 3] = 0xAD\n        @area[required_size - 2] = 0xBE\n        @area[required_size - 1] = 0xEF\n      {% end %}\n"}},{"html_id":"release-instance-method","name":"release","doc":"release all allocated arrays","summary":"<p>release all allocated arrays</p>","abstract":false,"location":{"filename":"src/linalg/workpool.cr","line_number":36,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/linalg/workpool.cr#L36"},"def":{"name":"release","visibility":"Public","body":"{% if flag?(:release) %}\n        @used = 0\n      {% else %}\n        return if @used == 0\n        aused = @used\n        @used = 0\n        raise \"worksize guard failed\" unless @area[aused] == 0xDE &&\n                                             @area[aused + 1] == 0xAD &&\n                                             @area[aused + 2] == 0xBE &&\n                                             @area[aused + 3] == 0xEF\n      {% end %}"}}]}]},{"html_id":"linalg/Math","path":"Math.html","kind":"module","full_name":"Math","name":"Math","abstract":false,"locations":[{"filename":"src/matrix/num_helpers.cr","line_number":77,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L77"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"linalg/Math","kind":"module","full_name":"Math","name":"Math"}],"class_methods":[{"html_id":"cos(x:Complex)-class-method","name":"cos","doc":"cos for complex numbers","summary":"<p>cos for complex numbers</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Complex"}],"args_string":"(x : Complex)","args_html":"(x : <a href=\"Complex.html\">Complex</a>)","location":{"filename":"src/matrix/num_helpers.cr","line_number":78,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L78"},"def":{"name":"cos","args":[{"name":"x","external_name":"x","restriction":"Complex"}],"visibility":"Public","body":"x.cos"}},{"html_id":"cosh(x:Complex)-class-method","name":"cosh","doc":"cosh for complex numbers","summary":"<p>cosh for complex numbers</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Complex"}],"args_string":"(x : Complex)","args_html":"(x : <a href=\"Complex.html\">Complex</a>)","location":{"filename":"src/matrix/num_helpers.cr","line_number":78,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L78"},"def":{"name":"cosh","args":[{"name":"x","external_name":"x","restriction":"Complex"}],"visibility":"Public","body":"x.cosh"}},{"html_id":"sin(x:Complex)-class-method","name":"sin","doc":"sin for complex numbers","summary":"<p>sin for complex numbers</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Complex"}],"args_string":"(x : Complex)","args_html":"(x : <a href=\"Complex.html\">Complex</a>)","location":{"filename":"src/matrix/num_helpers.cr","line_number":78,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L78"},"def":{"name":"sin","args":[{"name":"x","external_name":"x","restriction":"Complex"}],"visibility":"Public","body":"x.sin"}},{"html_id":"sinh(x:Complex)-class-method","name":"sinh","doc":"sinh for complex numbers","summary":"<p>sinh for complex numbers</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Complex"}],"args_string":"(x : Complex)","args_html":"(x : <a href=\"Complex.html\">Complex</a>)","location":{"filename":"src/matrix/num_helpers.cr","line_number":78,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L78"},"def":{"name":"sinh","args":[{"name":"x","external_name":"x","restriction":"Complex"}],"visibility":"Public","body":"x.sinh"}},{"html_id":"tan(x:Complex)-class-method","name":"tan","doc":"tan for complex numbers","summary":"<p>tan for complex numbers</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Complex"}],"args_string":"(x : Complex)","args_html":"(x : <a href=\"Complex.html\">Complex</a>)","location":{"filename":"src/matrix/num_helpers.cr","line_number":78,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L78"},"def":{"name":"tan","args":[{"name":"x","external_name":"x","restriction":"Complex"}],"visibility":"Public","body":"x.tan"}}]},{"html_id":"linalg/MatrixParseError","path":"MatrixParseError.html","kind":"class","full_name":"MatrixParseError","name":"MatrixParseError","abstract":false,"superclass":{"html_id":"linalg/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"linalg/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"linalg/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/matrix/formatted_reader.cr","line_number":40,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/formatted_reader.cr#L40"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false},{"html_id":"linalg/Number","path":"Number.html","kind":"struct","full_name":"Number","name":"Number","abstract":true,"superclass":{"html_id":"linalg/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"linalg/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"},{"html_id":"linalg/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"linalg/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/matrix/num_helpers.cr","line_number":52,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L52"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"linalg/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"linalg/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"}],"doc":"The top-level number type.","summary":"<p>The top-level number type.</p>","instance_methods":[{"html_id":"*(m:LA::Matrix)-instance-method","name":"*","doc":"Multiply scalar to matrix","summary":"<p>Multiply scalar to matrix</p>","abstract":false,"args":[{"name":"m","external_name":"m","restriction":"LA::Matrix"}],"args_string":"(m : LA::Matrix)","args_html":"(m : <a href=\"LA/Matrix.html\">LA::Matrix</a>)","location":{"filename":"src/matrix/num_helpers.cr","line_number":54,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L54"},"def":{"name":"*","args":[{"name":"m","external_name":"m","restriction":"LA::Matrix"}],"visibility":"Public","body":"m * self"}},{"html_id":"+(m:LA::Matrix)-instance-method","name":"+","doc":"Adds scalar to matrix","summary":"<p>Adds scalar to matrix</p>","abstract":false,"args":[{"name":"m","external_name":"m","restriction":"LA::Matrix"}],"args_string":"(m : LA::Matrix)","args_html":"(m : <a href=\"LA/Matrix.html\">LA::Matrix</a>)","location":{"filename":"src/matrix/num_helpers.cr","line_number":59,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L59"},"def":{"name":"+","args":[{"name":"m","external_name":"m","restriction":"LA::Matrix"}],"visibility":"Public","body":"m + self"}},{"html_id":"-(m:LA::Matrix)-instance-method","name":"-","doc":"Substract matrix from scalar","summary":"<p>Substract matrix from scalar</p>","abstract":false,"args":[{"name":"m","external_name":"m","restriction":"LA::Matrix"}],"args_string":"(m : LA::Matrix)","args_html":"(m : <a href=\"LA/Matrix.html\">LA::Matrix</a>)","location":{"filename":"src/matrix/num_helpers.cr","line_number":64,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L64"},"def":{"name":"-","args":[{"name":"m","external_name":"m","restriction":"LA::Matrix"}],"visibility":"Public","body":"(-m) + self"}},{"html_id":"conj-instance-method","name":"conj","doc":"Returns self\n\nBecause complex conjurgate for real numbers is number itself.\nThis method is useful to streamline work with complex and real numbers","summary":"<p>Returns self</p>","abstract":false,"location":{"filename":"src/matrix/num_helpers.cr","line_number":72,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/num_helpers.cr#L72"},"def":{"name":"conj","visibility":"Public","body":"self"}}]},{"html_id":"linalg/Spec","path":"Spec.html","kind":"module","full_name":"Spec","name":"Spec","abstract":false,"locations":[{"filename":"src/matrix/spec_helpers.cr","line_number":1,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/spec_helpers.cr#L1"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"types":[{"html_id":"linalg/Spec/AlmostEqualExpectation","path":"Spec/AlmostEqualExpectation.html","kind":"struct","full_name":"Spec::AlmostEqualExpectation(T)","name":"AlmostEqualExpectation","abstract":false,"superclass":{"html_id":"linalg/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"linalg/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"linalg/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"linalg/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/matrix/spec_helpers.cr","line_number":4,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/spec_helpers.cr#L4"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"linalg/Spec","kind":"module","full_name":"Spec","name":"Spec"},"doc":"Similar to `EqualExpectation(T)`, but calls `Matrix#almost_eq`\nUseful in Matrix specs where exact equality isn't possible","summary":"<p>Similar to <code>EqualExpectation(T)</code>, but calls <code>Matrix#almost_eq</code> Useful in Matrix specs where exact equality isn't possible</p>","constructors":[{"html_id":"new(expected_value:T)-class-method","name":"new","abstract":false,"args":[{"name":"expected_value","external_name":"expected_value","restriction":"T"}],"args_string":"(expected_value : T)","args_html":"(expected_value : T)","location":{"filename":"src/matrix/spec_helpers.cr","line_number":5,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/spec_helpers.cr#L5"},"def":{"name":"new","args":[{"name":"expected_value","external_name":"expected_value","restriction":"T"}],"visibility":"Public","body":"_ = AlmostEqualExpectation(T).allocate\n_.initialize(expected_value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"failure_message(actual_value)-instance-method","name":"failure_message","abstract":false,"args":[{"name":"actual_value","external_name":"actual_value","restriction":""}],"args_string":"(actual_value)","args_html":"(actual_value)","location":{"filename":"src/matrix/spec_helpers.cr","line_number":12,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/spec_helpers.cr#L12"},"def":{"name":"failure_message","args":[{"name":"actual_value","external_name":"actual_value","restriction":""}],"visibility":"Public","body":"expected = @expected_value.inspect\ngot = actual_value.inspect\nif expected == got\n  expected = expected + \" : #{@expected_value.class}\"\n  got = got + \" : #{actual_value.class}\"\nend\n\"Expected: #{expected}\\n     got: #{got}\"\n"}},{"html_id":"match(actual_value)-instance-method","name":"match","abstract":false,"args":[{"name":"actual_value","external_name":"actual_value","restriction":""}],"args_string":"(actual_value)","args_html":"(actual_value)","location":{"filename":"src/matrix/spec_helpers.cr","line_number":8,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/spec_helpers.cr#L8"},"def":{"name":"match","args":[{"name":"actual_value","external_name":"actual_value","restriction":""}],"visibility":"Public","body":"actual_value.almost_eq(@expected_value)"}},{"html_id":"negative_failure_message(actual_value)-instance-method","name":"negative_failure_message","abstract":false,"args":[{"name":"actual_value","external_name":"actual_value","restriction":""}],"args_string":"(actual_value)","args_html":"(actual_value)","location":{"filename":"src/matrix/spec_helpers.cr","line_number":22,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/spec_helpers.cr#L22"},"def":{"name":"negative_failure_message","args":[{"name":"actual_value","external_name":"actual_value","restriction":""}],"visibility":"Public","body":"\"Expected: actual_value != #{@expected_value.inspect}\\n     got: #{actual_value.inspect}\""}}]},{"html_id":"linalg/Spec/Expectations","path":"Spec/Expectations.html","kind":"module","full_name":"Spec::Expectations","name":"Expectations","abstract":false,"locations":[{"filename":"src/matrix/spec_helpers.cr","line_number":27,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/spec_helpers.cr#L27"}],"repository_name":"linalg","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"linalg/Spec","kind":"module","full_name":"Spec","name":"Spec"},"instance_methods":[{"html_id":"almost_eq(value)-instance-method","name":"almost_eq","doc":"Similar to `#eq`, but calls `Matrix#almost_eq`\nUseful in Matrix specs where exact equality isn't possible","summary":"<p>Similar to <code>#eq</code>, but calls <code>Matrix#almost_eq</code> Useful in Matrix specs where exact equality isn't possible</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/matrix/spec_helpers.cr","line_number":30,"url":"https://github.com/konovod/linalg/blob/3dba6c5610a87fa6cb2866a7855fa38541a56376/src/matrix/spec_helpers.cr#L30"},"def":{"name":"almost_eq","args":[{"name":"value","external_name":"value","restriction":""}],"visibility":"Public","body":"Spec::AlmostEqualExpectation.new(value)"}}]}]}]}})