require "./libCBLAS"

{% if flag?(:darwin) %}
  @[Link(framework: "Accelerate")]
  lib LibLAPACK
    alias ComplexFloat = LibCBLAS::ComplexFloat
    alias ComplexDouble = LibCBLAS::ComplexDouble
    alias LapackCSelect1 = (ComplexFloat* -> Int32)
    alias LapackCSelect2 = (ComplexFloat*, ComplexFloat* -> Int32)
    alias LapackDSelect2 = (LibC::Double*, LibC::Double* -> Int32)
    alias LapackDSelect3 = (LibC::Double*, LibC::Double*, LibC::Double* -> Int32)
    alias LapackSSelect2 = (LibC::Float*, LibC::Float* -> Int32)
    alias LapackSSelect3 = (LibC::Float*, LibC::Float*, LibC::Float* -> Int32)
    alias LapackZSelect1 = (ComplexDouble* -> Int32)
    alias LapackZSelect2 = (ComplexDouble*, ComplexDouble* -> Int32)
    alias LapackFloatReturn = LibC::Double

    fun cbbcsd(jobu1 : LibC::Char*, jobu2 : LibC::Char*, jobv1t : LibC::Char*, jobv2t : LibC::Char*, trans : LibC::Char*, m : Int32*, p : Int32*, q : Int32*, theta : LibC::Float*, phi : LibC::Float*, u1 : ComplexFloat*, ldu1 : Int32*, u2 : ComplexFloat*, ldu2 : Int32*, v1_t : ComplexFloat*, ldv1t : Int32*, v2_t : ComplexFloat*, ldv2t : Int32*, b11_d : LibC::Float*, b11_e : LibC::Float*, b12_d : LibC::Float*, b12_e : LibC::Float*, b21_d : LibC::Float*, b21_e : LibC::Float*, b22_d : LibC::Float*, b22_e : LibC::Float*, rwork : LibC::Float*, lrwork : Int32*, info : Int32*)
    fun cbdsqr(uplo : LibC::Char*, n : Int32*, ncvt : Int32*, nru : Int32*, ncc : Int32*, d : LibC::Float*, e : LibC::Float*, vt : ComplexFloat*, ldvt : Int32*, u : ComplexFloat*, ldu : Int32*, c : ComplexFloat*, ldc : Int32*, rwork : LibC::Float*, info : Int32*)
    fun cgbbrd(vect : LibC::Char*, m : Int32*, n : Int32*, ncc : Int32*, kl : Int32*, ku : Int32*, ab : ComplexFloat*, ldab : Int32*, d : LibC::Float*, e : LibC::Float*, q : ComplexFloat*, ldq : Int32*, pt : ComplexFloat*, ldpt : Int32*, c : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cgbcon(norm : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexFloat*, ldab : Int32*, ipiv : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cgbequ(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexFloat*, ldab : Int32*, r : LibC::Float*, c : LibC::Float*, rowcnd : LibC::Float*, colcnd : LibC::Float*, amax : LibC::Float*, info : Int32*)
    fun cgbequb(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexFloat*, ldab : Int32*, r : LibC::Float*, c : LibC::Float*, rowcnd : LibC::Float*, colcnd : LibC::Float*, amax : LibC::Float*, info : Int32*)
    fun cgbrfs(trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : ComplexFloat*, ldab : Int32*, afb : ComplexFloat*, ldafb : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cgbrfsx(trans : LibC::Char*, equed : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : ComplexFloat*, ldab : Int32*, afb : ComplexFloat*, ldafb : Int32*, ipiv : Int32*, r : LibC::Float*, c : LibC::Float*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cgbsv(n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : ComplexFloat*, ldab : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun cgbsvx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : ComplexFloat*, ldab : Int32*, afb : ComplexFloat*, ldafb : Int32*, ipiv : Int32*, equed : LibC::Char*, r : LibC::Float*, c : LibC::Float*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cgbsvxx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : ComplexFloat*, ldab : Int32*, afb : ComplexFloat*, ldafb : Int32*, ipiv : Int32*, equed : LibC::Char*, r : LibC::Float*, c : LibC::Float*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, rpvgrw : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cgbtf2(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexFloat*, ldab : Int32*, ipiv : Int32*, info : Int32*)
    fun cgbtrf(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexFloat*, ldab : Int32*, ipiv : Int32*, info : Int32*)
    fun cgbtrs(trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : ComplexFloat*, ldab : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun cgebak(job : LibC::Char*, side : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, scale : LibC::Float*, m : Int32*, v : ComplexFloat*, ldv : Int32*, info : Int32*)
    fun cgebal(job : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ilo : Int32*, ihi : Int32*, scale : LibC::Float*, info : Int32*)
    fun cgebd2(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, d__ : LibC::Float*, e : LibC::Float*, tauq : ComplexFloat*, taup : ComplexFloat*, work : ComplexFloat*, info : Int32*)
    fun cgebrd(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, d : LibC::Float*, e : LibC::Float*, tauq : ComplexFloat*, taup : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgecon(norm : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cgeequ(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, r : LibC::Float*, c : LibC::Float*, rowcnd : LibC::Float*, colcnd : LibC::Float*, amax : LibC::Float*, info : Int32*)
    fun cgeequb(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, r : LibC::Float*, c : LibC::Float*, rowcnd : LibC::Float*, colcnd : LibC::Float*, amax : LibC::Float*, info : Int32*)
    fun cgees(jobvs : LibC::Char*, sort : LibC::Char*, select : LapackCSelect1, n : Int32*, a : ComplexFloat*, lda : Int32*, sdim : Int32*, w : ComplexFloat*, vs : ComplexFloat*, ldvs : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, bwork : Int32*, info : Int32*)
    fun cgeesx(jobvs : LibC::Char*, sort : LibC::Char*, select : LapackCSelect1, sense : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, sdim : Int32*, w : ComplexFloat*, vs : ComplexFloat*, ldvs : Int32*, rconde : LibC::Float*, rcondv : LibC::Float*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, bwork : Int32*, info : Int32*)
    fun cgeev(jobvl : LibC::Char*, jobvr : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, w : ComplexFloat*, vl : ComplexFloat*, ldvl : Int32*, vr : ComplexFloat*, ldvr : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun cgeevx(balanc : LibC::Char*, jobvl : LibC::Char*, jobvr : LibC::Char*, sense : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, w : ComplexFloat*, vl : ComplexFloat*, ldvl : Int32*, vr : ComplexFloat*, ldvr : Int32*, ilo : Int32*, ihi : Int32*, scale : LibC::Float*, abnrm : LibC::Float*, rconde : LibC::Float*, rcondv : LibC::Float*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun cgegs(jobvsl : LibC::Char*, jobvsr : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, alpha : ComplexFloat*, beta : ComplexFloat*, vsl : ComplexFloat*, ldvsl : Int32*, vsr : ComplexFloat*, ldvsr : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun cgegv(jobvl : LibC::Char*, jobvr : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, alpha : ComplexFloat*, beta : ComplexFloat*, vl : ComplexFloat*, ldvl : Int32*, vr : ComplexFloat*, ldvr : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun cgehd2(n : Int32*, ilo : Int32*, ihi : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, info : Int32*)
    fun cgehrd(n : Int32*, ilo : Int32*, ihi : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgejsv(joba : LibC::Char*, jobu : LibC::Char*, jobv : LibC::Char*, jobr : LibC::Char*, jobt : LibC::Char*, jobp : LibC::Char*, m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, sva : LibC::Float*, u : ComplexFloat*, ldu : Int32*, v : ComplexFloat*, ldv : Int32*, cwork : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, iwork : Int32*, info : Int32*)
    fun cgelq(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, t : ComplexFloat*, tsize : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgelq2(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, info : Int32*)
    fun cgelqf(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgels(trans : LibC::Char*, m : Int32*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgelsd(m : Int32*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, s : LibC::Float*, rcond : LibC::Float*, rank : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, iwork : Int32*, info : Int32*)
    fun cgelss(m : Int32*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, s : LibC::Float*, rcond : LibC::Float*, rank : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun cgelsx(m : Int32*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, jpvt : Int32*, rcond : LibC::Float*, rank : Int32*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cgelsy(m : Int32*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, jpvt : Int32*, rcond : LibC::Float*, rank : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun cgemlq(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, t : ComplexFloat*, tsize : Int32*, c : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgemqr(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, t : ComplexFloat*, tsize : Int32*, c : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgemqrt(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, nb : Int32*, v : ComplexFloat*, ldv : Int32*, t : ComplexFloat*, ldt : Int32*, c : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, info : Int32*)
    fun cgeql2(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, info : Int32*)
    fun cgeqlf(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgeqp3(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, jpvt : Int32*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun cgeqpf(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, jpvt : Int32*, tau : ComplexFloat*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cgeqr(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, t : ComplexFloat*, tsize : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgeqr2(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, info : Int32*)
    fun cgeqrf(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgeqrfp(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgeqrt(m : Int32*, n : Int32*, nb : Int32*, a : ComplexFloat*, lda : Int32*, t : ComplexFloat*, ldt : Int32*, work : ComplexFloat*, info : Int32*)
    fun cgeqrt2(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, t : ComplexFloat*, ldt : Int32*, info : Int32*)
    fun cgeqrt3(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, t : ComplexFloat*, ldt : Int32*, info : Int32*)
    fun cgerfs(trans : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cgerfsx(trans : LibC::Char*, equed : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, r : LibC::Float*, c : LibC::Float*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cgerq2(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, info : Int32*)
    fun cgerqf(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgesc2(n : Int32*, a : ComplexFloat*, lda : Int32*, rhs : ComplexFloat*, ipiv : Int32*, jpiv : Int32*, scale : LibC::Float*)
    fun cgesdd(jobz : LibC::Char*, m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, s : LibC::Float*, u : ComplexFloat*, ldu : Int32*, vt : ComplexFloat*, ldvt : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, iwork : Int32*, info : Int32*)
    fun cgesv(n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun cgesvd(jobu : LibC::Char*, jobvt : LibC::Char*, m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, s : LibC::Float*, u : ComplexFloat*, ldu : Int32*, vt : ComplexFloat*, ldvt : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun cgesvdq(joba : LibC::Char*, jobp : LibC::Char*, jobr : LibC::Char*, jobu : LibC::Char*, jobv : LibC::Char*, m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, s : LibC::Float*, u : ComplexFloat*, ldu : Int32*, v : ComplexFloat*, ldv : Int32*, numrank : Int32*, iwork : Int32*, liwork : Int32*, cwork : ComplexFloat*, lcwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, info : Int32*)
    fun cgesvdx(jobu : LibC::Char*, jobvt : LibC::Char*, range : LibC::Char*, m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, ns : Int32*, s : LibC::Float*, u : ComplexFloat*, ldu : Int32*, vt : ComplexFloat*, ldvt : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, iwork : Int32*, info : Int32*)
    fun cgesvj(joba : LibC::Char*, jobu : LibC::Char*, jobv : LibC::Char*, m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, sva : LibC::Float*, mv : Int32*, v : ComplexFloat*, ldv : Int32*, cwork : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, info : Int32*)
    fun cgesvx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, equed : LibC::Char*, r : LibC::Float*, c : LibC::Float*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cgesvxx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, equed : LibC::Char*, r : LibC::Float*, c : LibC::Float*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, rpvgrw : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cgetc2(n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, jpiv : Int32*, info : Int32*)
    fun cgetf2(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun cgetrf(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun cgetrf2(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun cgetri(n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgetrs(trans : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun cgetsls(trans : LibC::Char*, m : Int32*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgetsqrhrt(m : Int32*, n : Int32*, mb1 : Int32*, nb1 : Int32*, nb2 : Int32*, a : ComplexFloat*, lda : Int32*, t : ComplexFloat*, ldt : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cggbak(job : LibC::Char*, side : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, lscale : LibC::Float*, rscale : LibC::Float*, m : Int32*, v : ComplexFloat*, ldv : Int32*, info : Int32*)
    fun cggbal(job : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, ilo : Int32*, ihi : Int32*, lscale : LibC::Float*, rscale : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun cgges(jobvsl : LibC::Char*, jobvsr : LibC::Char*, sort : LibC::Char*, selctg : LapackCSelect2, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, sdim : Int32*, alpha : ComplexFloat*, beta : ComplexFloat*, vsl : ComplexFloat*, ldvsl : Int32*, vsr : ComplexFloat*, ldvsr : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, bwork : Int32*, info : Int32*)
    fun cgges3(jobvsl : LibC::Char*, jobvsr : LibC::Char*, sort : LibC::Char*, selctg : LapackCSelect2, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, sdim : Int32*, alpha : ComplexFloat*, beta : ComplexFloat*, vsl : ComplexFloat*, ldvsl : Int32*, vsr : ComplexFloat*, ldvsr : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, bwork : Int32*, info : Int32*)
    fun cggesx(jobvsl : LibC::Char*, jobvsr : LibC::Char*, sort : LibC::Char*, selctg : LapackCSelect2, sense : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, sdim : Int32*, alpha : ComplexFloat*, beta : ComplexFloat*, vsl : ComplexFloat*, ldvsl : Int32*, vsr : ComplexFloat*, ldvsr : Int32*, rconde : LibC::Float*, rcondv : LibC::Float*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, iwork : Int32*, liwork : Int32*, bwork : Int32*, info : Int32*)
    fun cggev(jobvl : LibC::Char*, jobvr : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, alpha : ComplexFloat*, beta : ComplexFloat*, vl : ComplexFloat*, ldvl : Int32*, vr : ComplexFloat*, ldvr : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun cggev3(jobvl : LibC::Char*, jobvr : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, alpha : ComplexFloat*, beta : ComplexFloat*, vl : ComplexFloat*, ldvl : Int32*, vr : ComplexFloat*, ldvr : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun cggevx(balanc : LibC::Char*, jobvl : LibC::Char*, jobvr : LibC::Char*, sense : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, alpha : ComplexFloat*, beta : ComplexFloat*, vl : ComplexFloat*, ldvl : Int32*, vr : ComplexFloat*, ldvr : Int32*, ilo : Int32*, ihi : Int32*, lscale : LibC::Float*, rscale : LibC::Float*, abnrm : LibC::Float*, bbnrm : LibC::Float*, rconde : LibC::Float*, rcondv : LibC::Float*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, iwork : Int32*, bwork : Int32*, info : Int32*)
    fun cggglm(n : Int32*, m : Int32*, p : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, d : ComplexFloat*, x : ComplexFloat*, y : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgghd3(compq : LibC::Char*, compz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, q : ComplexFloat*, ldq : Int32*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgghrd(compq : LibC::Char*, compz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, q : ComplexFloat*, ldq : Int32*, z : ComplexFloat*, ldz : Int32*, info : Int32*)
    fun cgglse(m : Int32*, n : Int32*, p : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, c : ComplexFloat*, d : ComplexFloat*, x : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cggqrf(n : Int32*, m : Int32*, p : Int32*, a : ComplexFloat*, lda : Int32*, taua : ComplexFloat*, b : ComplexFloat*, ldb : Int32*, taub : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cggrqf(m : Int32*, p : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, taua : ComplexFloat*, b : ComplexFloat*, ldb : Int32*, taub : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cggsvd(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, n : Int32*, p : Int32*, k : Int32*, l : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, alpha : LibC::Float*, beta : LibC::Float*, u : ComplexFloat*, ldu : Int32*, v : ComplexFloat*, ldv : Int32*, q : ComplexFloat*, ldq : Int32*, work : ComplexFloat*, rwork : LibC::Float*, iwork : Int32*, info : Int32*) : Int32
    fun cggsvd3(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, n : Int32*, p : Int32*, k : Int32*, l : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, alpha : LibC::Float*, beta : LibC::Float*, u : ComplexFloat*, ldu : Int32*, v : ComplexFloat*, ldv : Int32*, q : ComplexFloat*, ldq : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, iwork : Int32*, info : Int32*)
    fun cggsvp(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, p : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, tola : LibC::Float*, tolb : LibC::Float*, k : Int32*, l : Int32*, u : ComplexFloat*, ldu : Int32*, v : ComplexFloat*, ldv : Int32*, q : ComplexFloat*, ldq : Int32*, iwork : Int32*, rwork : LibC::Float*, tau : ComplexFloat*, work : ComplexFloat*, info : Int32*) : Int32
    fun cggsvp3(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, p : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, tola : LibC::Float*, tolb : LibC::Float*, k : Int32*, l : Int32*, u : ComplexFloat*, ldu : Int32*, v : ComplexFloat*, ldv : Int32*, q : ComplexFloat*, ldq : Int32*, iwork : Int32*, rwork : LibC::Float*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cgtcon(norm : LibC::Char*, n : Int32*, dl : ComplexFloat*, d : ComplexFloat*, du : ComplexFloat*, du2 : ComplexFloat*, ipiv : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : ComplexFloat*, info : Int32*)
    fun cgtrfs(trans : LibC::Char*, n : Int32*, nrhs : Int32*, dl : ComplexFloat*, d : ComplexFloat*, du : ComplexFloat*, dlf : ComplexFloat*, df : ComplexFloat*, duf : ComplexFloat*, du2 : ComplexFloat*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cgtsv(n : Int32*, nrhs : Int32*, dl : ComplexFloat*, d : ComplexFloat*, du : ComplexFloat*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun cgtsvx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, nrhs : Int32*, dl : ComplexFloat*, d : ComplexFloat*, du : ComplexFloat*, dlf : ComplexFloat*, df : ComplexFloat*, duf : ComplexFloat*, du2 : ComplexFloat*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cgttrf(n : Int32*, dl : ComplexFloat*, d : ComplexFloat*, du : ComplexFloat*, du2 : ComplexFloat*, ipiv : Int32*, info : Int32*)
    fun cgttrs(trans : LibC::Char*, n : Int32*, nrhs : Int32*, dl : ComplexFloat*, d : ComplexFloat*, du : ComplexFloat*, du2 : ComplexFloat*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun cgtts2(itrans : Int32*, n : Int32*, nrhs : Int32*, dl : ComplexFloat*, d__ : ComplexFloat*, du : ComplexFloat*, du2 : ComplexFloat*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*)
    fun chbev(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexFloat*, ldab : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun chbev_2stage(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexFloat*, ldab : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun chbevd(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexFloat*, ldab : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun chbevd_2stage(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexFloat*, ldab : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun chbevx(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexFloat*, ldab : Int32*, q : ComplexFloat*, ldq : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, rwork : LibC::Float*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun chbevx_2stage(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexFloat*, ldab : Int32*, q : ComplexFloat*, ldq : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun chbgst(vect : LibC::Char*, uplo : LibC::Char*, n : Int32*, ka : Int32*, kb : Int32*, ab : ComplexFloat*, ldab : Int32*, bb : ComplexFloat*, ldbb : Int32*, x : ComplexFloat*, ldx : Int32*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun chbgv(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ka : Int32*, kb : Int32*, ab : ComplexFloat*, ldab : Int32*, bb : ComplexFloat*, ldbb : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun chbgvd(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ka : Int32*, kb : Int32*, ab : ComplexFloat*, ldab : Int32*, bb : ComplexFloat*, ldbb : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun chbgvx(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, ka : Int32*, kb : Int32*, ab : ComplexFloat*, ldab : Int32*, bb : ComplexFloat*, ldbb : Int32*, q : ComplexFloat*, ldq : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, rwork : LibC::Float*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun chbtrd(vect : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexFloat*, ldab : Int32*, d : LibC::Float*, e : LibC::Float*, q : ComplexFloat*, ldq : Int32*, work : ComplexFloat*, info : Int32*)
    fun checon(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : ComplexFloat*, info : Int32*)
    fun checon_3(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, e : ComplexFloat*, ipiv : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : ComplexFloat*, info : Int32*)
    fun cheequb(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, work : ComplexFloat*, info : Int32*)
    fun cheev(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, w : LibC::Float*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun cheev_2stage(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, w : LibC::Float*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun cheevd(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, w : LibC::Float*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun cheevd_2stage(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, w : LibC::Float*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun cheevr(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, isuppz : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun cheevr_2stage(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, isuppz : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun cheevx(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun cheevx_2stage(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun chegs2(itype : Int32*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun chegst(itype : Int32*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun chegv(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, w : LibC::Float*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun chegv_2stage(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, w : LibC::Float*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun chegvd(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, w : LibC::Float*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun chegvx(itype : Int32*, jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun cherfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cherfsx(uplo : LibC::Char*, equed : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, s : LibC::Float*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun chesv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun chesv_aa(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun chesv_aa_2stage(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, tb : ComplexFloat*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun chesv_rk(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, e : ComplexFloat*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun chesv_rook(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun chesvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun chesvxx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, equed : LibC::Char*, s : LibC::Float*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, rpvgrw : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cheswapr(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, i1 : Int32*, i2 : Int32*)
    fun chetd2(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, d__ : LibC::Float*, e : LibC::Float*, tau : ComplexFloat*, info : Int32*)
    fun chetf2(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun chetrd(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, d : LibC::Float*, e : LibC::Float*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun chetrd_2stage(vect : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, d : LibC::Float*, e : LibC::Float*, tau : ComplexFloat*, hous2 : ComplexFloat*, lhous2 : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun chetrf(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun chetrf_aa(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun chetrf_aa_2stage(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, tb : ComplexFloat*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun chetrf_rk(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, e : ComplexFloat*, ipiv : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun chetrf_rook(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun chetri(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, work : ComplexFloat*, info : Int32*)
    fun chetri2(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun chetri2x(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, work : ComplexFloat*, nb : Int32*, info : Int32*)
    fun chetri_3(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, e : ComplexFloat*, ipiv : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun chetrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun chetrs2(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, info : Int32*)
    fun chetrs_3(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, e : ComplexFloat*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun chetrs_aa(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun chetrs_aa_2stage(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, tb : ComplexFloat*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun chetrs_rook(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun chfrk(transr : LibC::Char*, uplo : LibC::Char*, trans : LibC::Char*, n : Int32*, k : Int32*, alpha : LibC::Float*, a : ComplexFloat*, lda : Int32*, beta : LibC::Float*, c : ComplexFloat*)
    fun chgeqz(job : LibC::Char*, compq : LibC::Char*, compz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h : ComplexFloat*, ldh : Int32*, t : ComplexFloat*, ldt : Int32*, alpha : ComplexFloat*, beta : ComplexFloat*, q : ComplexFloat*, ldq : Int32*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun chla_transtype_(ret_val : LibC::Char*, ret_val_len : LibC::Int, trans : Int32*)
    fun chpcon(uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, ipiv : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : ComplexFloat*, info : Int32*)
    fun chpev(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun chpevd(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun chpevx(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, rwork : LibC::Float*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun chpgst(itype : Int32*, uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, bp : ComplexFloat*, info : Int32*)
    fun chpgv(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, bp : ComplexFloat*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun chpgvd(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, bp : ComplexFloat*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun chpgvx(itype : Int32*, jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, bp : ComplexFloat*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, rwork : LibC::Float*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun chprfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexFloat*, afp : ComplexFloat*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun chpsv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexFloat*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun chpsvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexFloat*, afp : ComplexFloat*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun chptrd(uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, d : LibC::Float*, e : LibC::Float*, tau : ComplexFloat*, info : Int32*)
    fun chptrf(uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, ipiv : Int32*, info : Int32*)
    fun chptri(uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, ipiv : Int32*, work : ComplexFloat*, info : Int32*)
    fun chptrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexFloat*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun chsein(side : LibC::Char*, eigsrc : LibC::Char*, initv : LibC::Char*, select : Int32*, n : Int32*, h : ComplexFloat*, ldh : Int32*, w : ComplexFloat*, vl : ComplexFloat*, ldvl : Int32*, vr : ComplexFloat*, ldvr : Int32*, mm : Int32*, m : Int32*, work : ComplexFloat*, rwork : LibC::Float*, ifaill : Int32*, ifailr : Int32*, info : Int32*)
    fun chseqr(job : LibC::Char*, compz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h : ComplexFloat*, ldh : Int32*, w : ComplexFloat*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cla_gbamv_(trans : Int32*, m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, alpha : LibC::Float*, ab : ComplexFloat*, ldab : Int32*, x : ComplexFloat*, incx : Int32*, beta : LibC::Float*, y : LibC::Float*, incy : Int32*)
    fun cla_gbrcond_c_(trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexFloat*, ldab : Int32*, afb : ComplexFloat*, ldafb : Int32*, ipiv : Int32*, c__ : LibC::Float*, capply : LibC::Char*, info : Int32*, work : ComplexFloat*, rwork : LibC::Float*, trans_len : LibC::Int) : LibC::Double
    fun cla_gbrcond_x_(trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexFloat*, ldab : Int32*, afb : ComplexFloat*, ldafb : Int32*, ipiv : Int32*, x : ComplexFloat*, info : Int32*, work : ComplexFloat*, rwork : LibC::Float*, trans_len : LibC::Int) : LibC::Double
    fun cla_gbrfsx_extended_(prec_type__ : Int32*, trans_type__ : Int32*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : ComplexFloat*, ldab : Int32*, afb : ComplexFloat*, ldafb : Int32*, ipiv : Int32*, colequ : LibC::Char*, c__ : LibC::Float*, b : ComplexFloat*, ldb : Int32*, y : ComplexFloat*, ldy : Int32*, berr_out__ : LibC::Float*, n_norms__ : Int32*, errs_n__ : LibC::Float*, errs_c__ : LibC::Float*, res : ComplexFloat*, ayb : LibC::Float*, dy : ComplexFloat*, y_tail__ : ComplexFloat*, rcond : LibC::Float*, ithresh : Int32*, rthresh : LibC::Float*, dz_ub__ : LibC::Float*, ignore_cwise__ : LibC::Char*, info : Int32*)
    fun cla_gbrpvgrw_(n : Int32*, kl : Int32*, ku : Int32*, ncols : Int32*, ab : ComplexFloat*, ldab : Int32*, afb : ComplexFloat*, ldafb : Int32*) : LibC::Double
    fun cla_geamv_(trans : Int32*, m : Int32*, n : Int32*, alpha : LibC::Float*, a : ComplexFloat*, lda : Int32*, x : ComplexFloat*, incx : Int32*, beta : LibC::Float*, y : LibC::Float*, incy : Int32*)
    fun cla_gercond_c_(trans : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, c__ : LibC::Float*, capply : LibC::Char*, info : Int32*, work : ComplexFloat*, rwork : LibC::Float*, trans_len : LibC::Int) : LibC::Double
    fun cla_gercond_x_(trans : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, x : ComplexFloat*, info : Int32*, work : ComplexFloat*, rwork : LibC::Float*, trans_len : LibC::Int) : LibC::Double
    fun cla_gerfsx_extended_(prec_type__ : Int32*, trans_type__ : Int32*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, colequ : LibC::Char*, c__ : LibC::Float*, b : ComplexFloat*, ldb : Int32*, y : ComplexFloat*, ldy : Int32*, berr_out__ : LibC::Float*, n_norms__ : Int32*, errs_n__ : LibC::Float*, errs_c__ : LibC::Float*, res : ComplexFloat*, ayb : LibC::Float*, dy : ComplexFloat*, y_tail__ : ComplexFloat*, rcond : LibC::Float*, ithresh : Int32*, rthresh : LibC::Float*, dz_ub__ : LibC::Float*, ignore_cwise__ : LibC::Char*, info : Int32*)
    fun cla_heamv_(uplo : Int32*, n : Int32*, alpha : LibC::Float*, a : ComplexFloat*, lda : Int32*, x : ComplexFloat*, incx : Int32*, beta : LibC::Float*, y : LibC::Float*, incy : Int32*)
    fun cla_hercond_c_(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, c__ : LibC::Float*, capply : LibC::Char*, info : Int32*, work : ComplexFloat*, rwork : LibC::Float*, uplo_len : LibC::Int) : LibC::Double
    fun cla_hercond_x_(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, x : ComplexFloat*, info : Int32*, work : ComplexFloat*, rwork : LibC::Float*, uplo_len : LibC::Int) : LibC::Double
    fun cla_herfsx_extended_(prec_type__ : Int32*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, colequ : LibC::Char*, c__ : LibC::Float*, b : ComplexFloat*, ldb : Int32*, y : ComplexFloat*, ldy : Int32*, berr_out__ : LibC::Float*, n_norms__ : Int32*, errs_n__ : LibC::Float*, errs_c__ : LibC::Float*, res : ComplexFloat*, ayb : LibC::Float*, dy : ComplexFloat*, y_tail__ : ComplexFloat*, rcond : LibC::Float*, ithresh : Int32*, rthresh : LibC::Float*, dz_ub__ : LibC::Float*, ignore_cwise__ : LibC::Char*, info : Int32*, uplo_len : LibC::Int)
    fun cla_herpvgrw_(uplo : LibC::Char*, n : Int32*, info : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, work : LibC::Float*, uplo_len : LibC::Int) : LibC::Double
    fun cla_lin_berr_(n : Int32*, nz : Int32*, nrhs : Int32*, res : ComplexFloat*, ayb : LibC::Float*, berr : LibC::Float*)
    fun cla_porcond_c_(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, c__ : LibC::Float*, capply : LibC::Char*, info : Int32*, work : ComplexFloat*, rwork : LibC::Float*, uplo_len : LibC::Int) : LibC::Double
    fun cla_porcond_x_(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, x : ComplexFloat*, info : Int32*, work : ComplexFloat*, rwork : LibC::Float*, uplo_len : LibC::Int) : LibC::Double
    fun cla_porfsx_extended_(prec_type__ : Int32*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, colequ : LibC::Char*, c__ : LibC::Float*, b : ComplexFloat*, ldb : Int32*, y : ComplexFloat*, ldy : Int32*, berr_out__ : LibC::Float*, n_norms__ : Int32*, errs_n__ : LibC::Float*, errs_c__ : LibC::Float*, res : ComplexFloat*, ayb : LibC::Float*, dy : ComplexFloat*, y_tail__ : ComplexFloat*, rcond : LibC::Float*, ithresh : Int32*, rthresh : LibC::Float*, dz_ub__ : LibC::Float*, ignore_cwise__ : LibC::Char*, info : Int32*, uplo_len : LibC::Int)
    fun cla_porpvgrw_(uplo : LibC::Char*, ncols : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, work : LibC::Float*, uplo_len : LibC::Int) : LibC::Double
    fun cla_rpvgrw_(n : Int32*, ncols : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*) : LibC::Double
    fun cla_syamv_(uplo : Int32*, n : Int32*, alpha : LibC::Float*, a : ComplexFloat*, lda : Int32*, x : ComplexFloat*, incx : Int32*, beta : LibC::Float*, y : LibC::Float*, incy : Int32*)
    fun cla_syrcond_c_(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, c__ : LibC::Float*, capply : LibC::Char*, info : Int32*, work : ComplexFloat*, rwork : LibC::Float*, uplo_len : LibC::Int) : LibC::Double
    fun cla_syrcond_x_(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, x : ComplexFloat*, info : Int32*, work : ComplexFloat*, rwork : LibC::Float*, uplo_len : LibC::Int) : LibC::Double
    fun cla_syrfsx_extended_(prec_type__ : Int32*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, colequ : LibC::Char*, c__ : LibC::Float*, b : ComplexFloat*, ldb : Int32*, y : ComplexFloat*, ldy : Int32*, berr_out__ : LibC::Float*, n_norms__ : Int32*, errs_n__ : LibC::Float*, errs_c__ : LibC::Float*, res : ComplexFloat*, ayb : LibC::Float*, dy : ComplexFloat*, y_tail__ : ComplexFloat*, rcond : LibC::Float*, ithresh : Int32*, rthresh : LibC::Float*, dz_ub__ : LibC::Float*, ignore_cwise__ : LibC::Char*, info : Int32*, uplo_len : LibC::Int)
    fun cla_syrpvgrw_(uplo : LibC::Char*, n : Int32*, info : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, work : LibC::Float*, uplo_len : LibC::Int) : LibC::Double
    fun cla_wwaddw_(n : Int32*, x : ComplexFloat*, y : ComplexFloat*, w : ComplexFloat*)
    fun clabrd(m : Int32*, n : Int32*, nb : Int32*, a : ComplexFloat*, lda : Int32*, d__ : LibC::Float*, e : LibC::Float*, tauq : ComplexFloat*, taup : ComplexFloat*, x : ComplexFloat*, ldx : Int32*, y : ComplexFloat*, ldy : Int32*)
    fun clacgv(n : Int32*, x : ComplexFloat*, incx : Int32*)
    fun clacn2(n : Int32*, v : ComplexFloat*, x : ComplexFloat*, est : LibC::Float*, kase : Int32*, isave : Int32*)
    fun clacon(n : Int32*, v : ComplexFloat*, x : ComplexFloat*, est : LibC::Float*, kase : Int32*)
    fun clacp2(uplo : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, b : ComplexFloat*, ldb : Int32*)
    fun clacpy(uplo : LibC::Char*, m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*)
    fun clacrm(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : LibC::Float*, ldb : Int32*, c : ComplexFloat*, ldc : Int32*, rwork : LibC::Float*)
    fun clacrt(n : Int32*, cx : ComplexFloat*, incx : Int32*, cy : ComplexFloat*, incy : Int32*, c__ : ComplexFloat*, s : ComplexFloat*)
    fun cladiv(ret_val : ComplexFloat*, x : ComplexFloat*, y : ComplexFloat*)
    fun claed0(qsiz : Int32*, n : Int32*, d__ : LibC::Float*, e : LibC::Float*, q : ComplexFloat*, ldq : Int32*, qstore : ComplexFloat*, ldqs : Int32*, rwork : LibC::Float*, iwork : Int32*, info : Int32*)
    fun claed7(n : Int32*, cutpnt : Int32*, qsiz : Int32*, tlvls : Int32*, curlvl : Int32*, curpbm : Int32*, d__ : LibC::Float*, q : ComplexFloat*, ldq : Int32*, rho : LibC::Float*, indxq : Int32*, qstore : LibC::Float*, qptr : Int32*, prmptr : Int32*, perm : Int32*, givptr : Int32*, givcol : Int32*, givnum : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, iwork : Int32*, info : Int32*)
    fun claed8(k : Int32*, n : Int32*, qsiz : Int32*, q : ComplexFloat*, ldq : Int32*, d__ : LibC::Float*, rho : LibC::Float*, cutpnt : Int32*, z__ : LibC::Float*, dlamda : LibC::Float*, q2 : ComplexFloat*, ldq2 : Int32*, w : LibC::Float*, indxp : Int32*, indx : Int32*, indxq : Int32*, perm : Int32*, givptr : Int32*, givcol : Int32*, givnum : LibC::Float*, info : Int32*)
    fun claein(rightv : LibC::Char*, noinit : LibC::Char*, n : Int32*, h__ : ComplexFloat*, ldh : Int32*, w : ComplexFloat*, v : ComplexFloat*, b : ComplexFloat*, ldb : Int32*, rwork : LibC::Float*, eps3 : LibC::Float*, smlnum : LibC::Float*, info : Int32*)
    fun claesy(a : ComplexFloat*, b : ComplexFloat*, c__ : ComplexFloat*, rt1 : ComplexFloat*, rt2 : ComplexFloat*, evscal : ComplexFloat*, cs1 : ComplexFloat*, sn1 : ComplexFloat*)
    fun claev2(a : ComplexFloat*, b : ComplexFloat*, c__ : ComplexFloat*, rt1 : LibC::Float*, rt2 : LibC::Float*, cs1 : LibC::Float*, sn1 : ComplexFloat*)
    fun clag2z(m : Int32*, n : Int32*, sa : ComplexFloat*, ldsa : Int32*, a : ComplexDouble*, lda : Int32*, info : Int32*)
    fun clagge(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, d : LibC::Float*, a : ComplexFloat*, lda : Int32*, iseed : Int32*, work : ComplexFloat*, info : Int32*)
    fun claghe(n : Int32*, k : Int32*, d : LibC::Float*, a : ComplexFloat*, lda : Int32*, iseed : Int32*, work : ComplexFloat*, info : Int32*)
    fun clags2(upper : LibC::Char*, a1 : LibC::Float*, a2 : ComplexFloat*, a3 : LibC::Float*, b1 : LibC::Float*, b2 : ComplexFloat*, b3 : LibC::Float*, csu : LibC::Float*, snu : ComplexFloat*, csv : LibC::Float*, snv : ComplexFloat*, csq : LibC::Float*, snq : ComplexFloat*)
    fun clagsy(n : Int32*, k : Int32*, d : LibC::Float*, a : ComplexFloat*, lda : Int32*, iseed : Int32*, work : ComplexFloat*, info : Int32*)
    fun clagtm(trans : LibC::Char*, n : Int32*, nrhs : Int32*, alpha : LibC::Float*, dl : ComplexFloat*, d__ : ComplexFloat*, du : ComplexFloat*, x : ComplexFloat*, ldx : Int32*, beta : LibC::Float*, b : ComplexFloat*, ldb : Int32*)
    fun clahef(uplo : LibC::Char*, n : Int32*, nb : Int32*, kb : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, w : ComplexFloat*, ldw : Int32*, info : Int32*)
    fun clahqr(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h__ : ComplexFloat*, ldh : Int32*, w : ComplexFloat*, iloz : Int32*, ihiz : Int32*, z__ : ComplexFloat*, ldz : Int32*, info : Int32*)
    fun clahr2(n : Int32*, k : Int32*, nb : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, t : ComplexFloat*, ldt : Int32*, y : ComplexFloat*, ldy : Int32*)
    fun clahrd(n : Int32*, k : Int32*, nb : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, t : ComplexFloat*, ldt : Int32*, y : ComplexFloat*, ldy : Int32*)
    fun claic1(job : Int32*, j : Int32*, x : ComplexFloat*, sest : LibC::Float*, w : ComplexFloat*, gamma : ComplexFloat*, sestpr : LibC::Float*, s : ComplexFloat*, c__ : ComplexFloat*)
    fun clals0(icompq : Int32*, nl : Int32*, nr : Int32*, sqre : Int32*, nrhs : Int32*, b : ComplexFloat*, ldb : Int32*, bx : ComplexFloat*, ldbx : Int32*, perm : Int32*, givptr : Int32*, givcol : Int32*, ldgcol : Int32*, givnum : LibC::Float*, ldgnum : Int32*, poles : LibC::Float*, difl : LibC::Float*, difr : LibC::Float*, z__ : LibC::Float*, k : Int32*, c__ : LibC::Float*, s : LibC::Float*, rwork : LibC::Float*, info : Int32*)
    fun clalsa(icompq : Int32*, smlsiz : Int32*, n : Int32*, nrhs : Int32*, b : ComplexFloat*, ldb : Int32*, bx : ComplexFloat*, ldbx : Int32*, u : LibC::Float*, ldu : Int32*, vt : LibC::Float*, k : Int32*, difl : LibC::Float*, difr : LibC::Float*, z__ : LibC::Float*, poles : LibC::Float*, givptr : Int32*, givcol : Int32*, ldgcol : Int32*, perm : Int32*, givnum : LibC::Float*, c__ : LibC::Float*, s : LibC::Float*, rwork : LibC::Float*, iwork : Int32*, info : Int32*)
    fun clalsd(uplo : LibC::Char*, smlsiz : Int32*, n : Int32*, nrhs : Int32*, d__ : LibC::Float*, e : LibC::Float*, b : ComplexFloat*, ldb : Int32*, rcond : LibC::Float*, rank : Int32*, work : ComplexFloat*, rwork : LibC::Float*, iwork : Int32*, info : Int32*)
    fun clangb(norm : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexFloat*, ldab : Int32*, work : LibC::Float*) : LapackFloatReturn
    fun clange(norm : LibC::Char*, m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, work : LibC::Float*) : LapackFloatReturn
    fun clangt(norm : LibC::Char*, n : Int32*, dl : ComplexFloat*, d : ComplexFloat*, du : ComplexFloat*) : LapackFloatReturn
    fun clanhb(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, k : Int32*, ab : ComplexFloat*, ldab : Int32*, work : LibC::Float*) : LapackFloatReturn
    fun clanhe(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, work : LibC::Float*) : LapackFloatReturn
    fun clanhf(norm : LibC::Char*, transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, work : LibC::Float*) : LibC::Double
    fun clanhp(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, work : LibC::Float*) : LapackFloatReturn
    fun clanhs(norm : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, work : LibC::Float*) : LapackFloatReturn
    fun clanht(norm : LibC::Char*, n : Int32*, d : LibC::Float*, e : ComplexFloat*) : LapackFloatReturn
    fun clansb(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, k : Int32*, ab : ComplexFloat*, ldab : Int32*, work : LibC::Float*) : LapackFloatReturn
    fun clansp(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, work : LibC::Float*) : LapackFloatReturn
    fun clansy(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, work : LibC::Float*) : LapackFloatReturn
    fun clantb(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, k : Int32*, ab : ComplexFloat*, ldab : Int32*, work : LibC::Float*) : LapackFloatReturn
    fun clantp(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, ap : ComplexFloat*, work : LibC::Float*) : LapackFloatReturn
    fun clantr(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, work : LibC::Float*) : LapackFloatReturn
    fun clapll(n : Int32*, x : ComplexFloat*, incx : Int32*, y : ComplexFloat*, incy : Int32*, ssmin : LibC::Float*)
    fun clapmr(forwrd : Int32*, m : Int32*, n : Int32*, x : ComplexFloat*, ldx : Int32*, k : Int32*)
    fun clapmt(forwrd : Int32*, m : Int32*, n : Int32*, x : ComplexFloat*, ldx : Int32*, k : Int32*)
    fun claqgb(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexFloat*, ldab : Int32*, r__ : LibC::Float*, c__ : LibC::Float*, rowcnd : LibC::Float*, colcnd : LibC::Float*, amax : LibC::Float*, equed : LibC::Char*)
    fun claqge(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, r__ : LibC::Float*, c__ : LibC::Float*, rowcnd : LibC::Float*, colcnd : LibC::Float*, amax : LibC::Float*, equed : LibC::Char*)
    fun claqhb(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexFloat*, ldab : Int32*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, equed : LibC::Char*)
    fun claqhe(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, equed : LibC::Char*)
    fun claqhp(uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, equed : LibC::Char*)
    fun claqp2(m : Int32*, n : Int32*, offset : Int32*, a : ComplexFloat*, lda : Int32*, jpvt : Int32*, tau : ComplexFloat*, vn1 : LibC::Float*, vn2 : LibC::Float*, work : ComplexFloat*)
    fun claqps(m : Int32*, n : Int32*, offset : Int32*, nb : Int32*, kb : Int32*, a : ComplexFloat*, lda : Int32*, jpvt : Int32*, tau : ComplexFloat*, vn1 : LibC::Float*, vn2 : LibC::Float*, auxv : ComplexFloat*, f : ComplexFloat*, ldf : Int32*)
    fun claqr0(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h__ : ComplexFloat*, ldh : Int32*, w : ComplexFloat*, iloz : Int32*, ihiz : Int32*, z__ : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun claqr1(n : Int32*, h__ : ComplexFloat*, ldh : Int32*, s1 : ComplexFloat*, s2 : ComplexFloat*, v : ComplexFloat*)
    fun claqr2(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ktop : Int32*, kbot : Int32*, nw : Int32*, h__ : ComplexFloat*, ldh : Int32*, iloz : Int32*, ihiz : Int32*, z__ : ComplexFloat*, ldz : Int32*, ns : Int32*, nd : Int32*, sh : ComplexFloat*, v : ComplexFloat*, ldv : Int32*, nh : Int32*, t : ComplexFloat*, ldt : Int32*, nv : Int32*, wv : ComplexFloat*, ldwv : Int32*, work : ComplexFloat*, lwork : Int32*)
    fun claqr3(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ktop : Int32*, kbot : Int32*, nw : Int32*, h__ : ComplexFloat*, ldh : Int32*, iloz : Int32*, ihiz : Int32*, z__ : ComplexFloat*, ldz : Int32*, ns : Int32*, nd : Int32*, sh : ComplexFloat*, v : ComplexFloat*, ldv : Int32*, nh : Int32*, t : ComplexFloat*, ldt : Int32*, nv : Int32*, wv : ComplexFloat*, ldwv : Int32*, work : ComplexFloat*, lwork : Int32*)
    fun claqr4(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h__ : ComplexFloat*, ldh : Int32*, w : ComplexFloat*, iloz : Int32*, ihiz : Int32*, z__ : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun claqr5(wantt : LibC::Char*, wantz : LibC::Char*, kacc22 : Int32*, n : Int32*, ktop : Int32*, kbot : Int32*, nshfts : Int32*, s : ComplexFloat*, h__ : ComplexFloat*, ldh : Int32*, iloz : Int32*, ihiz : Int32*, z__ : ComplexFloat*, ldz : Int32*, v : ComplexFloat*, ldv : Int32*, u : ComplexFloat*, ldu : Int32*, nv : Int32*, wv : ComplexFloat*, ldwv : Int32*, nh : Int32*, wh : ComplexFloat*, ldwh : Int32*)
    fun claqsb(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexFloat*, ldab : Int32*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, equed : LibC::Char*)
    fun claqsp(uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, equed : LibC::Char*)
    fun claqsy(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, equed : LibC::Char*)
    fun clar1v(n : Int32*, b1 : Int32*, bn : Int32*, lambda : LibC::Float*, d__ : LibC::Float*, l : LibC::Float*, ld : LibC::Float*, lld : LibC::Float*, pivmin : LibC::Float*, gaptol : LibC::Float*, z__ : ComplexFloat*, wantnc : LibC::Char*, negcnt : Int32*, ztz : LibC::Float*, mingma : LibC::Float*, r__ : Int32*, isuppz : Int32*, nrminv : LibC::Float*, resid : LibC::Float*, rqcorr : LibC::Float*, work : LibC::Float*)
    fun clar2v(n : Int32*, x : ComplexFloat*, y : ComplexFloat*, z__ : ComplexFloat*, incx : Int32*, c__ : LibC::Float*, s : ComplexFloat*, incc : Int32*)
    fun clarcm(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, c : ComplexFloat*, ldc : Int32*, rwork : LibC::Float*)
    fun clarf(side : LibC::Char*, m : Int32*, n : Int32*, v : ComplexFloat*, incv : Int32*, tau : ComplexFloat*, c : ComplexFloat*, ldc : Int32*, work : ComplexFloat*)
    fun clarfb(side : LibC::Char*, trans : LibC::Char*, direct : LibC::Char*, storev : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, v : ComplexFloat*, ldv : Int32*, t : ComplexFloat*, ldt : Int32*, c : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, ldwork : Int32*)
    fun clarfg(n : Int32*, alpha : ComplexFloat*, x : ComplexFloat*, incx : Int32*, tau : ComplexFloat*)
    fun clarfp(n : Int32*, alpha : ComplexFloat*, x : ComplexFloat*, incx : Int32*, tau : ComplexFloat*)
    fun clarft(direct : LibC::Char*, storev : LibC::Char*, n : Int32*, k : Int32*, v : ComplexFloat*, ldv : Int32*, tau : ComplexFloat*, t : ComplexFloat*, ldt : Int32*)
    fun clarfx(side : LibC::Char*, m : Int32*, n : Int32*, v : ComplexFloat*, tau : ComplexFloat*, c : ComplexFloat*, ldc : Int32*, work : ComplexFloat*)
    fun clargv(n : Int32*, x : ComplexFloat*, incx : Int32*, y : ComplexFloat*, incy : Int32*, c__ : LibC::Float*, incc : Int32*)
    fun clarnv(idist : Int32*, iseed : Int32*, n : Int32*, x : ComplexFloat*)
    fun clarrv(n : Int32*, vl : LibC::Float*, vu : LibC::Float*, d__ : LibC::Float*, l : LibC::Float*, pivmin : LibC::Float*, isplit : Int32*, m : Int32*, dol : Int32*, dou : Int32*, minrgp : LibC::Float*, rtol1 : LibC::Float*, rtol2 : LibC::Float*, w : LibC::Float*, werr : LibC::Float*, wgap : LibC::Float*, iblock : Int32*, indexw : Int32*, gers : LibC::Float*, z__ : ComplexFloat*, ldz : Int32*, isuppz : Int32*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun clarscl2(m : Int32*, n : Int32*, d__ : LibC::Float*, x : ComplexFloat*, ldx : Int32*)
    fun clartg(f : ComplexFloat*, g : ComplexFloat*, cs : LibC::Float*, sn : ComplexFloat*, r__ : ComplexFloat*)
    fun clartv(n : Int32*, x : ComplexFloat*, incx : Int32*, y : ComplexFloat*, incy : Int32*, c__ : LibC::Float*, s : ComplexFloat*, incc : Int32*)
    fun clarz(side : LibC::Char*, m : Int32*, n : Int32*, l : Int32*, v : ComplexFloat*, incv : Int32*, tau : ComplexFloat*, c__ : ComplexFloat*, ldc : Int32*, work : ComplexFloat*)
    fun clarzb(side : LibC::Char*, trans : LibC::Char*, direct : LibC::Char*, storev : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, v : ComplexFloat*, ldv : Int32*, t : ComplexFloat*, ldt : Int32*, c__ : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, ldwork : Int32*)
    fun clarzt(direct : LibC::Char*, storev : LibC::Char*, n : Int32*, k : Int32*, v : ComplexFloat*, ldv : Int32*, tau : ComplexFloat*, t : ComplexFloat*, ldt : Int32*)
    fun clascl(type : LibC::Char*, kl : Int32*, ku : Int32*, cfrom : LibC::Float*, cto : LibC::Float*, m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, info : Int32*)
    fun clascl2(m : Int32*, n : Int32*, d__ : LibC::Float*, x : ComplexFloat*, ldx : Int32*)
    fun claset(uplo : LibC::Char*, m : Int32*, n : Int32*, alpha : ComplexFloat*, beta : ComplexFloat*, a : ComplexFloat*, lda : Int32*)
    fun clasr(side : LibC::Char*, pivot : LibC::Char*, direct : LibC::Char*, m : Int32*, n : Int32*, c__ : LibC::Float*, s : LibC::Float*, a : ComplexFloat*, lda : Int32*)
    fun classq(n : Int32*, x : ComplexFloat*, incx : Int32*, scale : LibC::Float*, sumsq : LibC::Float*)
    fun claswp(n : Int32*, a : ComplexFloat*, lda : Int32*, k1 : Int32*, k2 : Int32*, ipiv : Int32*, incx : Int32*)
    fun clasyf(uplo : LibC::Char*, n : Int32*, nb : Int32*, kb : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, w : ComplexFloat*, ldw : Int32*, info : Int32*)
    fun clatbs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, normin : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexFloat*, ldab : Int32*, x : ComplexFloat*, scale : LibC::Float*, cnorm : LibC::Float*, info : Int32*)
    fun clatdf(ijob : Int32*, n : Int32*, z__ : ComplexFloat*, ldz : Int32*, rhs : ComplexFloat*, rdsum : LibC::Float*, rdscal : LibC::Float*, ipiv : Int32*, jpiv : Int32*)
    fun clatms(m : Int32*, n : Int32*, dist : LibC::Char*, iseed : Int32*, sym : LibC::Char*, d : LibC::Float*, mode : Int32*, cond : LibC::Float*, dmax : LibC::Float*, kl : Int32*, ku : Int32*, pack : LibC::Char*, a : ComplexFloat*, lda : Int32*, work : ComplexFloat*, info : Int32*)
    fun clatps(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, normin : LibC::Char*, n : Int32*, ap : ComplexFloat*, x : ComplexFloat*, scale : LibC::Float*, cnorm : LibC::Float*, info : Int32*)
    fun clatrd(uplo : LibC::Char*, n : Int32*, nb : Int32*, a : ComplexFloat*, lda : Int32*, e : LibC::Float*, tau : ComplexFloat*, w : ComplexFloat*, ldw : Int32*)
    fun clatrs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, normin : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, x : ComplexFloat*, scale : LibC::Float*, cnorm : LibC::Float*, info : Int32*)
    fun clatrz(m : Int32*, n : Int32*, l : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*)
    fun clatzm(side : LibC::Char*, m : Int32*, n : Int32*, v : ComplexFloat*, incv : Int32*, tau : ComplexFloat*, c1 : ComplexFloat*, c2 : ComplexFloat*, ldc : Int32*, work : ComplexFloat*)
    fun clauu2(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, info : Int32*)
    fun clauum(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, info : Int32*)
    fun cpbcon(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexFloat*, ldab : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cpbequ(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexFloat*, ldab : Int32*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, info : Int32*)
    fun cpbrfs(uplo : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : ComplexFloat*, ldab : Int32*, afb : ComplexFloat*, ldafb : Int32*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cpbstf(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexFloat*, ldab : Int32*, info : Int32*)
    fun cpbsv(uplo : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : ComplexFloat*, ldab : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun cpbsvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : ComplexFloat*, ldab : Int32*, afb : ComplexFloat*, ldafb : Int32*, equed : LibC::Char*, s : LibC::Float*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cpbtf2(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexFloat*, ldab : Int32*, info : Int32*)
    fun cpbtrf(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexFloat*, ldab : Int32*, info : Int32*)
    fun cpbtrs(uplo : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : ComplexFloat*, ldab : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun cpftrf(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, info : Int32*)
    fun cpftri(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, info : Int32*)
    fun cpftrs(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun cpocon(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cpoequ(n : Int32*, a : ComplexFloat*, lda : Int32*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, info : Int32*)
    fun cpoequb(n : Int32*, a : ComplexFloat*, lda : Int32*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, info : Int32*)
    fun cporfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cporfsx(uplo : LibC::Char*, equed : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, s : LibC::Float*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cposv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun cposvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, equed : LibC::Char*, s : LibC::Float*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cposvxx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, equed : LibC::Char*, s : LibC::Float*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, rpvgrw : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cpotf2(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, info : Int32*)
    fun cpotrf(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, info : Int32*)
    fun cpotrf2(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, info : Int32*)
    fun cpotri(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, info : Int32*)
    fun cpotrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun cppcon(uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, anorm : LibC::Float*, rcond : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cppequ(uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, info : Int32*)
    fun cpprfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexFloat*, afp : ComplexFloat*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cppsv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexFloat*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun cppsvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexFloat*, afp : ComplexFloat*, equed : LibC::Char*, s : LibC::Float*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cpptrf(uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, info : Int32*)
    fun cpptri(uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, info : Int32*)
    fun cpptrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexFloat*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun cpstf2(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, piv : Int32*, rank : Int32*, tol : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun cpstrf(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, piv : Int32*, rank : Int32*, tol : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun cptcon(n : Int32*, d : LibC::Float*, e : ComplexFloat*, anorm : LibC::Float*, rcond : LibC::Float*, rwork : LibC::Float*, info : Int32*)
    fun cpteqr(compz : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : LibC::Float*, info : Int32*)
    fun cptrfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, d : LibC::Float*, e : ComplexFloat*, df : LibC::Float*, ef : ComplexFloat*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cptsv(n : Int32*, nrhs : Int32*, d : LibC::Float*, e : ComplexFloat*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun cptsvx(fact : LibC::Char*, n : Int32*, nrhs : Int32*, d : LibC::Float*, e : ComplexFloat*, df : LibC::Float*, ef : ComplexFloat*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cpttrf(n : Int32*, d : LibC::Float*, e : ComplexFloat*, info : Int32*)
    fun cpttrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, d : LibC::Float*, e : ComplexFloat*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun cptts2(iuplo : Int32*, n : Int32*, nrhs : Int32*, d__ : LibC::Float*, e : ComplexFloat*, b : ComplexFloat*, ldb : Int32*)
    fun crot(n : Int32*, cx : ComplexFloat*, incx : Int32*, cy : ComplexFloat*, incy : Int32*, c__ : LibC::Float*, s : ComplexFloat*)
    fun cspcon(uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, ipiv : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : ComplexFloat*, info : Int32*)
    fun cspmv(uplo : LibC::Char*, n : Int32*, alpha : ComplexFloat*, ap : ComplexFloat*, x : ComplexFloat*, incx : Int32*, beta : ComplexFloat*, y : ComplexFloat*, incy : Int32*)
    fun cspr(uplo : LibC::Char*, n : Int32*, alpha : ComplexFloat*, x : ComplexFloat*, incx : Int32*, ap : ComplexFloat*)
    fun csprfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexFloat*, afp : ComplexFloat*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun cspsv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexFloat*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun cspsvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexFloat*, afp : ComplexFloat*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun csptrf(uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, ipiv : Int32*, info : Int32*)
    fun csptri(uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, ipiv : Int32*, work : ComplexFloat*, info : Int32*)
    fun csptrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexFloat*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun csrscl(n : Int32*, sa : LibC::Float*, sx : ComplexFloat*, incx : Int32*)
    fun cstedc(compz : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun cstegr(jobz : LibC::Char*, range : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, isuppz : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun cstein(n : Int32*, d : LibC::Float*, e : LibC::Float*, m : Int32*, w : LibC::Float*, iblock : Int32*, isplit : Int32*, z : ComplexFloat*, ldz : Int32*, work : LibC::Float*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun cstemr(jobz : LibC::Char*, range : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, m : Int32*, w : LibC::Float*, z : ComplexFloat*, ldz : Int32*, nzc : Int32*, isuppz : Int32*, tryrac : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun csteqr(compz : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*, z : ComplexFloat*, ldz : Int32*, work : LibC::Float*, info : Int32*)
    fun csycon(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : ComplexFloat*, info : Int32*)
    fun csycon_3(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, e : ComplexFloat*, ipiv : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : ComplexFloat*, info : Int32*)
    fun csyconv(uplo : LibC::Char*, way : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, e : ComplexFloat*, info : Int32*)
    fun csyequb(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, work : ComplexFloat*, info : Int32*)
    fun csymv(uplo : LibC::Char*, n : Int32*, alpha : ComplexFloat*, a : ComplexFloat*, lda : Int32*, x : ComplexFloat*, incx : Int32*, beta : ComplexFloat*, y : ComplexFloat*, incy : Int32*)
    fun csyr(uplo : LibC::Char*, n : Int32*, alpha : ComplexFloat*, x : ComplexFloat*, incx : Int32*, a : ComplexFloat*, lda : Int32*)
    fun csyrfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun csyrfsx(uplo : LibC::Char*, equed : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, s : LibC::Float*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun csysv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun csysv_aa(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun csysv_aa_2stage(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, tb : ComplexFloat*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun csysv_rk(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, e : ComplexFloat*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun csysv_rook(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun csysvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun csysvxx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, af : ComplexFloat*, ldaf : Int32*, ipiv : Int32*, equed : LibC::Char*, s : LibC::Float*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, rcond : LibC::Float*, rpvgrw : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun csyswapr(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, i1 : Int32*, i2 : Int32*)
    fun csytf2(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun csytrf(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun csytrf_aa(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun csytrf_aa_2stage(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, tb : ComplexFloat*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun csytrf_rk(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, e : ComplexFloat*, ipiv : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun csytrf_rook(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun csytri(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, work : ComplexFloat*, info : Int32*)
    fun csytri2(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun csytri2x(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, work : ComplexFloat*, nb : Int32*, info : Int32*)
    fun csytri_3(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, e : ComplexFloat*, ipiv : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun csytrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun csytrs2(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, info : Int32*)
    fun csytrs_3(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, e : ComplexFloat*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun csytrs_aa(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun csytrs_aa_2stage(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, tb : ComplexFloat*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun csytrs_rook(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, ipiv : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun ctbcon(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexFloat*, ldab : Int32*, rcond : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun ctbrfs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : ComplexFloat*, ldab : Int32*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun ctbtrs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : ComplexFloat*, ldab : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun ctfsm(transr : LibC::Char*, side : LibC::Char*, uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, m : Int32*, n : Int32*, alpha : ComplexFloat*, a : ComplexFloat*, b : ComplexFloat*, ldb : Int32*)
    fun ctftri(transr : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, a : ComplexFloat*, info : Int32*)
    fun ctfttp(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, arf : ComplexFloat*, ap : ComplexFloat*, info : Int32*)
    fun ctfttr(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, arf : ComplexFloat*, a : ComplexFloat*, lda : Int32*, info : Int32*)
    fun ctgevc(side : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, s : ComplexFloat*, lds : Int32*, p : ComplexFloat*, ldp : Int32*, vl : ComplexFloat*, ldvl : Int32*, vr : ComplexFloat*, ldvr : Int32*, mm : Int32*, m : Int32*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun ctgex2(wantq : LibC::Char*, wantz : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, q : ComplexFloat*, ldq : Int32*, z__ : ComplexFloat*, ldz : Int32*, j1 : Int32*, info : Int32*)
    fun ctgexc(wantq : Int32*, wantz : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, q : ComplexFloat*, ldq : Int32*, z : ComplexFloat*, ldz : Int32*, ifst : Int32*, ilst : Int32*, info : Int32*)
    fun ctgsen(ijob : Int32*, wantq : Int32*, wantz : Int32*, select : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, alpha : ComplexFloat*, beta : ComplexFloat*, q : ComplexFloat*, ldq : Int32*, z : ComplexFloat*, ldz : Int32*, m : Int32*, pl : LibC::Float*, pr : LibC::Float*, dif : LibC::Float*, work : ComplexFloat*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun ctgsja(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, p : Int32*, n : Int32*, k : Int32*, l : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, tola : LibC::Float*, tolb : LibC::Float*, alpha : LibC::Float*, beta : LibC::Float*, u : ComplexFloat*, ldu : Int32*, v : ComplexFloat*, ldv : Int32*, q : ComplexFloat*, ldq : Int32*, work : ComplexFloat*, ncycle : Int32*, info : Int32*)
    fun ctgsna(job : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, vl : ComplexFloat*, ldvl : Int32*, vr : ComplexFloat*, ldvr : Int32*, s : LibC::Float*, dif : LibC::Float*, mm : Int32*, m : Int32*, work : ComplexFloat*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun ctgsy2(trans : LibC::Char*, ijob : Int32*, m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, c__ : ComplexFloat*, ldc : Int32*, d__ : ComplexFloat*, ldd : Int32*, e : ComplexFloat*, lde : Int32*, f : ComplexFloat*, ldf : Int32*, scale : LibC::Float*, rdsum : LibC::Float*, rdscal : LibC::Float*, info : Int32*)
    fun ctgsyl(trans : LibC::Char*, ijob : Int32*, m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, c : ComplexFloat*, ldc : Int32*, d : ComplexFloat*, ldd : Int32*, e : ComplexFloat*, lde : Int32*, f : ComplexFloat*, ldf : Int32*, dif : LibC::Float*, scale : LibC::Float*, work : ComplexFloat*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun ctpcon(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, ap : ComplexFloat*, rcond : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun ctplqt(m : Int32*, n : Int32*, l : Int32*, mb : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, t : ComplexFloat*, ldt : Int32*, work : ComplexFloat*, info : Int32*)
    fun ctplqt2(m : Int32*, n : Int32*, l : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, t : ComplexFloat*, ldt : Int32*, info : Int32*)
    fun ctpmlqt(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, mb : Int32*, v : ComplexFloat*, ldv : Int32*, t : ComplexFloat*, ldt : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, info : Int32*)
    fun ctpmqrt(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, nb : Int32*, v : ComplexFloat*, ldv : Int32*, t : ComplexFloat*, ldt : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, info : Int32*)
    fun ctpqrt(m : Int32*, n : Int32*, l : Int32*, nb : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, t : ComplexFloat*, ldt : Int32*, work : ComplexFloat*, info : Int32*)
    fun ctpqrt2(m : Int32*, n : Int32*, l : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, t : ComplexFloat*, ldt : Int32*, info : Int32*)
    fun ctprfb(side : LibC::Char*, trans : LibC::Char*, direct : LibC::Char*, storev : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, v : ComplexFloat*, ldv : Int32*, t : ComplexFloat*, ldt : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, work : ComplexFloat*, ldwork : Int32*)
    fun ctprfs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexFloat*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun ctptri(uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, ap : ComplexFloat*, info : Int32*)
    fun ctptrs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexFloat*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun ctpttf(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, arf : ComplexFloat*, info : Int32*)
    fun ctpttr(uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, a : ComplexFloat*, lda : Int32*, info : Int32*)
    fun ctrcon(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, rcond : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun ctrevc(side : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, t : ComplexFloat*, ldt : Int32*, vl : ComplexFloat*, ldvl : Int32*, vr : ComplexFloat*, ldvr : Int32*, mm : Int32*, m : Int32*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun ctrevc3(side : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, t : ComplexFloat*, ldt : Int32*, vl : ComplexFloat*, ldvl : Int32*, vr : ComplexFloat*, ldvr : Int32*, mm : Int32*, m : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, info : Int32*)
    fun ctrexc(compq : LibC::Char*, n : Int32*, t : ComplexFloat*, ldt : Int32*, q : ComplexFloat*, ldq : Int32*, ifst : Int32*, ilst : Int32*, info : Int32*)
    fun ctrrfs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, x : ComplexFloat*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : ComplexFloat*, rwork : LibC::Float*, info : Int32*)
    fun ctrsen(job : LibC::Char*, compq : LibC::Char*, select : Int32*, n : Int32*, t : ComplexFloat*, ldt : Int32*, q : ComplexFloat*, ldq : Int32*, w : ComplexFloat*, m : Int32*, s : LibC::Float*, sep : LibC::Float*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun ctrsna(job : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, t : ComplexFloat*, ldt : Int32*, vl : ComplexFloat*, ldvl : Int32*, vr : ComplexFloat*, ldvr : Int32*, s : LibC::Float*, sep : LibC::Float*, mm : Int32*, m : Int32*, work : ComplexFloat*, ldwork : Int32*, rwork : LibC::Float*, info : Int32*)
    fun ctrsyl(trana : LibC::Char*, tranb : LibC::Char*, isgn : Int32*, m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, c : ComplexFloat*, ldc : Int32*, scale : LibC::Float*, info : Int32*)
    fun ctrsyl3(trana : LibC::Char*, tranb : LibC::Char*, isgn : Int32*, m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, c : ComplexFloat*, ldc : Int32*, scale : LibC::Float*, swork : LibC::Float*, ldswork : Int32*, info : Int32*)
    fun ctrti2(uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, info : Int32*)
    fun ctrtri(uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, info : Int32*)
    fun ctrtrs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexFloat*, lda : Int32*, b : ComplexFloat*, ldb : Int32*, info : Int32*)
    fun ctrttf(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, arf : ComplexFloat*, info : Int32*)
    fun ctrttp(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, ap : ComplexFloat*, info : Int32*)
    fun ctzrqf(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, info : Int32*)
    fun ctzrzf(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cunbdb(trans : LibC::Char*, signs : LibC::Char*, m : Int32*, p : Int32*, q : Int32*, x11 : ComplexFloat*, ldx11 : Int32*, x12 : ComplexFloat*, ldx12 : Int32*, x21 : ComplexFloat*, ldx21 : Int32*, x22 : ComplexFloat*, ldx22 : Int32*, theta : LibC::Float*, phi : LibC::Float*, taup1 : ComplexFloat*, taup2 : ComplexFloat*, tauq1 : ComplexFloat*, tauq2 : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cuncsd(jobu1 : LibC::Char*, jobu2 : LibC::Char*, jobv1t : LibC::Char*, jobv2t : LibC::Char*, trans : LibC::Char*, signs : LibC::Char*, m : Int32*, p : Int32*, q : Int32*, x11 : ComplexFloat*, ldx11 : Int32*, x12 : ComplexFloat*, ldx12 : Int32*, x21 : ComplexFloat*, ldx21 : Int32*, x22 : ComplexFloat*, ldx22 : Int32*, theta : LibC::Float*, u1 : ComplexFloat*, ldu1 : Int32*, u2 : ComplexFloat*, ldu2 : Int32*, v1_t : ComplexFloat*, ldv1t : Int32*, v2_t : ComplexFloat*, ldv2t : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, iwork : Int32*, info : Int32*)
    fun cuncsd2by1(jobu1 : LibC::Char*, jobu2 : LibC::Char*, jobv1t : LibC::Char*, m : Int32*, p : Int32*, q : Int32*, x11 : ComplexFloat*, ldx11 : Int32*, x21 : ComplexFloat*, ldx21 : Int32*, theta : LibC::Float*, u1 : ComplexFloat*, ldu1 : Int32*, u2 : ComplexFloat*, ldu2 : Int32*, v1_t : ComplexFloat*, ldv1t : Int32*, work : ComplexFloat*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, iwork : Int32*, info : Int32*)
    fun cung2l(m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, info : Int32*)
    fun cung2r(m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, info : Int32*)
    fun cungbr(vect : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cunghr(n : Int32*, ilo : Int32*, ihi : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cungl2(m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, info : Int32*)
    fun cunglq(m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cungql(m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cungqr(m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cungr2(m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, info : Int32*)
    fun cungrq(m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cungtr(uplo : LibC::Char*, n : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cungtsqr_row(m : Int32*, n : Int32*, mb : Int32*, nb : Int32*, a : ComplexFloat*, lda : Int32*, t : ComplexFloat*, ldt : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cunm2l(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, c__ : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, info : Int32*)
    fun cunm2r(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, c__ : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, info : Int32*)
    fun cunmbr(vect : LibC::Char*, side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, c : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cunmhr(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, ilo : Int32*, ihi : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, c : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cunml2(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, c__ : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, info : Int32*)
    fun cunmlq(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, c : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cunmql(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, c : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cunmqr(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, c : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cunmr2(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, c__ : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, info : Int32*)
    fun cunmr3(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, c__ : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, info : Int32*)
    fun cunmrq(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, c : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cunmrz(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, c : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cunmtr(side : LibC::Char*, uplo : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*, tau : ComplexFloat*, c : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, lwork : Int32*, info : Int32*)
    fun cupgtr(uplo : LibC::Char*, n : Int32*, ap : ComplexFloat*, tau : ComplexFloat*, q : ComplexFloat*, ldq : Int32*, work : ComplexFloat*, info : Int32*)
    fun cupmtr(side : LibC::Char*, uplo : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, ap : ComplexFloat*, tau : ComplexFloat*, c : ComplexFloat*, ldc : Int32*, work : ComplexFloat*, info : Int32*)
    fun dbbcsd(jobu1 : LibC::Char*, jobu2 : LibC::Char*, jobv1t : LibC::Char*, jobv2t : LibC::Char*, trans : LibC::Char*, m : Int32*, p : Int32*, q : Int32*, theta : LibC::Double*, phi : LibC::Double*, u1 : LibC::Double*, ldu1 : Int32*, u2 : LibC::Double*, ldu2 : Int32*, v1_t : LibC::Double*, ldv1t : Int32*, v2_t : LibC::Double*, ldv2t : Int32*, b11_d : LibC::Double*, b11_e : LibC::Double*, b12_d : LibC::Double*, b12_e : LibC::Double*, b21d : LibC::Double*, b21e : LibC::Double*, b22d : LibC::Double*, b22e : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dbdsdc(uplo : LibC::Char*, compq : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*, u : LibC::Double*, ldu : Int32*, vt : LibC::Double*, ldvt : Int32*, q : LibC::Double*, iq : Int32*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dbdsqr(uplo : LibC::Char*, n : Int32*, ncvt : Int32*, nru : Int32*, ncc : Int32*, d : LibC::Double*, e : LibC::Double*, vt : LibC::Double*, ldvt : Int32*, u : LibC::Double*, ldu : Int32*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*, info : Int32*)
    fun dbdsvdx(uplo : LibC::Char*, jobz : LibC::Char*, range : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, ns : Int32*, s : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun ddisna(job : LibC::Char*, m : Int32*, n : Int32*, d : LibC::Double*, sep : LibC::Double*, info : Int32*)
    fun dgbbrd(vect : LibC::Char*, m : Int32*, n : Int32*, ncc : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Double*, ldab : Int32*, d : LibC::Double*, e : LibC::Double*, q : LibC::Double*, ldq : Int32*, pt : LibC::Double*, ldpt : Int32*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*, info : Int32*)
    fun dgbcon(norm : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Double*, ldab : Int32*, ipiv : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dgbequ(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Double*, ldab : Int32*, r : LibC::Double*, c : LibC::Double*, rowcnd : LibC::Double*, colcnd : LibC::Double*, amax : LibC::Double*, info : Int32*)
    fun dgbequb(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Double*, ldab : Int32*, r : LibC::Double*, c : LibC::Double*, rowcnd : LibC::Double*, colcnd : LibC::Double*, amax : LibC::Double*, info : Int32*)
    fun dgbrfs(trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : LibC::Double*, ldab : Int32*, afb : LibC::Double*, ldafb : Int32*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dgbrfsx(trans : LibC::Char*, equed : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : LibC::Double*, ldab : Int32*, afb : LibC::Double*, ldafb : Int32*, ipiv : Int32*, r : LibC::Double*, c : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dgbsv(n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : LibC::Double*, ldab : Int32*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dgbsvx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : LibC::Double*, ldab : Int32*, afb : LibC::Double*, ldafb : Int32*, ipiv : Int32*, equed : LibC::Char*, r : LibC::Double*, c : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dgbsvxx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : LibC::Double*, ldab : Int32*, afb : LibC::Double*, ldafb : Int32*, ipiv : Int32*, equed : LibC::Char*, r : LibC::Double*, c : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, rpvgrw : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dgbtf2(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Double*, ldab : Int32*, ipiv : Int32*, info : Int32*)
    fun dgbtrf(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Double*, ldab : Int32*, ipiv : Int32*, info : Int32*)
    fun dgbtrs(trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : LibC::Double*, ldab : Int32*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dgebak(job : LibC::Char*, side : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, scale : LibC::Double*, m : Int32*, v : LibC::Double*, ldv : Int32*, info : Int32*)
    fun dgebal(job : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, ilo : Int32*, ihi : Int32*, scale : LibC::Double*, info : Int32*)
    fun dgebd2(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, d__ : LibC::Double*, e : LibC::Double*, tauq : LibC::Double*, taup : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dgebrd(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, d : LibC::Double*, e : LibC::Double*, tauq : LibC::Double*, taup : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgecon(norm : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dgeequ(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, r : LibC::Double*, c : LibC::Double*, rowcnd : LibC::Double*, colcnd : LibC::Double*, amax : LibC::Double*, info : Int32*)
    fun dgeequb(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, r : LibC::Double*, c : LibC::Double*, rowcnd : LibC::Double*, colcnd : LibC::Double*, amax : LibC::Double*, info : Int32*)
    fun dgees(jobvs : LibC::Char*, sort : LibC::Char*, select : LapackDSelect2, n : Int32*, a : LibC::Double*, lda : Int32*, sdim : Int32*, wr : LibC::Double*, wi : LibC::Double*, vs : LibC::Double*, ldvs : Int32*, work : LibC::Double*, lwork : Int32*, bwork : Int32*, info : Int32*)
    fun dgeesx(jobvs : LibC::Char*, sort : LibC::Char*, select : LapackDSelect2, sense : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, sdim : Int32*, wr : LibC::Double*, wi : LibC::Double*, vs : LibC::Double*, ldvs : Int32*, rconde : LibC::Double*, rcondv : LibC::Double*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, bwork : Int32*, info : Int32*)
    fun dgeev(jobvl : LibC::Char*, jobvr : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, wr : LibC::Double*, wi : LibC::Double*, vl : LibC::Double*, ldvl : Int32*, vr : LibC::Double*, ldvr : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgeevx(balanc : LibC::Char*, jobvl : LibC::Char*, jobvr : LibC::Char*, sense : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, wr : LibC::Double*, wi : LibC::Double*, vl : LibC::Double*, ldvl : Int32*, vr : LibC::Double*, ldvr : Int32*, ilo : Int32*, ihi : Int32*, scale : LibC::Double*, abnrm : LibC::Double*, rconde : LibC::Double*, rcondv : LibC::Double*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun dgegs(jobvsl : LibC::Char*, jobvsr : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, alphar : LibC::Double*, alphai : LibC::Double*, beta : LibC::Double*, vsl : LibC::Double*, ldvsl : Int32*, vsr : LibC::Double*, ldvsr : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgegv(jobvl : LibC::Char*, jobvr : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, alphar : LibC::Double*, alphai : LibC::Double*, beta : LibC::Double*, vl : LibC::Double*, ldvl : Int32*, vr : LibC::Double*, ldvr : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgehd2(n : Int32*, ilo : Int32*, ihi : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dgehrd(n : Int32*, ilo : Int32*, ihi : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgejsv(joba : LibC::Char*, jobu : LibC::Char*, jobv : LibC::Char*, jobr : LibC::Char*, jobt : LibC::Char*, jobp : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, sva : LibC::Double*, u : LibC::Double*, ldu : Int32*, v : LibC::Double*, ldv : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun dgelq(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, t : LibC::Double*, tsize : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgelq2(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dgelqf(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgels(trans : LibC::Char*, m : Int32*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgelsd(m : Int32*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, s : LibC::Double*, rcond : LibC::Double*, rank : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun dgelss(m : Int32*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, s : LibC::Double*, rcond : LibC::Double*, rank : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgelsx(m : Int32*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, jpvt : Int32*, rcond : LibC::Double*, rank : Int32*, work : LibC::Double*, info : Int32*)
    fun dgelsy(m : Int32*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, jpvt : Int32*, rcond : LibC::Double*, rank : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgemlq(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, t : LibC::Double*, tsize : Int32*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgemqr(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, t : LibC::Double*, tsize : Int32*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgemqrt(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, nb : Int32*, v : LibC::Double*, ldv : Int32*, t : LibC::Double*, ldt : Int32*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*, info : Int32*)
    fun dgeql2(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dgeqlf(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgeqp3(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, jpvt : Int32*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgeqpf(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, jpvt : Int32*, tau : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dgeqr(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, t : LibC::Double*, tsize : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgeqr2(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dgeqrf(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgeqrfp(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgeqrt(m : Int32*, n : Int32*, nb : Int32*, a : LibC::Double*, lda : Int32*, t : LibC::Double*, ldt : Int32*, work : LibC::Double*, info : Int32*)
    fun dgeqrt2(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, t : LibC::Double*, ldt : Int32*, info : Int32*)
    fun dgeqrt3(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, t : LibC::Double*, ldt : Int32*, info : Int32*)
    fun dgerfs(trans : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dgerfsx(trans : LibC::Char*, equed : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, ipiv : Int32*, r : LibC::Double*, c : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dgerq2(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dgerqf(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgesc2(n : Int32*, a : LibC::Double*, lda : Int32*, rhs : LibC::Double*, ipiv : Int32*, jpiv : Int32*, scale : LibC::Double*)
    fun dgesdd(jobz : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, s : LibC::Double*, u : LibC::Double*, ldu : Int32*, vt : LibC::Double*, ldvt : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun dgesv(n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dgesvd(jobu : LibC::Char*, jobvt : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, s : LibC::Double*, u : LibC::Double*, ldu : Int32*, vt : LibC::Double*, ldvt : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgesvdq(joba : LibC::Char*, jobp : LibC::Char*, jobr : LibC::Char*, jobu : LibC::Char*, jobv : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, s : LibC::Double*, u : LibC::Double*, ldu : Int32*, v : LibC::Double*, ldv : Int32*, numrank : Int32*, iwork : Int32*, liwork : Int32*, work : LibC::Double*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, info : Int32*)
    fun dgesvdx(jobu : LibC::Char*, jobvt : LibC::Char*, range : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, ns : Int32*, s : LibC::Double*, u : LibC::Double*, ldu : Int32*, vt : LibC::Double*, ldvt : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun dgesvj(joba : LibC::Char*, jobu : LibC::Char*, jobv : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, sva : LibC::Double*, mv : Int32*, v : LibC::Double*, ldv : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgesvx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, ipiv : Int32*, equed : LibC::Char*, r : LibC::Double*, c : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dgesvxx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, ipiv : Int32*, equed : LibC::Char*, r : LibC::Double*, c : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, rpvgrw : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dgetc2(n : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, jpiv : Int32*, info : Int32*)
    fun dgetf2(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun dgetrf(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun dgetrf2(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun dgetri(n : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgetrs(trans : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dgetsls(trans : LibC::Char*, m : Int32*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgetsqrhrt(m : Int32*, n : Int32*, mb1 : Int32*, nb1 : Int32*, nb2 : Int32*, a : LibC::Double*, lda : Int32*, t : LibC::Double*, ldt : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dggbak(job : LibC::Char*, side : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, lscale : LibC::Double*, rscale : LibC::Double*, m : Int32*, v : LibC::Double*, ldv : Int32*, info : Int32*)
    fun dggbal(job : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, ilo : Int32*, ihi : Int32*, lscale : LibC::Double*, rscale : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dgges(jobvsl : LibC::Char*, jobvsr : LibC::Char*, sort : LibC::Char*, selctg : LapackDSelect3, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, sdim : Int32*, alphar : LibC::Double*, alphai : LibC::Double*, beta : LibC::Double*, vsl : LibC::Double*, ldvsl : Int32*, vsr : LibC::Double*, ldvsr : Int32*, work : LibC::Double*, lwork : Int32*, bwork : Int32*, info : Int32*)
    fun dgges3(jobvsl : LibC::Char*, jobvsr : LibC::Char*, sort : LibC::Char*, selctg : LapackDSelect3, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, sdim : Int32*, alphar : LibC::Double*, alphai : LibC::Double*, beta : LibC::Double*, vsl : LibC::Double*, ldvsl : Int32*, vsr : LibC::Double*, ldvsr : Int32*, work : LibC::Double*, lwork : Int32*, bwork : Int32*, info : Int32*)
    fun dggesx(jobvsl : LibC::Char*, jobvsr : LibC::Char*, sort : LibC::Char*, selctg : LapackDSelect3, sense : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, sdim : Int32*, alphar : LibC::Double*, alphai : LibC::Double*, beta : LibC::Double*, vsl : LibC::Double*, ldvsl : Int32*, vsr : LibC::Double*, ldvsr : Int32*, rconde : LibC::Double*, rcondv : LibC::Double*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, bwork : Int32*, info : Int32*)
    fun dggev(jobvl : LibC::Char*, jobvr : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, alphar : LibC::Double*, alphai : LibC::Double*, beta : LibC::Double*, vl : LibC::Double*, ldvl : Int32*, vr : LibC::Double*, ldvr : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dggev3(jobvl : LibC::Char*, jobvr : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, alphar : LibC::Double*, alphai : LibC::Double*, beta : LibC::Double*, vl : LibC::Double*, ldvl : Int32*, vr : LibC::Double*, ldvr : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dggevx(balanc : LibC::Char*, jobvl : LibC::Char*, jobvr : LibC::Char*, sense : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, alphar : LibC::Double*, alphai : LibC::Double*, beta : LibC::Double*, vl : LibC::Double*, ldvl : Int32*, vr : LibC::Double*, ldvr : Int32*, ilo : Int32*, ihi : Int32*, lscale : LibC::Double*, rscale : LibC::Double*, abnrm : LibC::Double*, bbnrm : LibC::Double*, rconde : LibC::Double*, rcondv : LibC::Double*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, bwork : Int32*, info : Int32*)
    fun dggglm(n : Int32*, m : Int32*, p : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, d : LibC::Double*, x : LibC::Double*, y : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgghd3(compq : LibC::Char*, compz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, q : LibC::Double*, ldq : Int32*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgghrd(compq : LibC::Char*, compz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, q : LibC::Double*, ldq : Int32*, z : LibC::Double*, ldz : Int32*, info : Int32*)
    fun dgglse(m : Int32*, n : Int32*, p : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, c : LibC::Double*, d : LibC::Double*, x : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dggqrf(n : Int32*, m : Int32*, p : Int32*, a : LibC::Double*, lda : Int32*, taua : LibC::Double*, b : LibC::Double*, ldb : Int32*, taub : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dggrqf(m : Int32*, p : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, taua : LibC::Double*, b : LibC::Double*, ldb : Int32*, taub : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dggsvd(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, n : Int32*, p : Int32*, k : Int32*, l : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, alpha : LibC::Double*, beta : LibC::Double*, u : LibC::Double*, ldu : Int32*, v : LibC::Double*, ldv : Int32*, q : LibC::Double*, ldq : Int32*, work : LibC::Double*, iwork : Int32*, info : Int32*) : Int32
    fun dggsvd3(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, n : Int32*, p : Int32*, k : Int32*, l : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, alpha : LibC::Double*, beta : LibC::Double*, u : LibC::Double*, ldu : Int32*, v : LibC::Double*, ldv : Int32*, q : LibC::Double*, ldq : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun dggsvp(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, p : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, tola : LibC::Double*, tolb : LibC::Double*, k : Int32*, l : Int32*, u : LibC::Double*, ldu : Int32*, v : LibC::Double*, ldv : Int32*, q : LibC::Double*, ldq : Int32*, iwork : Int32*, tau : LibC::Double*, work : LibC::Double*, info : Int32*) : Int32
    fun dggsvp3(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, p : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, tola : LibC::Double*, tolb : LibC::Double*, k : Int32*, l : Int32*, u : LibC::Double*, ldu : Int32*, v : LibC::Double*, ldv : Int32*, q : LibC::Double*, ldq : Int32*, iwork : Int32*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgsvj0(jobv : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, d__ : LibC::Double*, sva : LibC::Double*, mv : Int32*, v : LibC::Double*, ldv : Int32*, eps : LibC::Double*, sfmin : LibC::Double*, tol : LibC::Double*, nsweep : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgsvj1(jobv : LibC::Char*, m : Int32*, n : Int32*, n1 : Int32*, a : LibC::Double*, lda : Int32*, d__ : LibC::Double*, sva : LibC::Double*, mv : Int32*, v : LibC::Double*, ldv : Int32*, eps : LibC::Double*, sfmin : LibC::Double*, tol : LibC::Double*, nsweep : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dgtcon(norm : LibC::Char*, n : Int32*, dl : LibC::Double*, d : LibC::Double*, du : LibC::Double*, du2 : LibC::Double*, ipiv : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dgtrfs(trans : LibC::Char*, n : Int32*, nrhs : Int32*, dl : LibC::Double*, d : LibC::Double*, du : LibC::Double*, dlf : LibC::Double*, df : LibC::Double*, duf : LibC::Double*, du2 : LibC::Double*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dgtsv(n : Int32*, nrhs : Int32*, dl : LibC::Double*, d : LibC::Double*, du : LibC::Double*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dgtsvx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, nrhs : Int32*, dl : LibC::Double*, d : LibC::Double*, du : LibC::Double*, dlf : LibC::Double*, df : LibC::Double*, duf : LibC::Double*, du2 : LibC::Double*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dgttrf(n : Int32*, dl : LibC::Double*, d : LibC::Double*, du : LibC::Double*, du2 : LibC::Double*, ipiv : Int32*, info : Int32*)
    fun dgttrs(trans : LibC::Char*, n : Int32*, nrhs : Int32*, dl : LibC::Double*, d : LibC::Double*, du : LibC::Double*, du2 : LibC::Double*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dgtts2(itrans : Int32*, n : Int32*, nrhs : Int32*, dl : LibC::Double*, d__ : LibC::Double*, du : LibC::Double*, du2 : LibC::Double*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*)
    fun dhgeqz(job : LibC::Char*, compq : LibC::Char*, compz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h : LibC::Double*, ldh : Int32*, t : LibC::Double*, ldt : Int32*, alphar : LibC::Double*, alphai : LibC::Double*, beta : LibC::Double*, q : LibC::Double*, ldq : Int32*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dhsein(side : LibC::Char*, eigsrc : LibC::Char*, initv : LibC::Char*, select : Int32*, n : Int32*, h : LibC::Double*, ldh : Int32*, wr : LibC::Double*, wi : LibC::Double*, vl : LibC::Double*, ldvl : Int32*, vr : LibC::Double*, ldvr : Int32*, mm : Int32*, m : Int32*, work : LibC::Double*, ifaill : Int32*, ifailr : Int32*, info : Int32*)
    fun dhseqr(job : LibC::Char*, compz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h : LibC::Double*, ldh : Int32*, wr : LibC::Double*, wi : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun disnan(din : LibC::Double*) : LibC::Char
    fun dla_gbamv_(trans : Int32*, m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, alpha : LibC::Double*, ab : LibC::Double*, ldab : Int32*, x : LibC::Double*, incx : Int32*, beta : LibC::Double*, y : LibC::Double*, incy : Int32*)
    fun dla_gbrcond_(trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Double*, ldab : Int32*, afb : LibC::Double*, ldafb : Int32*, ipiv : Int32*, cmode : Int32*, c__ : LibC::Double*, info : Int32*, work : LibC::Double*, iwork : Int32*, trans_len : LibC::Int) : LibC::Double
    fun dla_gbrfsx_extended_(prec_type__ : Int32*, trans_type__ : Int32*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : LibC::Double*, ldab : Int32*, afb : LibC::Double*, ldafb : Int32*, ipiv : Int32*, colequ : LibC::Char*, c__ : LibC::Double*, b : LibC::Double*, ldb : Int32*, y : LibC::Double*, ldy : Int32*, berr_out__ : LibC::Double*, n_norms__ : Int32*, errs_n__ : LibC::Double*, errs_c__ : LibC::Double*, res : LibC::Double*, ayb : LibC::Double*, dy : LibC::Double*, y_tail__ : LibC::Double*, rcond : LibC::Double*, ithresh : Int32*, rthresh : LibC::Double*, dz_ub__ : LibC::Double*, ignore_cwise__ : LibC::Char*, info : Int32*)
    fun dla_gbrpvgrw_(n : Int32*, kl : Int32*, ku : Int32*, ncols : Int32*, ab : LibC::Double*, ldab : Int32*, afb : LibC::Double*, ldafb : Int32*) : LibC::Double
    fun dla_geamv_(trans : Int32*, m : Int32*, n : Int32*, alpha : LibC::Double*, a : LibC::Double*, lda : Int32*, x : LibC::Double*, incx : Int32*, beta : LibC::Double*, y : LibC::Double*, incy : Int32*)
    fun dla_gercond_(trans : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, ipiv : Int32*, cmode : Int32*, c__ : LibC::Double*, info : Int32*, work : LibC::Double*, iwork : Int32*, trans_len : LibC::Int) : LibC::Double
    fun dla_gerfsx_extended_(prec_type__ : Int32*, trans_type__ : Int32*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, ipiv : Int32*, colequ : LibC::Char*, c__ : LibC::Double*, b : LibC::Double*, ldb : Int32*, y : LibC::Double*, ldy : Int32*, berr_out__ : LibC::Double*, n_norms__ : Int32*, errs_n__ : LibC::Double*, errs_c__ : LibC::Double*, res : LibC::Double*, ayb : LibC::Double*, dy : LibC::Double*, y_tail__ : LibC::Double*, rcond : LibC::Double*, ithresh : Int32*, rthresh : LibC::Double*, dz_ub__ : LibC::Double*, ignore_cwise__ : LibC::Char*, info : Int32*)
    fun dla_lin_berr_(n : Int32*, nz : Int32*, nrhs : Int32*, res : LibC::Double*, ayb : LibC::Double*, berr : LibC::Double*)
    fun dla_porcond_(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, cmode : Int32*, c__ : LibC::Double*, info : Int32*, work : LibC::Double*, iwork : Int32*, uplo_len : LibC::Int) : LibC::Double
    fun dla_porfsx_extended_(prec_type__ : Int32*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, colequ : LibC::Char*, c__ : LibC::Double*, b : LibC::Double*, ldb : Int32*, y : LibC::Double*, ldy : Int32*, berr_out__ : LibC::Double*, n_norms__ : Int32*, errs_n__ : LibC::Double*, errs_c__ : LibC::Double*, res : LibC::Double*, ayb : LibC::Double*, dy : LibC::Double*, y_tail__ : LibC::Double*, rcond : LibC::Double*, ithresh : Int32*, rthresh : LibC::Double*, dz_ub__ : LibC::Double*, ignore_cwise__ : LibC::Char*, info : Int32*, uplo_len : LibC::Int)
    fun dla_porpvgrw_(uplo : LibC::Char*, ncols : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, work : LibC::Double*, uplo_len : LibC::Int) : LibC::Double
    fun dla_rpvgrw_(n : Int32*, ncols : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*) : LibC::Double
    fun dla_syamv_(uplo : Int32*, n : Int32*, alpha : LibC::Double*, a : LibC::Double*, lda : Int32*, x : LibC::Double*, incx : Int32*, beta : LibC::Double*, y : LibC::Double*, incy : Int32*)
    fun dla_syrcond_(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, ipiv : Int32*, cmode : Int32*, c__ : LibC::Double*, info : Int32*, work : LibC::Double*, iwork : Int32*, uplo_len : LibC::Int) : LibC::Double
    fun dla_syrfsx_extended_(prec_type__ : Int32*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, ipiv : Int32*, colequ : LibC::Char*, c__ : LibC::Double*, b : LibC::Double*, ldb : Int32*, y : LibC::Double*, ldy : Int32*, berr_out__ : LibC::Double*, n_norms__ : Int32*, errs_n__ : LibC::Double*, errs_c__ : LibC::Double*, res : LibC::Double*, ayb : LibC::Double*, dy : LibC::Double*, y_tail__ : LibC::Double*, rcond : LibC::Double*, ithresh : Int32*, rthresh : LibC::Double*, dz_ub__ : LibC::Double*, ignore_cwise__ : LibC::Char*, info : Int32*, uplo_len : LibC::Int)
    fun dla_syrpvgrw_(uplo : LibC::Char*, n : Int32*, info : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, ipiv : Int32*, work : LibC::Double*, uplo_len : LibC::Int) : LibC::Double
    fun dla_wwaddw_(n : Int32*, x : LibC::Double*, y : LibC::Double*, w : LibC::Double*)
    fun dlabad(small : LibC::Double*, large : LibC::Double*)
    fun dlabrd(m : Int32*, n : Int32*, nb : Int32*, a : LibC::Double*, lda : Int32*, d__ : LibC::Double*, e : LibC::Double*, tauq : LibC::Double*, taup : LibC::Double*, x : LibC::Double*, ldx : Int32*, y : LibC::Double*, ldy : Int32*)
    fun dlacn2(n : Int32*, v : LibC::Double*, x : LibC::Double*, isgn : Int32*, est : LibC::Double*, kase : Int32*, isave : Int32*)
    fun dlacon(n : Int32*, v : LibC::Double*, x : LibC::Double*, isgn : Int32*, est : LibC::Double*, kase : Int32*)
    fun dlacpy(uplo : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*)
    fun dladiv(a : LibC::Double*, b : LibC::Double*, c__ : LibC::Double*, d__ : LibC::Double*, p : LibC::Double*, q : LibC::Double*)
    fun dlae2(a : LibC::Double*, b : LibC::Double*, c__ : LibC::Double*, rt1 : LibC::Double*, rt2 : LibC::Double*)
    fun dlaebz(ijob : Int32*, nitmax : Int32*, n : Int32*, mmax : Int32*, minp : Int32*, nbmin : Int32*, abstol : LibC::Double*, reltol : LibC::Double*, pivmin : LibC::Double*, d__ : LibC::Double*, e : LibC::Double*, e2 : LibC::Double*, nval : Int32*, ab : LibC::Double*, c__ : LibC::Double*, mout : Int32*, nab : Int32*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dlaed0(icompq : Int32*, qsiz : Int32*, n : Int32*, d__ : LibC::Double*, e : LibC::Double*, q : LibC::Double*, ldq : Int32*, qstore : LibC::Double*, ldqs : Int32*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dlaed1(n : Int32*, d__ : LibC::Double*, q : LibC::Double*, ldq : Int32*, indxq : Int32*, rho : LibC::Double*, cutpnt : Int32*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dlaed2(k : Int32*, n : Int32*, n1 : Int32*, d__ : LibC::Double*, q : LibC::Double*, ldq : Int32*, indxq : Int32*, rho : LibC::Double*, z__ : LibC::Double*, dlamda : LibC::Double*, w : LibC::Double*, q2 : LibC::Double*, indx : Int32*, indxc : Int32*, indxp : Int32*, coltyp : Int32*, info : Int32*)
    fun dlaed3(k : Int32*, n : Int32*, n1 : Int32*, d__ : LibC::Double*, q : LibC::Double*, ldq : Int32*, rho : LibC::Double*, dlamda : LibC::Double*, q2 : LibC::Double*, indx : Int32*, ctot : Int32*, w : LibC::Double*, s : LibC::Double*, info : Int32*)
    fun dlaed4(n : Int32*, i__ : Int32*, d__ : LibC::Double*, z__ : LibC::Double*, delta : LibC::Double*, rho : LibC::Double*, dlam : LibC::Double*, info : Int32*)
    fun dlaed5(i__ : Int32*, d__ : LibC::Double*, z__ : LibC::Double*, delta : LibC::Double*, rho : LibC::Double*, dlam : LibC::Double*)
    fun dlaed6(kniter : Int32*, orgati : LibC::Char*, rho : LibC::Double*, d__ : LibC::Double*, z__ : LibC::Double*, finit : LibC::Double*, tau : LibC::Double*, info : Int32*)
    fun dlaed7(icompq : Int32*, n : Int32*, qsiz : Int32*, tlvls : Int32*, curlvl : Int32*, curpbm : Int32*, d__ : LibC::Double*, q : LibC::Double*, ldq : Int32*, indxq : Int32*, rho : LibC::Double*, cutpnt : Int32*, qstore : LibC::Double*, qptr : Int32*, prmptr : Int32*, perm : Int32*, givptr : Int32*, givcol : Int32*, givnum : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dlaed8(icompq : Int32*, k : Int32*, n : Int32*, qsiz : Int32*, d__ : LibC::Double*, q : LibC::Double*, ldq : Int32*, indxq : Int32*, rho : LibC::Double*, cutpnt : Int32*, z__ : LibC::Double*, dlamda : LibC::Double*, q2 : LibC::Double*, ldq2 : Int32*, w : LibC::Double*, perm : Int32*, givptr : Int32*, givcol : Int32*, givnum : LibC::Double*, indxp : Int32*, indx : Int32*, info : Int32*)
    fun dlaed9(k : Int32*, kstart : Int32*, kstop : Int32*, n : Int32*, d__ : LibC::Double*, q : LibC::Double*, ldq : Int32*, rho : LibC::Double*, dlamda : LibC::Double*, w : LibC::Double*, s : LibC::Double*, lds : Int32*, info : Int32*)
    fun dlaeda(n : Int32*, tlvls : Int32*, curlvl : Int32*, curpbm : Int32*, prmptr : Int32*, perm : Int32*, givptr : Int32*, givcol : Int32*, givnum : LibC::Double*, q : LibC::Double*, qptr : Int32*, z__ : LibC::Double*, ztemp : LibC::Double*, info : Int32*)
    fun dlaein(rightv : LibC::Char*, noinit : LibC::Char*, n : Int32*, h__ : LibC::Double*, ldh : Int32*, wr : LibC::Double*, wi : LibC::Double*, vr : LibC::Double*, vi : LibC::Double*, b : LibC::Double*, ldb : Int32*, work : LibC::Double*, eps3 : LibC::Double*, smlnum : LibC::Double*, bignum : LibC::Double*, info : Int32*)
    fun dlaev2(a : LibC::Double*, b : LibC::Double*, c__ : LibC::Double*, rt1 : LibC::Double*, rt2 : LibC::Double*, cs1 : LibC::Double*, sn1 : LibC::Double*)
    fun dlaexc(wantq : LibC::Char*, n : Int32*, t : LibC::Double*, ldt : Int32*, q : LibC::Double*, ldq : Int32*, j1 : Int32*, n1 : Int32*, n2 : Int32*, work : LibC::Double*, info : Int32*)
    fun dlag2(a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, safmin : LibC::Double*, scale1 : LibC::Double*, scale2 : LibC::Double*, wr1 : LibC::Double*, wr2 : LibC::Double*, wi : LibC::Double*)
    fun dlag2s(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, sa : LibC::Float*, ldsa : Int32*, info : Int32*)
    fun dlagge(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, d : LibC::Double*, a : LibC::Double*, lda : Int32*, iseed : Int32*, work : LibC::Double*, info : Int32*)
    fun dlags2(upper : LibC::Char*, a1 : LibC::Double*, a2 : LibC::Double*, a3 : LibC::Double*, b1 : LibC::Double*, b2 : LibC::Double*, b3 : LibC::Double*, csu : LibC::Double*, snu : LibC::Double*, csv : LibC::Double*, snv : LibC::Double*, csq : LibC::Double*, snq : LibC::Double*)
    fun dlagsy(n : Int32*, k : Int32*, d : LibC::Double*, a : LibC::Double*, lda : Int32*, iseed : Int32*, work : LibC::Double*, info : Int32*)
    fun dlagtf(n : Int32*, a : LibC::Double*, lambda : LibC::Double*, b : LibC::Double*, c__ : LibC::Double*, tol : LibC::Double*, d__ : LibC::Double*, in : Int32*, info : Int32*)
    fun dlagtm(trans : LibC::Char*, n : Int32*, nrhs : Int32*, alpha : LibC::Double*, dl : LibC::Double*, d__ : LibC::Double*, du : LibC::Double*, x : LibC::Double*, ldx : Int32*, beta : LibC::Double*, b : LibC::Double*, ldb : Int32*)
    fun dlagts(job : Int32*, n : Int32*, a : LibC::Double*, b : LibC::Double*, c__ : LibC::Double*, d__ : LibC::Double*, in : Int32*, y : LibC::Double*, tol : LibC::Double*, info : Int32*)
    fun dlagv2(a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, alphar : LibC::Double*, alphai : LibC::Double*, beta : LibC::Double*, csl : LibC::Double*, snl : LibC::Double*, csr : LibC::Double*, snr : LibC::Double*)
    fun dlahqr(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h__ : LibC::Double*, ldh : Int32*, wr : LibC::Double*, wi : LibC::Double*, iloz : Int32*, ihiz : Int32*, z__ : LibC::Double*, ldz : Int32*, info : Int32*)
    fun dlahr2(n : Int32*, k : Int32*, nb : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, t : LibC::Double*, ldt : Int32*, y : LibC::Double*, ldy : Int32*)
    fun dlahrd(n : Int32*, k : Int32*, nb : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, t : LibC::Double*, ldt : Int32*, y : LibC::Double*, ldy : Int32*)
    fun dlaic1(job : Int32*, j : Int32*, x : LibC::Double*, sest : LibC::Double*, w : LibC::Double*, gamma : LibC::Double*, sestpr : LibC::Double*, s : LibC::Double*, c__ : LibC::Double*)
    fun dlaisnan(din1 : LibC::Double*, din2 : LibC::Double*) : LibC::Char
    fun dlaln2(ltrans : LibC::Char*, na : Int32*, nw : Int32*, smin : LibC::Double*, ca : LibC::Double*, a : LibC::Double*, lda : Int32*, d1 : LibC::Double*, d2 : LibC::Double*, b : LibC::Double*, ldb : Int32*, wr : LibC::Double*, wi : LibC::Double*, x : LibC::Double*, ldx : Int32*, scale : LibC::Double*, xnorm : LibC::Double*, info : Int32*)
    fun dlals0(icompq : Int32*, nl : Int32*, nr : Int32*, sqre : Int32*, nrhs : Int32*, b : LibC::Double*, ldb : Int32*, bx : LibC::Double*, ldbx : Int32*, perm : Int32*, givptr : Int32*, givcol : Int32*, ldgcol : Int32*, givnum : LibC::Double*, ldgnum : Int32*, poles : LibC::Double*, difl : LibC::Double*, difr : LibC::Double*, z__ : LibC::Double*, k : Int32*, c__ : LibC::Double*, s : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dlalsa(icompq : Int32*, smlsiz : Int32*, n : Int32*, nrhs : Int32*, b : LibC::Double*, ldb : Int32*, bx : LibC::Double*, ldbx : Int32*, u : LibC::Double*, ldu : Int32*, vt : LibC::Double*, k : Int32*, difl : LibC::Double*, difr : LibC::Double*, z__ : LibC::Double*, poles : LibC::Double*, givptr : Int32*, givcol : Int32*, ldgcol : Int32*, perm : Int32*, givnum : LibC::Double*, c__ : LibC::Double*, s : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dlalsd(uplo : LibC::Char*, smlsiz : Int32*, n : Int32*, nrhs : Int32*, d__ : LibC::Double*, e : LibC::Double*, b : LibC::Double*, ldb : Int32*, rcond : LibC::Double*, rank : Int32*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dlamc1(beta : Int32*, t : Int32*, rnd : LibC::Char*, ieee1 : LibC::Char*)
    fun dlamc2(beta : Int32*, t : Int32*, rnd : LibC::Char*, eps : LibC::Double*, emin : Int32*, rmin : LibC::Double*, emax : Int32*, rmax : LibC::Double*)
    fun dlamc3(a : LibC::Double*, b : LibC::Double*) : LibC::Double
    fun dlamc4(emin : Int32*, start : LibC::Double*, base : Int32*)
    fun dlamc5(beta : Int32*, p : Int32*, emin : Int32*, ieee : LibC::Char*, emax : Int32*, rmax : LibC::Double*)
    fun dlamch(cmach : LibC::Char*) : LibC::Double
    fun dlamrg(n1 : Int32*, n2 : Int32*, a : LibC::Double*, dtrd1 : Int32*, dtrd2 : Int32*, index : Int32*)
    fun dlaneg(n : Int32*, d__ : LibC::Double*, lld : LibC::Double*, sigma : LibC::Double*, pivmin : LibC::Double*, r__ : Int32*) : Int32
    fun dlangb(norm : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Double*, ldab : Int32*, work : LibC::Double*) : LibC::Double
    fun dlange(norm : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, work : LibC::Double*) : LibC::Double
    fun dlangt(norm : LibC::Char*, n : Int32*, dl : LibC::Double*, d : LibC::Double*, du : LibC::Double*) : LibC::Double
    fun dlanhs(norm : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, work : LibC::Double*) : LibC::Double
    fun dlansb(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, k : Int32*, ab : LibC::Double*, ldab : Int32*, work : LibC::Double*) : LibC::Double
    fun dlansf(norm : LibC::Char*, transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, work : LibC::Double*) : LibC::Double
    fun dlansp(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, work : LibC::Double*) : LibC::Double
    fun dlanst(norm : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*) : LibC::Double
    fun dlansy(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, work : LibC::Double*) : LibC::Double
    fun dlantb(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, k : Int32*, ab : LibC::Double*, ldab : Int32*, work : LibC::Double*) : LibC::Double
    fun dlantp(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, ap : LibC::Double*, work : LibC::Double*) : LibC::Double
    fun dlantr(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, work : LibC::Double*) : LibC::Double
    fun dlanv2(a : LibC::Double*, b : LibC::Double*, c__ : LibC::Double*, d__ : LibC::Double*, rt1r : LibC::Double*, rt1i : LibC::Double*, rt2r : LibC::Double*, rt2i : LibC::Double*, cs : LibC::Double*, sn : LibC::Double*)
    fun dlapll(n : Int32*, x : LibC::Double*, incx : Int32*, y : LibC::Double*, incy : Int32*, ssmin : LibC::Double*)
    fun dlapmr(forwrd : Int32*, m : Int32*, n : Int32*, x : LibC::Double*, ldx : Int32*, k : Int32*)
    fun dlapmt(forwrd : Int32*, m : Int32*, n : Int32*, x : LibC::Double*, ldx : Int32*, k : Int32*)
    fun dlapy2(x : LibC::Double*, y : LibC::Double*) : LibC::Double
    fun dlapy3(x : LibC::Double*, y : LibC::Double*, z : LibC::Double*) : LibC::Double
    fun dlaqgb(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Double*, ldab : Int32*, r__ : LibC::Double*, c__ : LibC::Double*, rowcnd : LibC::Double*, colcnd : LibC::Double*, amax : LibC::Double*, equed : LibC::Char*)
    fun dlaqge(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, r__ : LibC::Double*, c__ : LibC::Double*, rowcnd : LibC::Double*, colcnd : LibC::Double*, amax : LibC::Double*, equed : LibC::Char*)
    fun dlaqp2(m : Int32*, n : Int32*, offset : Int32*, a : LibC::Double*, lda : Int32*, jpvt : Int32*, tau : LibC::Double*, vn1 : LibC::Double*, vn2 : LibC::Double*, work : LibC::Double*)
    fun dlaqps(m : Int32*, n : Int32*, offset : Int32*, nb : Int32*, kb : Int32*, a : LibC::Double*, lda : Int32*, jpvt : Int32*, tau : LibC::Double*, vn1 : LibC::Double*, vn2 : LibC::Double*, auxv : LibC::Double*, f : LibC::Double*, ldf : Int32*)
    fun dlaqr0(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h__ : LibC::Double*, ldh : Int32*, wr : LibC::Double*, wi : LibC::Double*, iloz : Int32*, ihiz : Int32*, z__ : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dlaqr1(n : Int32*, h__ : LibC::Double*, ldh : Int32*, sr1 : LibC::Double*, si1 : LibC::Double*, sr2 : LibC::Double*, si2 : LibC::Double*, v : LibC::Double*)
    fun dlaqr2(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ktop : Int32*, kbot : Int32*, nw : Int32*, h__ : LibC::Double*, ldh : Int32*, iloz : Int32*, ihiz : Int32*, z__ : LibC::Double*, ldz : Int32*, ns : Int32*, nd : Int32*, sr : LibC::Double*, si : LibC::Double*, v : LibC::Double*, ldv : Int32*, nh : Int32*, t : LibC::Double*, ldt : Int32*, nv : Int32*, wv : LibC::Double*, ldwv : Int32*, work : LibC::Double*, lwork : Int32*)
    fun dlaqr3(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ktop : Int32*, kbot : Int32*, nw : Int32*, h__ : LibC::Double*, ldh : Int32*, iloz : Int32*, ihiz : Int32*, z__ : LibC::Double*, ldz : Int32*, ns : Int32*, nd : Int32*, sr : LibC::Double*, si : LibC::Double*, v : LibC::Double*, ldv : Int32*, nh : Int32*, t : LibC::Double*, ldt : Int32*, nv : Int32*, wv : LibC::Double*, ldwv : Int32*, work : LibC::Double*, lwork : Int32*)
    fun dlaqr4(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h__ : LibC::Double*, ldh : Int32*, wr : LibC::Double*, wi : LibC::Double*, iloz : Int32*, ihiz : Int32*, z__ : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dlaqr5(wantt : LibC::Char*, wantz : LibC::Char*, kacc22 : Int32*, n : Int32*, ktop : Int32*, kbot : Int32*, nshfts : Int32*, sr : LibC::Double*, si : LibC::Double*, h__ : LibC::Double*, ldh : Int32*, iloz : Int32*, ihiz : Int32*, z__ : LibC::Double*, ldz : Int32*, v : LibC::Double*, ldv : Int32*, u : LibC::Double*, ldu : Int32*, nv : Int32*, wv : LibC::Double*, ldwv : Int32*, nh : Int32*, wh : LibC::Double*, ldwh : Int32*)
    fun dlaqsb(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Double*, ldab : Int32*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, equed : LibC::Char*)
    fun dlaqsp(uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, equed : LibC::Char*)
    fun dlaqsy(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, equed : LibC::Char*)
    fun dlaqtr(ltran : LibC::Char*, lreal : LibC::Char*, n : Int32*, t : LibC::Double*, ldt : Int32*, b : LibC::Double*, w : LibC::Double*, scale : LibC::Double*, x : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dlar1v(n : Int32*, b1 : Int32*, bn : Int32*, lambda : LibC::Double*, d__ : LibC::Double*, l : LibC::Double*, ld : LibC::Double*, lld : LibC::Double*, pivmin : LibC::Double*, gaptol : LibC::Double*, z__ : LibC::Double*, wantnc : LibC::Char*, negcnt : Int32*, ztz : LibC::Double*, mingma : LibC::Double*, r__ : Int32*, isuppz : Int32*, nrminv : LibC::Double*, resid : LibC::Double*, rqcorr : LibC::Double*, work : LibC::Double*)
    fun dlar2v(n : Int32*, x : LibC::Double*, y : LibC::Double*, z__ : LibC::Double*, incx : Int32*, c__ : LibC::Double*, s : LibC::Double*, incc : Int32*)
    fun dlarf(side : LibC::Char*, m : Int32*, n : Int32*, v : LibC::Double*, incv : Int32*, tau : LibC::Double*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*)
    fun dlarfb(side : LibC::Char*, trans : LibC::Char*, direct : LibC::Char*, storev : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, v : LibC::Double*, ldv : Int32*, t : LibC::Double*, ldt : Int32*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*, ldwork : Int32*)
    fun dlarfg(n : Int32*, alpha : LibC::Double*, x : LibC::Double*, incx : Int32*, tau : LibC::Double*)
    fun dlarfp(n : Int32*, alpha : LibC::Double*, x : LibC::Double*, incx : Int32*, tau : LibC::Double*)
    fun dlarft(direct : LibC::Char*, storev : LibC::Char*, n : Int32*, k : Int32*, v : LibC::Double*, ldv : Int32*, tau : LibC::Double*, t : LibC::Double*, ldt : Int32*)
    fun dlarfx(side : LibC::Char*, m : Int32*, n : Int32*, v : LibC::Double*, tau : LibC::Double*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*)
    fun dlargv(n : Int32*, x : LibC::Double*, incx : Int32*, y : LibC::Double*, incy : Int32*, c__ : LibC::Double*, incc : Int32*)
    fun dlarnv(idist : Int32*, iseed : Int32*, n : Int32*, x : LibC::Double*)
    fun dlarra(n : Int32*, d__ : LibC::Double*, e : LibC::Double*, e2 : LibC::Double*, spltol : LibC::Double*, tnrm : LibC::Double*, nsplit : Int32*, isplit : Int32*, info : Int32*)
    fun dlarrb(n : Int32*, d__ : LibC::Double*, lld : LibC::Double*, ifirst : Int32*, ilast : Int32*, rtol1 : LibC::Double*, rtol2 : LibC::Double*, offset : Int32*, w : LibC::Double*, wgap : LibC::Double*, werr : LibC::Double*, work : LibC::Double*, iwork : Int32*, pivmin : LibC::Double*, spdiam : LibC::Double*, twist : Int32*, info : Int32*)
    fun dlarrc(jobt : LibC::Char*, n : Int32*, vl : LibC::Double*, vu : LibC::Double*, d__ : LibC::Double*, e : LibC::Double*, pivmin : LibC::Double*, eigcnt : Int32*, lcnt : Int32*, rcnt : Int32*, info : Int32*)
    fun dlarrd(range : LibC::Char*, order : LibC::Char*, n : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, gers : LibC::Double*, reltol : LibC::Double*, d__ : LibC::Double*, e : LibC::Double*, e2 : LibC::Double*, pivmin : LibC::Double*, nsplit : Int32*, isplit : Int32*, m : Int32*, w : LibC::Double*, werr : LibC::Double*, wl : LibC::Double*, wu : LibC::Double*, iblock : Int32*, indexw : Int32*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dlarre(range : LibC::Char*, n : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, d__ : LibC::Double*, e : LibC::Double*, e2 : LibC::Double*, rtol1 : LibC::Double*, rtol2 : LibC::Double*, spltol : LibC::Double*, nsplit : Int32*, isplit : Int32*, m : Int32*, w : LibC::Double*, werr : LibC::Double*, wgap : LibC::Double*, iblock : Int32*, indexw : Int32*, gers : LibC::Double*, pivmin : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dlarrf(n : Int32*, d__ : LibC::Double*, l : LibC::Double*, ld : LibC::Double*, clstrt : Int32*, clend : Int32*, w : LibC::Double*, wgap : LibC::Double*, werr : LibC::Double*, spdiam : LibC::Double*, clgapl : LibC::Double*, clgapr : LibC::Double*, pivmin : LibC::Double*, sigma : LibC::Double*, dplus : LibC::Double*, lplus : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dlarrj(n : Int32*, d__ : LibC::Double*, e2 : LibC::Double*, ifirst : Int32*, ilast : Int32*, rtol : LibC::Double*, offset : Int32*, w : LibC::Double*, werr : LibC::Double*, work : LibC::Double*, iwork : Int32*, pivmin : LibC::Double*, spdiam : LibC::Double*, info : Int32*)
    fun dlarrk(n : Int32*, iw : Int32*, gl : LibC::Double*, gu : LibC::Double*, d__ : LibC::Double*, e2 : LibC::Double*, pivmin : LibC::Double*, reltol : LibC::Double*, w : LibC::Double*, werr : LibC::Double*, info : Int32*)
    fun dlarrr(n : Int32*, d__ : LibC::Double*, e : LibC::Double*, info : Int32*)
    fun dlarrv(n : Int32*, vl : LibC::Double*, vu : LibC::Double*, d__ : LibC::Double*, l : LibC::Double*, pivmin : LibC::Double*, isplit : Int32*, m : Int32*, dol : Int32*, dou : Int32*, minrgp : LibC::Double*, rtol1 : LibC::Double*, rtol2 : LibC::Double*, w : LibC::Double*, werr : LibC::Double*, wgap : LibC::Double*, iblock : Int32*, indexw : Int32*, gers : LibC::Double*, z__ : LibC::Double*, ldz : Int32*, isuppz : Int32*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dlarscl2(m : Int32*, n : Int32*, d__ : LibC::Double*, x : LibC::Double*, ldx : Int32*)
    fun dlartg(f : LibC::Double*, g : LibC::Double*, cs : LibC::Double*, sn : LibC::Double*, r__ : LibC::Double*)
    fun dlartgp(f : LibC::Double*, g : LibC::Double*, cs : LibC::Double*, sn : LibC::Double*, r : LibC::Double*)
    fun dlartgs(x : LibC::Double*, y : LibC::Double*, sigma : LibC::Double*, cs : LibC::Double*, sn : LibC::Double*)
    fun dlartv(n : Int32*, x : LibC::Double*, incx : Int32*, y : LibC::Double*, incy : Int32*, c__ : LibC::Double*, s : LibC::Double*, incc : Int32*)
    fun dlaruv(iseed : Int32*, n : Int32*, x : LibC::Double*)
    fun dlarz(side : LibC::Char*, m : Int32*, n : Int32*, l : Int32*, v : LibC::Double*, incv : Int32*, tau : LibC::Double*, c__ : LibC::Double*, ldc : Int32*, work : LibC::Double*)
    fun dlarzb(side : LibC::Char*, trans : LibC::Char*, direct : LibC::Char*, storev : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, v : LibC::Double*, ldv : Int32*, t : LibC::Double*, ldt : Int32*, c__ : LibC::Double*, ldc : Int32*, work : LibC::Double*, ldwork : Int32*)
    fun dlarzt(direct : LibC::Char*, storev : LibC::Char*, n : Int32*, k : Int32*, v : LibC::Double*, ldv : Int32*, tau : LibC::Double*, t : LibC::Double*, ldt : Int32*)
    fun dlas2(f : LibC::Double*, g : LibC::Double*, h__ : LibC::Double*, ssmin : LibC::Double*, ssmax : LibC::Double*)
    fun dlascl(type : LibC::Char*, kl : Int32*, ku : Int32*, cfrom : LibC::Double*, cto : LibC::Double*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, info : Int32*)
    fun dlascl2(m : Int32*, n : Int32*, d__ : LibC::Double*, x : LibC::Double*, ldx : Int32*)
    fun dlasd0(n : Int32*, sqre : Int32*, d__ : LibC::Double*, e : LibC::Double*, u : LibC::Double*, ldu : Int32*, vt : LibC::Double*, ldvt : Int32*, smlsiz : Int32*, iwork : Int32*, work : LibC::Double*, info : Int32*)
    fun dlasd1(nl : Int32*, nr : Int32*, sqre : Int32*, d__ : LibC::Double*, alpha : LibC::Double*, beta : LibC::Double*, u : LibC::Double*, ldu : Int32*, vt : LibC::Double*, ldvt : Int32*, idxq : Int32*, iwork : Int32*, work : LibC::Double*, info : Int32*)
    fun dlasd2(nl : Int32*, nr : Int32*, sqre : Int32*, k : Int32*, d__ : LibC::Double*, z__ : LibC::Double*, alpha : LibC::Double*, beta : LibC::Double*, u : LibC::Double*, ldu : Int32*, vt : LibC::Double*, ldvt : Int32*, dsigma : LibC::Double*, u2 : LibC::Double*, ldu2 : Int32*, vt2 : LibC::Double*, ldvt2 : Int32*, idxp : Int32*, idx : Int32*, idxc : Int32*, idxq : Int32*, coltyp : Int32*, info : Int32*)
    fun dlasd3(nl : Int32*, nr : Int32*, sqre : Int32*, k : Int32*, d__ : LibC::Double*, q : LibC::Double*, ldq : Int32*, dsigma : LibC::Double*, u : LibC::Double*, ldu : Int32*, u2 : LibC::Double*, ldu2 : Int32*, vt : LibC::Double*, ldvt : Int32*, vt2 : LibC::Double*, ldvt2 : Int32*, idxc : Int32*, ctot : Int32*, z__ : LibC::Double*, info : Int32*)
    fun dlasd4(n : Int32*, i__ : Int32*, d__ : LibC::Double*, z__ : LibC::Double*, delta : LibC::Double*, rho : LibC::Double*, sigma : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dlasd5(i__ : Int32*, d__ : LibC::Double*, z__ : LibC::Double*, delta : LibC::Double*, rho : LibC::Double*, dsigma : LibC::Double*, work : LibC::Double*)
    fun dlasd6(icompq : Int32*, nl : Int32*, nr : Int32*, sqre : Int32*, d__ : LibC::Double*, vf : LibC::Double*, vl : LibC::Double*, alpha : LibC::Double*, beta : LibC::Double*, idxq : Int32*, perm : Int32*, givptr : Int32*, givcol : Int32*, ldgcol : Int32*, givnum : LibC::Double*, ldgnum : Int32*, poles : LibC::Double*, difl : LibC::Double*, difr : LibC::Double*, z__ : LibC::Double*, k : Int32*, c__ : LibC::Double*, s : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dlasd7(icompq : Int32*, nl : Int32*, nr : Int32*, sqre : Int32*, k : Int32*, d__ : LibC::Double*, z__ : LibC::Double*, zw : LibC::Double*, vf : LibC::Double*, vfw : LibC::Double*, vl : LibC::Double*, vlw : LibC::Double*, alpha : LibC::Double*, beta : LibC::Double*, dsigma : LibC::Double*, idx : Int32*, idxp : Int32*, idxq : Int32*, perm : Int32*, givptr : Int32*, givcol : Int32*, ldgcol : Int32*, givnum : LibC::Double*, ldgnum : Int32*, c__ : LibC::Double*, s : LibC::Double*, info : Int32*)
    fun dlasd8(icompq : Int32*, k : Int32*, d__ : LibC::Double*, z__ : LibC::Double*, vf : LibC::Double*, vl : LibC::Double*, difl : LibC::Double*, difr : LibC::Double*, lddifr : Int32*, dsigma : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dlasda(icompq : Int32*, smlsiz : Int32*, n : Int32*, sqre : Int32*, d__ : LibC::Double*, e : LibC::Double*, u : LibC::Double*, ldu : Int32*, vt : LibC::Double*, k : Int32*, difl : LibC::Double*, difr : LibC::Double*, z__ : LibC::Double*, poles : LibC::Double*, givptr : Int32*, givcol : Int32*, ldgcol : Int32*, perm : Int32*, givnum : LibC::Double*, c__ : LibC::Double*, s : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dlasdq(uplo : LibC::Char*, sqre : Int32*, n : Int32*, ncvt : Int32*, nru : Int32*, ncc : Int32*, d__ : LibC::Double*, e : LibC::Double*, vt : LibC::Double*, ldvt : Int32*, u : LibC::Double*, ldu : Int32*, c__ : LibC::Double*, ldc : Int32*, work : LibC::Double*, info : Int32*)
    fun dlasdt(n : Int32*, lvl : Int32*, nd : Int32*, inode : Int32*, ndiml : Int32*, ndimr : Int32*, msub : Int32*)
    fun dlaset(uplo : LibC::Char*, m : Int32*, n : Int32*, alpha : LibC::Double*, beta : LibC::Double*, a : LibC::Double*, lda : Int32*)
    fun dlasq1(n : Int32*, d__ : LibC::Double*, e : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dlasq2(n : Int32*, z__ : LibC::Double*, info : Int32*)
    fun dlasq3(i0 : Int32*, n0 : Int32*, z__ : LibC::Double*, pp : Int32*, dmin__ : LibC::Double*, sigma : LibC::Double*, desig : LibC::Double*, qmax : LibC::Double*, nfail : Int32*, iter : Int32*, ndiv : Int32*, ieee : LibC::Char*, ttype : Int32*, dmin1 : LibC::Double*, dmin2 : LibC::Double*, dn : LibC::Double*, dn1 : LibC::Double*, dn2 : LibC::Double*, g : LibC::Double*, tau : LibC::Double*)
    fun dlasq4(i0 : Int32*, n0 : Int32*, z__ : LibC::Double*, pp : Int32*, n0in : Int32*, dmin__ : LibC::Double*, dmin1 : LibC::Double*, dmin2 : LibC::Double*, dn : LibC::Double*, dn1 : LibC::Double*, dn2 : LibC::Double*, tau : LibC::Double*, ttype : Int32*, g : LibC::Double*)
    fun dlasq5(i0 : Int32*, n0 : Int32*, z__ : LibC::Double*, pp : Int32*, tau : LibC::Double*, dmin__ : LibC::Double*, dmin1 : LibC::Double*, dmin2 : LibC::Double*, dn : LibC::Double*, dnm1 : LibC::Double*, dnm2 : LibC::Double*, ieee : LibC::Char*)
    fun dlasq6(i0 : Int32*, n0 : Int32*, z__ : LibC::Double*, pp : Int32*, dmin__ : LibC::Double*, dmin1 : LibC::Double*, dmin2 : LibC::Double*, dn : LibC::Double*, dnm1 : LibC::Double*, dnm2 : LibC::Double*)
    fun dlasr(side : LibC::Char*, pivot : LibC::Char*, direct : LibC::Char*, m : Int32*, n : Int32*, c__ : LibC::Double*, s : LibC::Double*, a : LibC::Double*, lda : Int32*)
    fun dlasrt(id : LibC::Char*, n : Int32*, d : LibC::Double*, info : Int32*)
    fun dlassq(n : Int32*, x : LibC::Double*, incx : Int32*, scale : LibC::Double*, sumsq : LibC::Double*)
    fun dlasv2(f : LibC::Double*, g : LibC::Double*, h__ : LibC::Double*, ssmin : LibC::Double*, ssmax : LibC::Double*, snr : LibC::Double*, csr : LibC::Double*, snl : LibC::Double*, csl : LibC::Double*)
    fun dlaswp(n : Int32*, a : LibC::Double*, lda : Int32*, k1 : Int32*, k2 : Int32*, ipiv : Int32*, incx : Int32*)
    fun dlasy2(ltranl : LibC::Char*, ltranr : LibC::Char*, isgn : Int32*, n1 : Int32*, n2 : Int32*, tl : LibC::Double*, ldtl : Int32*, tr : LibC::Double*, ldtr : Int32*, b : LibC::Double*, ldb : Int32*, scale : LibC::Double*, x : LibC::Double*, ldx : Int32*, xnorm : LibC::Double*, info : Int32*)
    fun dlasyf(uplo : LibC::Char*, n : Int32*, nb : Int32*, kb : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, w : LibC::Double*, ldw : Int32*, info : Int32*)
    fun dlat2s(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, sa : LibC::Float*, ldsa : Int32*, info : Int32*)
    fun dlatbs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, normin : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Double*, ldab : Int32*, x : LibC::Double*, scale : LibC::Double*, cnorm : LibC::Double*, info : Int32*)
    fun dlatdf(ijob : Int32*, n : Int32*, z__ : LibC::Double*, ldz : Int32*, rhs : LibC::Double*, rdsum : LibC::Double*, rdscal : LibC::Double*, ipiv : Int32*, jpiv : Int32*)
    fun dlatms(m : Int32*, n : Int32*, dist : LibC::Char*, iseed : Int32*, sym : LibC::Char*, d : LibC::Double*, mode : Int32*, cond : LibC::Double*, dmax : LibC::Double*, kl : Int32*, ku : Int32*, pack : LibC::Char*, a : LibC::Double*, lda : Int32*, work : LibC::Double*, info : Int32*)
    fun dlatps(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, normin : LibC::Char*, n : Int32*, ap : LibC::Double*, x : LibC::Double*, scale : LibC::Double*, cnorm : LibC::Double*, info : Int32*)
    fun dlatrd(uplo : LibC::Char*, n : Int32*, nb : Int32*, a : LibC::Double*, lda : Int32*, e : LibC::Double*, tau : LibC::Double*, w : LibC::Double*, ldw : Int32*)
    fun dlatrs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, normin : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, x : LibC::Double*, scale : LibC::Double*, cnorm : LibC::Double*, info : Int32*)
    fun dlatrz(m : Int32*, n : Int32*, l : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*)
    fun dlatzm(side : LibC::Char*, m : Int32*, n : Int32*, v : LibC::Double*, incv : Int32*, tau : LibC::Double*, c1 : LibC::Double*, c2 : LibC::Double*, ldc : Int32*, work : LibC::Double*)
    fun dlauu2(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, info : Int32*)
    fun dlauum(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, info : Int32*)
    fun dopgtr(uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, tau : LibC::Double*, q : LibC::Double*, ldq : Int32*, work : LibC::Double*, info : Int32*)
    fun dopmtr(side : LibC::Char*, uplo : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, ap : LibC::Double*, tau : LibC::Double*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*, info : Int32*)
    fun dorbdb(trans : LibC::Char*, signs : LibC::Char*, m : Int32*, p : Int32*, q : Int32*, x11 : LibC::Double*, ldx11 : Int32*, x12 : LibC::Double*, ldx12 : Int32*, x21 : LibC::Double*, ldx21 : Int32*, x22 : LibC::Double*, ldx22 : Int32*, theta : LibC::Double*, phi : LibC::Double*, taup1 : LibC::Double*, taup2 : LibC::Double*, tauq1 : LibC::Double*, tauq2 : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dorcsd(jobu1 : LibC::Char*, jobu2 : LibC::Char*, jobv1t : LibC::Char*, jobv2t : LibC::Char*, trans : LibC::Char*, signs : LibC::Char*, m : Int32*, p : Int32*, q : Int32*, x11 : LibC::Double*, ldx11 : Int32*, x12 : LibC::Double*, ldx12 : Int32*, x21 : LibC::Double*, ldx21 : Int32*, x22 : LibC::Double*, ldx22 : Int32*, theta : LibC::Double*, u1 : LibC::Double*, ldu1 : Int32*, u2 : LibC::Double*, ldu2 : Int32*, v1_t : LibC::Double*, ldv1t : Int32*, v2_t : LibC::Double*, ldv2t : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun dorcsd2by1(jobu1 : LibC::Char*, jobu2 : LibC::Char*, jobv1t : LibC::Char*, m : Int32*, p : Int32*, q : Int32*, x11 : LibC::Double*, ldx11 : Int32*, x21 : LibC::Double*, ldx21 : Int32*, theta : LibC::Double*, u1 : LibC::Double*, ldu1 : Int32*, u2 : LibC::Double*, ldu2 : Int32*, v1_t : LibC::Double*, ldv1t : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun dorg2l(m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dorg2r(m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dorgbr(vect : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dorghr(n : Int32*, ilo : Int32*, ihi : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dorgl2(m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dorglq(m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dorgql(m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dorgqr(m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dorgr2(m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dorgrq(m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dorgtr(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dorgtsqr_row(m : Int32*, n : Int32*, mb : Int32*, nb : Int32*, a : LibC::Double*, lda : Int32*, t : LibC::Double*, ldt : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dorm2l(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, c__ : LibC::Double*, ldc : Int32*, work : LibC::Double*, info : Int32*)
    fun dorm2r(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, c__ : LibC::Double*, ldc : Int32*, work : LibC::Double*, info : Int32*)
    fun dormbr(vect : LibC::Char*, side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dormhr(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, ilo : Int32*, ihi : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dorml2(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, c__ : LibC::Double*, ldc : Int32*, work : LibC::Double*, info : Int32*)
    fun dormlq(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dormql(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dormqr(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dormr2(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, c__ : LibC::Double*, ldc : Int32*, work : LibC::Double*, info : Int32*)
    fun dormr3(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, c__ : LibC::Double*, ldc : Int32*, work : LibC::Double*, info : Int32*)
    fun dormrq(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dormrz(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dormtr(side : LibC::Char*, uplo : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, c : LibC::Double*, ldc : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dpbcon(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Double*, ldab : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dpbequ(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Double*, ldab : Int32*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, info : Int32*)
    fun dpbrfs(uplo : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : LibC::Double*, ldab : Int32*, afb : LibC::Double*, ldafb : Int32*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dpbstf(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Double*, ldab : Int32*, info : Int32*)
    fun dpbsv(uplo : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : LibC::Double*, ldab : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dpbsvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : LibC::Double*, ldab : Int32*, afb : LibC::Double*, ldafb : Int32*, equed : LibC::Char*, s : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dpbtf2(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Double*, ldab : Int32*, info : Int32*)
    fun dpbtrf(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Double*, ldab : Int32*, info : Int32*)
    fun dpbtrs(uplo : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : LibC::Double*, ldab : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dpftrf(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, info : Int32*)
    fun dpftri(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, info : Int32*)
    fun dpftrs(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dpocon(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dpoequ(n : Int32*, a : LibC::Double*, lda : Int32*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, info : Int32*)
    fun dpoequb(n : Int32*, a : LibC::Double*, lda : Int32*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, info : Int32*)
    fun dporfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dporfsx(uplo : LibC::Char*, equed : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, s : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dposv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dposvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, equed : LibC::Char*, s : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dposvxx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, equed : LibC::Char*, s : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, rpvgrw : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dpotf2(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, info : Int32*)
    fun dpotrf(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, info : Int32*)
    fun dpotrf2(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, info : Int32*)
    fun dpotri(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, info : Int32*)
    fun dpotrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dppcon(uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, anorm : LibC::Double*, rcond : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dppequ(uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, info : Int32*)
    fun dpprfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Double*, afp : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dppsv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Double*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dppsvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Double*, afp : LibC::Double*, equed : LibC::Char*, s : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dpptrf(uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, info : Int32*)
    fun dpptri(uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, info : Int32*)
    fun dpptrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Double*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dpstf2(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, piv : Int32*, rank : Int32*, tol : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dpstrf(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, piv : Int32*, rank : Int32*, tol : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dptcon(n : Int32*, d : LibC::Double*, e : LibC::Double*, anorm : LibC::Double*, rcond : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dpteqr(compz : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, info : Int32*)
    fun dptrfs(n : Int32*, nrhs : Int32*, d : LibC::Double*, e : LibC::Double*, df : LibC::Double*, ef : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dptsv(n : Int32*, nrhs : Int32*, d : LibC::Double*, e : LibC::Double*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dptsvx(fact : LibC::Char*, n : Int32*, nrhs : Int32*, d : LibC::Double*, e : LibC::Double*, df : LibC::Double*, ef : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dpttrf(n : Int32*, d : LibC::Double*, e : LibC::Double*, info : Int32*)
    fun dpttrs(n : Int32*, nrhs : Int32*, d : LibC::Double*, e : LibC::Double*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dptts2(n : Int32*, nrhs : Int32*, d__ : LibC::Double*, e : LibC::Double*, b : LibC::Double*, ldb : Int32*)
    fun drscl(n : Int32*, sa : LibC::Double*, sx : LibC::Double*, incx : Int32*)
    fun dsbev(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Double*, ldab : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, info : Int32*)
    fun dsbev_2stage(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Double*, ldab : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsbevd(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Double*, ldab : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dsbevd_2stage(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Double*, ldab : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dsbevx(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Double*, ldab : Int32*, q : LibC::Double*, ldq : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun dsbevx_2stage(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Double*, ldab : Int32*, q : LibC::Double*, ldq : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun dsbgst(vect : LibC::Char*, uplo : LibC::Char*, n : Int32*, ka : Int32*, kb : Int32*, ab : LibC::Double*, ldab : Int32*, bb : LibC::Double*, ldbb : Int32*, x : LibC::Double*, ldx : Int32*, work : LibC::Double*, info : Int32*)
    fun dsbgv(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ka : Int32*, kb : Int32*, ab : LibC::Double*, ldab : Int32*, bb : LibC::Double*, ldbb : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, info : Int32*)
    fun dsbgvd(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ka : Int32*, kb : Int32*, ab : LibC::Double*, ldab : Int32*, bb : LibC::Double*, ldbb : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dsbgvx(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, ka : Int32*, kb : Int32*, ab : LibC::Double*, ldab : Int32*, bb : LibC::Double*, ldbb : Int32*, q : LibC::Double*, ldq : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun dsbtrd(vect : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Double*, ldab : Int32*, d : LibC::Double*, e : LibC::Double*, q : LibC::Double*, ldq : Int32*, work : LibC::Double*, info : Int32*)
    fun dsecnd : LibC::Double
    fun dsfrk(transr : LibC::Char*, uplo : LibC::Char*, trans : LibC::Char*, n : Int32*, k : Int32*, alpha : LibC::Double*, a : LibC::Double*, lda : Int32*, beta : LibC::Double*, c : LibC::Double*)
    fun dsgesv(n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, work : LibC::Double*, swork : LibC::Float*, iter : Int32*, info : Int32*)
    fun dspcon(uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, ipiv : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dspev(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, info : Int32*)
    fun dspevd(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dspevx(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun dspgst(itype : Int32*, uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, bp : LibC::Double*, info : Int32*)
    fun dspgv(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, bp : LibC::Double*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, info : Int32*)
    fun dspgvd(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, bp : LibC::Double*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dspgvx(itype : Int32*, jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, bp : LibC::Double*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun dsposv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, work : LibC::Double*, swork : LibC::Float*, iter : Int32*, info : Int32*)
    fun dsprfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Double*, afp : LibC::Double*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dspsv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Double*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dspsvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Double*, afp : LibC::Double*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dsptrd(uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, d : LibC::Double*, e : LibC::Double*, tau : LibC::Double*, info : Int32*)
    fun dsptrf(uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, ipiv : Int32*, info : Int32*)
    fun dsptri(uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, ipiv : Int32*, work : LibC::Double*, info : Int32*)
    fun dsptrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Double*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dstebz(range : LibC::Char*, order : LibC::Char*, n : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, d : LibC::Double*, e : LibC::Double*, m : Int32*, nsplit : Int32*, w : LibC::Double*, iblock : Int32*, isplit : Int32*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dstedc(compz : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dstegr(jobz : LibC::Char*, range : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, isuppz : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dstein(n : Int32*, d : LibC::Double*, e : LibC::Double*, m : Int32*, w : LibC::Double*, iblock : Int32*, isplit : Int32*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun dstemr(jobz : LibC::Char*, range : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, m : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, nzc : Int32*, isuppz : Int32*, tryrac : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dsteqr(compz : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, info : Int32*)
    fun dsterf(n : Int32*, d : LibC::Double*, e : LibC::Double*, info : Int32*)
    fun dstev(jobz : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, info : Int32*)
    fun dstevd(jobz : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dstevr(jobz : LibC::Char*, range : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, isuppz : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dstevx(jobz : LibC::Char*, range : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun dsycon(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dsycon_3(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, e : LibC::Double*, ipiv : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dsyconv(uplo : LibC::Char*, way : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, e : LibC::Double*, info : Int32*)
    fun dsyequb(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun dsyev(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, w : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsyev_2stage(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, w : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsyevd(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, w : LibC::Double*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dsyevd_2stage(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, w : LibC::Double*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dsyevr(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, isuppz : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dsyevr_2stage(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, isuppz : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dsyevx(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun dsyevx_2stage(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun dsygs2(itype : Int32*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dsygst(itype : Int32*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dsygv(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, w : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsygv_2stage(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, w : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsygvd(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, w : LibC::Double*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dsygvx(itype : Int32*, jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : LibC::Double*, ldz : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun dsyrfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dsyrfsx(uplo : LibC::Char*, equed : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, ipiv : Int32*, s : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dsysv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsysv_aa(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsysv_aa_2stage(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, tb : LibC::Double*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, b : LibC::Double*, ldb : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsysv_rk(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, e : LibC::Double*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsysv_rook(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsysvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun dsysvxx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, af : LibC::Double*, ldaf : Int32*, ipiv : Int32*, equed : LibC::Char*, s : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, rcond : LibC::Double*, rpvgrw : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dsyswapr(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, i1 : Int32*, i2 : Int32*)
    fun dsytd2(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, d__ : LibC::Double*, e : LibC::Double*, tau : LibC::Double*, info : Int32*)
    fun dsytf2(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun dsytrd(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, d : LibC::Double*, e : LibC::Double*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsytrd_2stage(vect : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, d : LibC::Double*, e : LibC::Double*, tau : LibC::Double*, hous2 : LibC::Double*, lhous2 : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsytrf(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsytrf_aa(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsytrf_aa_2stage(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, tb : LibC::Double*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsytrf_rk(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, e : LibC::Double*, ipiv : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsytrf_rook(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsytri(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, work : LibC::Double*, info : Int32*)
    fun dsytri2(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsytri2x(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, work : LibC::Double*, nb : Int32*, info : Int32*)
    fun dsytri_3(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, e : LibC::Double*, ipiv : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsytrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dsytrs2(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, work : LibC::Double*, info : Int32*)
    fun dsytrs_3(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, e : LibC::Double*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dsytrs_aa(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dsytrs_aa_2stage(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, tb : LibC::Double*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dsytrs_rook(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, ipiv : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dtbcon(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Double*, ldab : Int32*, rcond : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dtbrfs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : LibC::Double*, ldab : Int32*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dtbtrs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : LibC::Double*, ldab : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dtfsm(transr : LibC::Char*, side : LibC::Char*, uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, m : Int32*, n : Int32*, alpha : LibC::Double*, a : LibC::Double*, b : LibC::Double*, ldb : Int32*)
    fun dtftri(transr : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, a : LibC::Double*, info : Int32*)
    fun dtfttp(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, arf : LibC::Double*, ap : LibC::Double*, info : Int32*)
    fun dtfttr(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, arf : LibC::Double*, a : LibC::Double*, lda : Int32*, info : Int32*)
    fun dtgevc(side : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, s : LibC::Double*, lds : Int32*, p : LibC::Double*, ldp : Int32*, vl : LibC::Double*, ldvl : Int32*, vr : LibC::Double*, ldvr : Int32*, mm : Int32*, m : Int32*, work : LibC::Double*, info : Int32*)
    fun dtgex2(wantq : LibC::Char*, wantz : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, q : LibC::Double*, ldq : Int32*, z__ : LibC::Double*, ldz : Int32*, j1 : Int32*, n1 : Int32*, n2 : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dtgexc(wantq : Int32*, wantz : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, q : LibC::Double*, ldq : Int32*, z : LibC::Double*, ldz : Int32*, ifst : Int32*, ilst : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dtgsen(ijob : Int32*, wantq : Int32*, wantz : Int32*, select : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, alphar : LibC::Double*, alphai : LibC::Double*, beta : LibC::Double*, q : LibC::Double*, ldq : Int32*, z : LibC::Double*, ldz : Int32*, m : Int32*, pl : LibC::Double*, pr : LibC::Double*, dif : LibC::Double*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dtgsja(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, p : Int32*, n : Int32*, k : Int32*, l : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, tola : LibC::Double*, tolb : LibC::Double*, alpha : LibC::Double*, beta : LibC::Double*, u : LibC::Double*, ldu : Int32*, v : LibC::Double*, ldv : Int32*, q : LibC::Double*, ldq : Int32*, work : LibC::Double*, ncycle : Int32*, info : Int32*)
    fun dtgsna(job : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, vl : LibC::Double*, ldvl : Int32*, vr : LibC::Double*, ldvr : Int32*, s : LibC::Double*, dif : LibC::Double*, mm : Int32*, m : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun dtgsy2(trans : LibC::Char*, ijob : Int32*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, c__ : LibC::Double*, ldc : Int32*, d__ : LibC::Double*, ldd : Int32*, e : LibC::Double*, lde : Int32*, f : LibC::Double*, ldf : Int32*, scale : LibC::Double*, rdsum : LibC::Double*, rdscal : LibC::Double*, iwork : Int32*, pq : Int32*, info : Int32*)
    fun dtgsyl(trans : LibC::Char*, ijob : Int32*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, c : LibC::Double*, ldc : Int32*, d : LibC::Double*, ldd : Int32*, e : LibC::Double*, lde : Int32*, f : LibC::Double*, ldf : Int32*, dif : LibC::Double*, scale : LibC::Double*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun dtpcon(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, ap : LibC::Double*, rcond : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dtplqt(m : Int32*, n : Int32*, l : Int32*, mb : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, t : LibC::Double*, ldt : Int32*, work : LibC::Double*, info : Int32*)
    fun dtplqt2(m : Int32*, n : Int32*, l : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, t : LibC::Double*, ldt : Int32*, info : Int32*)
    fun dtpmlqt(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, mb : Int32*, v : LibC::Double*, ldv : Int32*, t : LibC::Double*, ldt : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, work : LibC::Double*, info : Int32*)
    fun dtpmqrt(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, nb : Int32*, v : LibC::Double*, ldv : Int32*, t : LibC::Double*, ldt : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, work : LibC::Double*, info : Int32*)
    fun dtpqrt(m : Int32*, n : Int32*, l : Int32*, nb : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, t : LibC::Double*, ldt : Int32*, work : LibC::Double*, info : Int32*)
    fun dtpqrt2(m : Int32*, n : Int32*, l : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, t : LibC::Double*, ldt : Int32*, info : Int32*)
    fun dtprfb(side : LibC::Char*, trans : LibC::Char*, direct : LibC::Char*, storev : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, v : LibC::Double*, ldv : Int32*, t : LibC::Double*, ldt : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, work : LibC::Double*, ldwork : Int32*)
    fun dtprfs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Double*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dtptri(uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, ap : LibC::Double*, info : Int32*)
    fun dtptrs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Double*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dtpttf(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, arf : LibC::Double*, info : Int32*)
    fun dtpttr(uplo : LibC::Char*, n : Int32*, ap : LibC::Double*, a : LibC::Double*, lda : Int32*, info : Int32*)
    fun dtrcon(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, rcond : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dtrevc(side : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, t : LibC::Double*, ldt : Int32*, vl : LibC::Double*, ldvl : Int32*, vr : LibC::Double*, ldvr : Int32*, mm : Int32*, m : Int32*, work : LibC::Double*, info : Int32*)
    fun dtrevc3(side : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, t : LibC::Double*, ldt : Int32*, vl : LibC::Double*, ldvl : Int32*, vr : LibC::Double*, ldvr : Int32*, mm : Int32*, m : Int32*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dtrexc(compq : LibC::Char*, n : Int32*, t : LibC::Double*, ldt : Int32*, q : LibC::Double*, ldq : Int32*, ifst : Int32*, ilst : Int32*, work : LibC::Double*, info : Int32*)
    fun dtrrfs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, x : LibC::Double*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun dtrsen(job : LibC::Char*, compq : LibC::Char*, select : Int32*, n : Int32*, t : LibC::Double*, ldt : Int32*, q : LibC::Double*, ldq : Int32*, wr : LibC::Double*, wi : LibC::Double*, m : Int32*, s : LibC::Double*, sep : LibC::Double*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun dtrsna(job : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, t : LibC::Double*, ldt : Int32*, vl : LibC::Double*, ldvl : Int32*, vr : LibC::Double*, ldvr : Int32*, s : LibC::Double*, sep : LibC::Double*, mm : Int32*, m : Int32*, work : LibC::Double*, ldwork : Int32*, iwork : Int32*, info : Int32*)
    fun dtrsyl(trana : LibC::Char*, tranb : LibC::Char*, isgn : Int32*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, c : LibC::Double*, ldc : Int32*, scale : LibC::Double*, info : Int32*)
    fun dtrsyl3(trana : LibC::Char*, tranb : LibC::Char*, isgn : Int32*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, c : LibC::Double*, ldc : Int32*, scale : LibC::Double*, iwork : Int32*, liwork : Int32*, swork : LibC::Double*, ldswork : Int32*, info : Int32*)
    fun dtrti2(uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, info : Int32*)
    fun dtrtri(uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, info : Int32*)
    fun dtrtrs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Double*, lda : Int32*, b : LibC::Double*, ldb : Int32*, info : Int32*)
    fun dtrttf(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, arf : LibC::Double*, info : Int32*)
    fun dtrttp(uplo : LibC::Char*, n : Int32*, a : LibC::Double*, lda : Int32*, ap : LibC::Double*, info : Int32*)
    fun dtzrqf(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, info : Int32*)
    fun dtzrzf(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, tau : LibC::Double*, work : LibC::Double*, lwork : Int32*, info : Int32*)
    fun dzsum1(n : Int32*, cx : ComplexDouble*, incx : Int32*) : LibC::Double
    fun icmax1(n : Int32*, cx : ComplexFloat*, incx : Int32*) : Int32
    fun ieeeck(ispec : Int32*, zero : LibC::Float*, one : LibC::Float*) : Int32
    fun ilaclc(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*) : Int32
    fun ilaclr(m : Int32*, n : Int32*, a : ComplexFloat*, lda : Int32*) : Int32
    fun iladiag(diag : LibC::Char*) : Int32
    fun iladlc(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*) : Int32
    fun iladlr(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*) : Int32
    fun ilaenv(ispec : Int32*, name__ : LibC::Char*, opts : LibC::Char*, n1 : Int32*, n2 : Int32*, n3 : Int32*, n4 : Int32*) : Int32
    fun ilaprec(prec : LibC::Char*) : Int32
    fun ilaslc(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*) : Int32
    fun ilaslr(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*) : Int32
    fun ilatrans(trans : LibC::Char*) : Int32
    fun ilauplo(uplo : LibC::Char*) : Int32
    fun ilaver(vers_major : Int32*, vers_minor : Int32*, vers_patch : Int32*)
    fun ilazlc(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*) : Int32
    fun ilazlr(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*) : Int32
    fun iparmq(ispec : Int32*, name__ : LibC::Char*, opts : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, lwork : Int32*) : Int32
    fun izmax1(n : Int32*, cx : ComplexDouble*, incx : Int32*) : Int32
    fun lsame(ca : LibC::Char*, cb : LibC::Char*) : LibC::Char
    fun lsamen(n : Int32*, ca : LibC::Char*, cb : LibC::Char*) : LibC::Char
    fun sbbcsd(jobu1 : LibC::Char*, jobu2 : LibC::Char*, jobv1t : LibC::Char*, jobv2t : LibC::Char*, trans : LibC::Char*, m : Int32*, p : Int32*, q : Int32*, theta : LibC::Float*, phi : LibC::Float*, u1 : LibC::Float*, ldu1 : Int32*, u2 : LibC::Float*, ldu2 : Int32*, v1_t : LibC::Float*, ldv1t : Int32*, v2_t : LibC::Float*, ldv2t : Int32*, b11_d : LibC::Float*, b11_e : LibC::Float*, b12_d : LibC::Float*, b12_e : LibC::Float*, b21_d : LibC::Float*, b21_e : LibC::Float*, b22_d : LibC::Float*, b22_e : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sbdsdc(uplo : LibC::Char*, compq : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*, u : LibC::Float*, ldu : Int32*, vt : LibC::Float*, ldvt : Int32*, q : LibC::Float*, iq : Int32*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sbdsqr(uplo : LibC::Char*, n : Int32*, ncvt : Int32*, nru : Int32*, ncc : Int32*, d : LibC::Float*, e : LibC::Float*, vt : LibC::Float*, ldvt : Int32*, u : LibC::Float*, ldu : Int32*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*, info : Int32*)
    fun sbdsvdx(uplo : LibC::Char*, jobz : LibC::Char*, range : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, ns : Int32*, s : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun scsum1(n : Int32*, cx : ComplexFloat*, incx : Int32*) : LibC::Double
    fun sdisna(job : LibC::Char*, m : Int32*, n : Int32*, d : LibC::Float*, sep : LibC::Float*, info : Int32*)
    fun second : LibC::Double
    fun sgbbrd(vect : LibC::Char*, m : Int32*, n : Int32*, ncc : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Float*, ldab : Int32*, d : LibC::Float*, e : LibC::Float*, q : LibC::Float*, ldq : Int32*, pt : LibC::Float*, ldpt : Int32*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*, info : Int32*)
    fun sgbcon(norm : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Float*, ldab : Int32*, ipiv : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sgbequ(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Float*, ldab : Int32*, r : LibC::Float*, c : LibC::Float*, rowcnd : LibC::Float*, colcnd : LibC::Float*, amax : LibC::Float*, info : Int32*)
    fun sgbequb(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Float*, ldab : Int32*, r : LibC::Float*, c : LibC::Float*, rowcnd : LibC::Float*, colcnd : LibC::Float*, amax : LibC::Float*, info : Int32*)
    fun sgbrfs(trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : LibC::Float*, ldab : Int32*, afb : LibC::Float*, ldafb : Int32*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sgbrfsx(trans : LibC::Char*, equed : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : LibC::Float*, ldab : Int32*, afb : LibC::Float*, ldafb : Int32*, ipiv : Int32*, r : LibC::Float*, c : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sgbsv(n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : LibC::Float*, ldab : Int32*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun sgbsvx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : LibC::Float*, ldab : Int32*, afb : LibC::Float*, ldafb : Int32*, ipiv : Int32*, equed : LibC::Char*, r : LibC::Float*, c : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sgbsvxx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : LibC::Float*, ldab : Int32*, afb : LibC::Float*, ldafb : Int32*, ipiv : Int32*, equed : LibC::Char*, r : LibC::Float*, c : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, rpvgrw : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sgbtf2(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Float*, ldab : Int32*, ipiv : Int32*, info : Int32*)
    fun sgbtrf(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Float*, ldab : Int32*, ipiv : Int32*, info : Int32*)
    fun sgbtrs(trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : LibC::Float*, ldab : Int32*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun sgebak(job : LibC::Char*, side : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, scale : LibC::Float*, m : Int32*, v : LibC::Float*, ldv : Int32*, info : Int32*)
    fun sgebal(job : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, ilo : Int32*, ihi : Int32*, scale : LibC::Float*, info : Int32*)
    fun sgebd2(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, d__ : LibC::Float*, e : LibC::Float*, tauq : LibC::Float*, taup : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun sgebrd(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, d : LibC::Float*, e : LibC::Float*, tauq : LibC::Float*, taup : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgecon(norm : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sgeequ(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, r : LibC::Float*, c : LibC::Float*, rowcnd : LibC::Float*, colcnd : LibC::Float*, amax : LibC::Float*, info : Int32*)
    fun sgeequb(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, r : LibC::Float*, c : LibC::Float*, rowcnd : LibC::Float*, colcnd : LibC::Float*, amax : LibC::Float*, info : Int32*)
    fun sgees(jobvs : LibC::Char*, sort : LibC::Char*, select : LapackSSelect2, n : Int32*, a : LibC::Float*, lda : Int32*, sdim : Int32*, wr : LibC::Float*, wi : LibC::Float*, vs : LibC::Float*, ldvs : Int32*, work : LibC::Float*, lwork : Int32*, bwork : Int32*, info : Int32*)
    fun sgeesx(jobvs : LibC::Char*, sort : LibC::Char*, select : LapackSSelect2, sense : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, sdim : Int32*, wr : LibC::Float*, wi : LibC::Float*, vs : LibC::Float*, ldvs : Int32*, rconde : LibC::Float*, rcondv : LibC::Float*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, bwork : Int32*, info : Int32*)
    fun sgeev(jobvl : LibC::Char*, jobvr : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, wr : LibC::Float*, wi : LibC::Float*, vl : LibC::Float*, ldvl : Int32*, vr : LibC::Float*, ldvr : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgeevx(balanc : LibC::Char*, jobvl : LibC::Char*, jobvr : LibC::Char*, sense : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, wr : LibC::Float*, wi : LibC::Float*, vl : LibC::Float*, ldvl : Int32*, vr : LibC::Float*, ldvr : Int32*, ilo : Int32*, ihi : Int32*, scale : LibC::Float*, abnrm : LibC::Float*, rconde : LibC::Float*, rcondv : LibC::Float*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun sgegs(jobvsl : LibC::Char*, jobvsr : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, alphar : LibC::Float*, alphai : LibC::Float*, beta : LibC::Float*, vsl : LibC::Float*, ldvsl : Int32*, vsr : LibC::Float*, ldvsr : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgegv(jobvl : LibC::Char*, jobvr : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, alphar : LibC::Float*, alphai : LibC::Float*, beta : LibC::Float*, vl : LibC::Float*, ldvl : Int32*, vr : LibC::Float*, ldvr : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgehd2(n : Int32*, ilo : Int32*, ihi : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun sgehrd(n : Int32*, ilo : Int32*, ihi : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgejsv(joba : LibC::Char*, jobu : LibC::Char*, jobv : LibC::Char*, jobr : LibC::Char*, jobt : LibC::Char*, jobp : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, sva : LibC::Float*, u : LibC::Float*, ldu : Int32*, v : LibC::Float*, ldv : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun sgelq(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, t : LibC::Float*, tsize : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgelq2(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun sgelqf(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgels(trans : LibC::Char*, m : Int32*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgelsd(m : Int32*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, s : LibC::Float*, rcond : LibC::Float*, rank : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun sgelss(m : Int32*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, s : LibC::Float*, rcond : LibC::Float*, rank : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgelsx(m : Int32*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, jpvt : Int32*, rcond : LibC::Float*, rank : Int32*, work : LibC::Float*, info : Int32*)
    fun sgelsy(m : Int32*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, jpvt : Int32*, rcond : LibC::Float*, rank : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgemlq(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, t : LibC::Float*, tsize : Int32*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgemqr(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, t : LibC::Float*, tsize : Int32*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgemqrt(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, nb : Int32*, v : LibC::Float*, ldv : Int32*, t : LibC::Float*, ldt : Int32*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*, info : Int32*)
    fun sgeql2(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun sgeqlf(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgeqp3(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, jpvt : Int32*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgeqpf(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, jpvt : Int32*, tau : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun sgeqr(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, t : LibC::Float*, tsize : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgeqr2(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun sgeqrf(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgeqrfp(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgeqrt(m : Int32*, n : Int32*, nb : Int32*, a : LibC::Float*, lda : Int32*, t : LibC::Float*, ldt : Int32*, work : LibC::Float*, info : Int32*)
    fun sgeqrt2(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, t : LibC::Float*, ldt : Int32*, info : Int32*)
    fun sgeqrt3(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, t : LibC::Float*, ldt : Int32*, info : Int32*)
    fun sgerfs(trans : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sgerfsx(trans : LibC::Char*, equed : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, ipiv : Int32*, r : LibC::Float*, c : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sgerq2(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun sgerqf(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgesc2(n : Int32*, a : LibC::Float*, lda : Int32*, rhs : LibC::Float*, ipiv : Int32*, jpiv : Int32*, scale : LibC::Float*)
    fun sgesdd(jobz : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, s : LibC::Float*, u : LibC::Float*, ldu : Int32*, vt : LibC::Float*, ldvt : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun sgesv(n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun sgesvd(jobu : LibC::Char*, jobvt : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, s : LibC::Float*, u : LibC::Float*, ldu : Int32*, vt : LibC::Float*, ldvt : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgesvdq(joba : LibC::Char*, jobp : LibC::Char*, jobr : LibC::Char*, jobu : LibC::Char*, jobv : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, s : LibC::Float*, u : LibC::Float*, ldu : Int32*, v : LibC::Float*, ldv : Int32*, numrank : Int32*, iwork : Int32*, liwork : Int32*, work : LibC::Float*, lwork : Int32*, rwork : LibC::Float*, lrwork : Int32*, info : Int32*)
    fun sgesvdx(jobu : LibC::Char*, jobvt : LibC::Char*, range : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, ns : Int32*, s : LibC::Float*, u : LibC::Float*, ldu : Int32*, vt : LibC::Float*, ldvt : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun sgesvj(joba : LibC::Char*, jobu : LibC::Char*, jobv : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, sva : LibC::Float*, mv : Int32*, v : LibC::Float*, ldv : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgesvx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, ipiv : Int32*, equed : LibC::Char*, r : LibC::Float*, c : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sgesvxx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, ipiv : Int32*, equed : LibC::Char*, r : LibC::Float*, c : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, rpvgrw : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sgetc2(n : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, jpiv : Int32*, info : Int32*)
    fun sgetf2(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun sgetrf(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun sgetrf2(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun sgetri(n : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgetrs(trans : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun sgetsls(trans : LibC::Char*, m : Int32*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgetsqrhrt(m : Int32*, n : Int32*, mb1 : Int32*, nb1 : Int32*, nb2 : Int32*, a : LibC::Float*, lda : Int32*, t : LibC::Float*, ldt : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sggbak(job : LibC::Char*, side : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, lscale : LibC::Float*, rscale : LibC::Float*, m : Int32*, v : LibC::Float*, ldv : Int32*, info : Int32*)
    fun sggbal(job : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, ilo : Int32*, ihi : Int32*, lscale : LibC::Float*, rscale : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun sgges(jobvsl : LibC::Char*, jobvsr : LibC::Char*, sort : LibC::Char*, selctg : LapackSSelect3, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, sdim : Int32*, alphar : LibC::Float*, alphai : LibC::Float*, beta : LibC::Float*, vsl : LibC::Float*, ldvsl : Int32*, vsr : LibC::Float*, ldvsr : Int32*, work : LibC::Float*, lwork : Int32*, bwork : Int32*, info : Int32*)
    fun sgges3(jobvsl : LibC::Char*, jobvsr : LibC::Char*, sort : LibC::Char*, selctg : LapackSSelect3, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, sdim : Int32*, alphar : LibC::Float*, alphai : LibC::Float*, beta : LibC::Float*, vsl : LibC::Float*, ldvsl : Int32*, vsr : LibC::Float*, ldvsr : Int32*, work : LibC::Float*, lwork : Int32*, bwork : Int32*, info : Int32*)
    fun sggesx(jobvsl : LibC::Char*, jobvsr : LibC::Char*, sort : LibC::Char*, selctg : LapackSSelect3, sense : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, sdim : Int32*, alphar : LibC::Float*, alphai : LibC::Float*, beta : LibC::Float*, vsl : LibC::Float*, ldvsl : Int32*, vsr : LibC::Float*, ldvsr : Int32*, rconde : LibC::Float*, rcondv : LibC::Float*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, bwork : Int32*, info : Int32*)
    fun sggev(jobvl : LibC::Char*, jobvr : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, alphar : LibC::Float*, alphai : LibC::Float*, beta : LibC::Float*, vl : LibC::Float*, ldvl : Int32*, vr : LibC::Float*, ldvr : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sggev3(jobvl : LibC::Char*, jobvr : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, alphar : LibC::Float*, alphai : LibC::Float*, beta : LibC::Float*, vl : LibC::Float*, ldvl : Int32*, vr : LibC::Float*, ldvr : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sggevx(balanc : LibC::Char*, jobvl : LibC::Char*, jobvr : LibC::Char*, sense : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, alphar : LibC::Float*, alphai : LibC::Float*, beta : LibC::Float*, vl : LibC::Float*, ldvl : Int32*, vr : LibC::Float*, ldvr : Int32*, ilo : Int32*, ihi : Int32*, lscale : LibC::Float*, rscale : LibC::Float*, abnrm : LibC::Float*, bbnrm : LibC::Float*, rconde : LibC::Float*, rcondv : LibC::Float*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, bwork : Int32*, info : Int32*)
    fun sggglm(n : Int32*, m : Int32*, p : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, d : LibC::Float*, x : LibC::Float*, y : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgghd3(compq : LibC::Char*, compz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, q : LibC::Float*, ldq : Int32*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgghrd(compq : LibC::Char*, compz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, q : LibC::Float*, ldq : Int32*, z : LibC::Float*, ldz : Int32*, info : Int32*)
    fun sgglse(m : Int32*, n : Int32*, p : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, c : LibC::Float*, d : LibC::Float*, x : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sggqrf(n : Int32*, m : Int32*, p : Int32*, a : LibC::Float*, lda : Int32*, taua : LibC::Float*, b : LibC::Float*, ldb : Int32*, taub : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sggrqf(m : Int32*, p : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, taua : LibC::Float*, b : LibC::Float*, ldb : Int32*, taub : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sggsvd(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, n : Int32*, p : Int32*, k : Int32*, l : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, alpha : LibC::Float*, beta : LibC::Float*, u : LibC::Float*, ldu : Int32*, v : LibC::Float*, ldv : Int32*, q : LibC::Float*, ldq : Int32*, work : LibC::Float*, iwork : Int32*, info : Int32*) : Int32
    fun sggsvd3(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, n : Int32*, p : Int32*, k : Int32*, l : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, alpha : LibC::Float*, beta : LibC::Float*, u : LibC::Float*, ldu : Int32*, v : LibC::Float*, ldv : Int32*, q : LibC::Float*, ldq : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun sggsvp(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, p : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, tola : LibC::Float*, tolb : LibC::Float*, k : Int32*, l : Int32*, u : LibC::Float*, ldu : Int32*, v : LibC::Float*, ldv : Int32*, q : LibC::Float*, ldq : Int32*, iwork : Int32*, tau : LibC::Float*, work : LibC::Float*, info : Int32*) : Int32
    fun sggsvp3(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, p : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, tola : LibC::Float*, tolb : LibC::Float*, k : Int32*, l : Int32*, u : LibC::Float*, ldu : Int32*, v : LibC::Float*, ldv : Int32*, q : LibC::Float*, ldq : Int32*, iwork : Int32*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgsvj0(jobv : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, d__ : LibC::Float*, sva : LibC::Float*, mv : Int32*, v : LibC::Float*, ldv : Int32*, eps : LibC::Float*, sfmin : LibC::Float*, tol : LibC::Float*, nsweep : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgsvj1(jobv : LibC::Char*, m : Int32*, n : Int32*, n1 : Int32*, a : LibC::Float*, lda : Int32*, d__ : LibC::Float*, sva : LibC::Float*, mv : Int32*, v : LibC::Float*, ldv : Int32*, eps : LibC::Float*, sfmin : LibC::Float*, tol : LibC::Float*, nsweep : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sgtcon(norm : LibC::Char*, n : Int32*, dl : LibC::Float*, d : LibC::Float*, du : LibC::Float*, du2 : LibC::Float*, ipiv : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sgtrfs(trans : LibC::Char*, n : Int32*, nrhs : Int32*, dl : LibC::Float*, d : LibC::Float*, du : LibC::Float*, dlf : LibC::Float*, df : LibC::Float*, duf : LibC::Float*, du2 : LibC::Float*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sgtsv(n : Int32*, nrhs : Int32*, dl : LibC::Float*, d : LibC::Float*, du : LibC::Float*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun sgtsvx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, nrhs : Int32*, dl : LibC::Float*, d : LibC::Float*, du : LibC::Float*, dlf : LibC::Float*, df : LibC::Float*, duf : LibC::Float*, du2 : LibC::Float*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sgttrf(n : Int32*, dl : LibC::Float*, d : LibC::Float*, du : LibC::Float*, du2 : LibC::Float*, ipiv : Int32*, info : Int32*)
    fun sgttrs(trans : LibC::Char*, n : Int32*, nrhs : Int32*, dl : LibC::Float*, d : LibC::Float*, du : LibC::Float*, du2 : LibC::Float*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun sgtts2(itrans : Int32*, n : Int32*, nrhs : Int32*, dl : LibC::Float*, d__ : LibC::Float*, du : LibC::Float*, du2 : LibC::Float*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*)
    fun shgeqz(job : LibC::Char*, compq : LibC::Char*, compz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h : LibC::Float*, ldh : Int32*, t : LibC::Float*, ldt : Int32*, alphar : LibC::Float*, alphai : LibC::Float*, beta : LibC::Float*, q : LibC::Float*, ldq : Int32*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun shsein(side : LibC::Char*, eigsrc : LibC::Char*, initv : LibC::Char*, select : Int32*, n : Int32*, h : LibC::Float*, ldh : Int32*, wr : LibC::Float*, wi : LibC::Float*, vl : LibC::Float*, ldvl : Int32*, vr : LibC::Float*, ldvr : Int32*, mm : Int32*, m : Int32*, work : LibC::Float*, ifaill : Int32*, ifailr : Int32*, info : Int32*)
    fun shseqr(job : LibC::Char*, compz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h : LibC::Float*, ldh : Int32*, wr : LibC::Float*, wi : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sisnan(sin__ : LibC::Float*) : LibC::Char
    fun sla_gbamv_(trans : Int32*, m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, alpha : LibC::Float*, ab : LibC::Float*, ldab : Int32*, x : LibC::Float*, incx : Int32*, beta : LibC::Float*, y : LibC::Float*, incy : Int32*)
    fun sla_gbrcond_(trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Float*, ldab : Int32*, afb : LibC::Float*, ldafb : Int32*, ipiv : Int32*, cmode : Int32*, c__ : LibC::Float*, info : Int32*, work : LibC::Float*, iwork : Int32*, trans_len : LibC::Int) : LibC::Double
    fun sla_gbrfsx_extended_(prec_type__ : Int32*, trans_type__ : Int32*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : LibC::Float*, ldab : Int32*, afb : LibC::Float*, ldafb : Int32*, ipiv : Int32*, colequ : LibC::Char*, c__ : LibC::Float*, b : LibC::Float*, ldb : Int32*, y : LibC::Float*, ldy : Int32*, berr_out__ : LibC::Float*, n_norms__ : Int32*, errs_n__ : LibC::Float*, errs_c__ : LibC::Float*, res : LibC::Float*, ayb : LibC::Float*, dy : LibC::Float*, y_tail__ : LibC::Float*, rcond : LibC::Float*, ithresh : Int32*, rthresh : LibC::Float*, dz_ub__ : LibC::Float*, ignore_cwise__ : LibC::Char*, info : Int32*)
    fun sla_gbrpvgrw_(n : Int32*, kl : Int32*, ku : Int32*, ncols : Int32*, ab : LibC::Float*, ldab : Int32*, afb : LibC::Float*, ldafb : Int32*) : LibC::Double
    fun sla_geamv_(trans : Int32*, m : Int32*, n : Int32*, alpha : LibC::Float*, a : LibC::Float*, lda : Int32*, x : LibC::Float*, incx : Int32*, beta : LibC::Float*, y : LibC::Float*, incy : Int32*)
    fun sla_gercond_(trans : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, ipiv : Int32*, cmode : Int32*, c__ : LibC::Float*, info : Int32*, work : LibC::Float*, iwork : Int32*, trans_len : LibC::Int) : LibC::Double
    fun sla_gerfsx_extended_(prec_type__ : Int32*, trans_type__ : Int32*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, ipiv : Int32*, colequ : LibC::Char*, c__ : LibC::Float*, b : LibC::Float*, ldb : Int32*, y : LibC::Float*, ldy : Int32*, berr_out__ : LibC::Float*, n_norms__ : Int32*, errs_n__ : LibC::Float*, errs_c__ : LibC::Float*, res : LibC::Float*, ayb : LibC::Float*, dy : LibC::Float*, y_tail__ : LibC::Float*, rcond : LibC::Float*, ithresh : Int32*, rthresh : LibC::Float*, dz_ub__ : LibC::Float*, ignore_cwise__ : LibC::Char*, info : Int32*)
    fun sla_lin_berr_(n : Int32*, nz : Int32*, nrhs : Int32*, res : LibC::Float*, ayb : LibC::Float*, berr : LibC::Float*)
    fun sla_porcond_(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, cmode : Int32*, c__ : LibC::Float*, info : Int32*, work : LibC::Float*, iwork : Int32*, uplo_len : LibC::Int) : LibC::Double
    fun sla_porfsx_extended_(prec_type__ : Int32*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, colequ : LibC::Char*, c__ : LibC::Float*, b : LibC::Float*, ldb : Int32*, y : LibC::Float*, ldy : Int32*, berr_out__ : LibC::Float*, n_norms__ : Int32*, errs_n__ : LibC::Float*, errs_c__ : LibC::Float*, res : LibC::Float*, ayb : LibC::Float*, dy : LibC::Float*, y_tail__ : LibC::Float*, rcond : LibC::Float*, ithresh : Int32*, rthresh : LibC::Float*, dz_ub__ : LibC::Float*, ignore_cwise__ : LibC::Char*, info : Int32*, uplo_len : LibC::Int)
    fun sla_porpvgrw_(uplo : LibC::Char*, ncols : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, work : LibC::Float*, uplo_len : LibC::Int) : LibC::Double
    fun sla_rpvgrw_(n : Int32*, ncols : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*) : LibC::Double
    fun sla_syamv_(uplo : Int32*, n : Int32*, alpha : LibC::Float*, a : LibC::Float*, lda : Int32*, x : LibC::Float*, incx : Int32*, beta : LibC::Float*, y : LibC::Float*, incy : Int32*)
    fun sla_syrcond_(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, ipiv : Int32*, cmode : Int32*, c__ : LibC::Float*, info : Int32*, work : LibC::Float*, iwork : Int32*, uplo_len : LibC::Int) : LibC::Double
    fun sla_syrfsx_extended_(prec_type__ : Int32*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, ipiv : Int32*, colequ : LibC::Char*, c__ : LibC::Float*, b : LibC::Float*, ldb : Int32*, y : LibC::Float*, ldy : Int32*, berr_out__ : LibC::Float*, n_norms__ : Int32*, errs_n__ : LibC::Float*, errs_c__ : LibC::Float*, res : LibC::Float*, ayb : LibC::Float*, dy : LibC::Float*, y_tail__ : LibC::Float*, rcond : LibC::Float*, ithresh : Int32*, rthresh : LibC::Float*, dz_ub__ : LibC::Float*, ignore_cwise__ : LibC::Char*, info : Int32*, uplo_len : LibC::Int)
    fun sla_syrpvgrw_(uplo : LibC::Char*, n : Int32*, info : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, ipiv : Int32*, work : LibC::Float*, uplo_len : LibC::Int) : LibC::Double
    fun sla_wwaddw_(n : Int32*, x : LibC::Float*, y : LibC::Float*, w : LibC::Float*)
    fun slabad(small : LibC::Float*, large : LibC::Float*)
    fun slabrd(m : Int32*, n : Int32*, nb : Int32*, a : LibC::Float*, lda : Int32*, d__ : LibC::Float*, e : LibC::Float*, tauq : LibC::Float*, taup : LibC::Float*, x : LibC::Float*, ldx : Int32*, y : LibC::Float*, ldy : Int32*)
    fun slacn2(n : Int32*, v : LibC::Float*, x : LibC::Float*, isgn : Int32*, est : LibC::Float*, kase : Int32*, isave : Int32*)
    fun slacon(n : Int32*, v : LibC::Float*, x : LibC::Float*, isgn : Int32*, est : LibC::Float*, kase : Int32*)
    fun slacpy(uplo : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*)
    fun sladiv(a : LibC::Float*, b : LibC::Float*, c__ : LibC::Float*, d__ : LibC::Float*, p : LibC::Float*, q : LibC::Float*)
    fun slae2(a : LibC::Float*, b : LibC::Float*, c__ : LibC::Float*, rt1 : LibC::Float*, rt2 : LibC::Float*)
    fun slaebz(ijob : Int32*, nitmax : Int32*, n : Int32*, mmax : Int32*, minp : Int32*, nbmin : Int32*, abstol : LibC::Float*, reltol : LibC::Float*, pivmin : LibC::Float*, d__ : LibC::Float*, e : LibC::Float*, e2 : LibC::Float*, nval : Int32*, ab : LibC::Float*, c__ : LibC::Float*, mout : Int32*, nab : Int32*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun slaed0(icompq : Int32*, qsiz : Int32*, n : Int32*, d__ : LibC::Float*, e : LibC::Float*, q : LibC::Float*, ldq : Int32*, qstore : LibC::Float*, ldqs : Int32*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun slaed1(n : Int32*, d__ : LibC::Float*, q : LibC::Float*, ldq : Int32*, indxq : Int32*, rho : LibC::Float*, cutpnt : Int32*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun slaed2(k : Int32*, n : Int32*, n1 : Int32*, d__ : LibC::Float*, q : LibC::Float*, ldq : Int32*, indxq : Int32*, rho : LibC::Float*, z__ : LibC::Float*, dlamda : LibC::Float*, w : LibC::Float*, q2 : LibC::Float*, indx : Int32*, indxc : Int32*, indxp : Int32*, coltyp : Int32*, info : Int32*)
    fun slaed3(k : Int32*, n : Int32*, n1 : Int32*, d__ : LibC::Float*, q : LibC::Float*, ldq : Int32*, rho : LibC::Float*, dlamda : LibC::Float*, q2 : LibC::Float*, indx : Int32*, ctot : Int32*, w : LibC::Float*, s : LibC::Float*, info : Int32*)
    fun slaed4(n : Int32*, i__ : Int32*, d__ : LibC::Float*, z__ : LibC::Float*, delta : LibC::Float*, rho : LibC::Float*, dlam : LibC::Float*, info : Int32*)
    fun slaed5(i__ : Int32*, d__ : LibC::Float*, z__ : LibC::Float*, delta : LibC::Float*, rho : LibC::Float*, dlam : LibC::Float*)
    fun slaed6(kniter : Int32*, orgati : LibC::Char*, rho : LibC::Float*, d__ : LibC::Float*, z__ : LibC::Float*, finit : LibC::Float*, tau : LibC::Float*, info : Int32*)
    fun slaed7(icompq : Int32*, n : Int32*, qsiz : Int32*, tlvls : Int32*, curlvl : Int32*, curpbm : Int32*, d__ : LibC::Float*, q : LibC::Float*, ldq : Int32*, indxq : Int32*, rho : LibC::Float*, cutpnt : Int32*, qstore : LibC::Float*, qptr : Int32*, prmptr : Int32*, perm : Int32*, givptr : Int32*, givcol : Int32*, givnum : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun slaed8(icompq : Int32*, k : Int32*, n : Int32*, qsiz : Int32*, d__ : LibC::Float*, q : LibC::Float*, ldq : Int32*, indxq : Int32*, rho : LibC::Float*, cutpnt : Int32*, z__ : LibC::Float*, dlamda : LibC::Float*, q2 : LibC::Float*, ldq2 : Int32*, w : LibC::Float*, perm : Int32*, givptr : Int32*, givcol : Int32*, givnum : LibC::Float*, indxp : Int32*, indx : Int32*, info : Int32*)
    fun slaed9(k : Int32*, kstart : Int32*, kstop : Int32*, n : Int32*, d__ : LibC::Float*, q : LibC::Float*, ldq : Int32*, rho : LibC::Float*, dlamda : LibC::Float*, w : LibC::Float*, s : LibC::Float*, lds : Int32*, info : Int32*)
    fun slaeda(n : Int32*, tlvls : Int32*, curlvl : Int32*, curpbm : Int32*, prmptr : Int32*, perm : Int32*, givptr : Int32*, givcol : Int32*, givnum : LibC::Float*, q : LibC::Float*, qptr : Int32*, z__ : LibC::Float*, ztemp : LibC::Float*, info : Int32*)
    fun slaein(rightv : LibC::Char*, noinit : LibC::Char*, n : Int32*, h__ : LibC::Float*, ldh : Int32*, wr : LibC::Float*, wi : LibC::Float*, vr : LibC::Float*, vi : LibC::Float*, b : LibC::Float*, ldb : Int32*, work : LibC::Float*, eps3 : LibC::Float*, smlnum : LibC::Float*, bignum : LibC::Float*, info : Int32*)
    fun slaev2(a : LibC::Float*, b : LibC::Float*, c__ : LibC::Float*, rt1 : LibC::Float*, rt2 : LibC::Float*, cs1 : LibC::Float*, sn1 : LibC::Float*)
    fun slaexc(wantq : LibC::Char*, n : Int32*, t : LibC::Float*, ldt : Int32*, q : LibC::Float*, ldq : Int32*, j1 : Int32*, n1 : Int32*, n2 : Int32*, work : LibC::Float*, info : Int32*)
    fun slag2(a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, safmin : LibC::Float*, scale1 : LibC::Float*, scale2 : LibC::Float*, wr1 : LibC::Float*, wr2 : LibC::Float*, wi : LibC::Float*)
    fun slag2d(m : Int32*, n : Int32*, sa : LibC::Float*, ldsa : Int32*, a : LibC::Double*, lda : Int32*, info : Int32*)
    fun slagge(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, d : LibC::Float*, a : LibC::Float*, lda : Int32*, iseed : Int32*, work : LibC::Float*, info : Int32*)
    fun slags2(upper : LibC::Char*, a1 : LibC::Float*, a2 : LibC::Float*, a3 : LibC::Float*, b1 : LibC::Float*, b2 : LibC::Float*, b3 : LibC::Float*, csu : LibC::Float*, snu : LibC::Float*, csv : LibC::Float*, snv : LibC::Float*, csq : LibC::Float*, snq : LibC::Float*)
    fun slagsy(n : Int32*, k : Int32*, d : LibC::Float*, a : LibC::Float*, lda : Int32*, iseed : Int32*, work : LibC::Float*, info : Int32*)
    fun slagtf(n : Int32*, a : LibC::Float*, lambda : LibC::Float*, b : LibC::Float*, c__ : LibC::Float*, tol : LibC::Float*, d__ : LibC::Float*, in : Int32*, info : Int32*)
    fun slagtm(trans : LibC::Char*, n : Int32*, nrhs : Int32*, alpha : LibC::Float*, dl : LibC::Float*, d__ : LibC::Float*, du : LibC::Float*, x : LibC::Float*, ldx : Int32*, beta : LibC::Float*, b : LibC::Float*, ldb : Int32*)
    fun slagts(job : Int32*, n : Int32*, a : LibC::Float*, b : LibC::Float*, c__ : LibC::Float*, d__ : LibC::Float*, in : Int32*, y : LibC::Float*, tol : LibC::Float*, info : Int32*)
    fun slagv2(a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, alphar : LibC::Float*, alphai : LibC::Float*, beta : LibC::Float*, csl : LibC::Float*, snl : LibC::Float*, csr : LibC::Float*, snr : LibC::Float*)
    fun slahqr(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h__ : LibC::Float*, ldh : Int32*, wr : LibC::Float*, wi : LibC::Float*, iloz : Int32*, ihiz : Int32*, z__ : LibC::Float*, ldz : Int32*, info : Int32*)
    fun slahr2(n : Int32*, k : Int32*, nb : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, t : LibC::Float*, ldt : Int32*, y : LibC::Float*, ldy : Int32*)
    fun slahrd(n : Int32*, k : Int32*, nb : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, t : LibC::Float*, ldt : Int32*, y : LibC::Float*, ldy : Int32*)
    fun slaic1(job : Int32*, j : Int32*, x : LibC::Float*, sest : LibC::Float*, w : LibC::Float*, gamma : LibC::Float*, sestpr : LibC::Float*, s : LibC::Float*, c__ : LibC::Float*)
    fun slaisnan(sin1 : LibC::Float*, sin2 : LibC::Float*) : LibC::Char
    fun slaln2(ltrans : LibC::Char*, na : Int32*, nw : Int32*, smin : LibC::Float*, ca : LibC::Float*, a : LibC::Float*, lda : Int32*, d1 : LibC::Float*, d2 : LibC::Float*, b : LibC::Float*, ldb : Int32*, wr : LibC::Float*, wi : LibC::Float*, x : LibC::Float*, ldx : Int32*, scale : LibC::Float*, xnorm : LibC::Float*, info : Int32*)
    fun slals0(icompq : Int32*, nl : Int32*, nr : Int32*, sqre : Int32*, nrhs : Int32*, b : LibC::Float*, ldb : Int32*, bx : LibC::Float*, ldbx : Int32*, perm : Int32*, givptr : Int32*, givcol : Int32*, ldgcol : Int32*, givnum : LibC::Float*, ldgnum : Int32*, poles : LibC::Float*, difl : LibC::Float*, difr : LibC::Float*, z__ : LibC::Float*, k : Int32*, c__ : LibC::Float*, s : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun slalsa(icompq : Int32*, smlsiz : Int32*, n : Int32*, nrhs : Int32*, b : LibC::Float*, ldb : Int32*, bx : LibC::Float*, ldbx : Int32*, u : LibC::Float*, ldu : Int32*, vt : LibC::Float*, k : Int32*, difl : LibC::Float*, difr : LibC::Float*, z__ : LibC::Float*, poles : LibC::Float*, givptr : Int32*, givcol : Int32*, ldgcol : Int32*, perm : Int32*, givnum : LibC::Float*, c__ : LibC::Float*, s : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun slalsd(uplo : LibC::Char*, smlsiz : Int32*, n : Int32*, nrhs : Int32*, d__ : LibC::Float*, e : LibC::Float*, b : LibC::Float*, ldb : Int32*, rcond : LibC::Float*, rank : Int32*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun slamc1(beta : Int32*, t : Int32*, rnd : LibC::Char*, ieee1 : LibC::Char*)
    fun slamc2(beta : Int32*, t : Int32*, rnd : LibC::Char*, eps : LibC::Float*, emin : Int32*, rmin : LibC::Float*, emax : Int32*, rmax : LibC::Float*)
    fun slamc3(a : LibC::Float*, b : LibC::Float*) : LibC::Double
    fun slamc4(emin : Int32*, start : LibC::Float*, base : Int32*)
    fun slamc5(beta : Int32*, p : Int32*, emin : Int32*, ieee : LibC::Char*, emax : Int32*, rmax : LibC::Float*)
    fun slamch(cmach : LibC::Char*) : LapackFloatReturn
    fun slamrg(n1 : Int32*, n2 : Int32*, a : LibC::Float*, strd1 : Int32*, strd2 : Int32*, index : Int32*)
    fun slaneg(n : Int32*, d__ : LibC::Float*, lld : LibC::Float*, sigma : LibC::Float*, pivmin : LibC::Float*, r__ : Int32*) : Int32
    fun slangb(norm : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Float*, ldab : Int32*, work : LibC::Float*) : LapackFloatReturn
    fun slange(norm : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, work : LibC::Float*) : LapackFloatReturn
    fun slangt(norm : LibC::Char*, n : Int32*, dl : LibC::Float*, d : LibC::Float*, du : LibC::Float*) : LapackFloatReturn
    fun slanhs(norm : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, work : LibC::Float*) : LapackFloatReturn
    fun slansb(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, k : Int32*, ab : LibC::Float*, ldab : Int32*, work : LibC::Float*) : LapackFloatReturn
    fun slansf(norm : LibC::Char*, transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, work : LibC::Float*) : LapackFloatReturn
    fun slansp(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, work : LibC::Float*) : LapackFloatReturn
    fun slanst(norm : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*) : LapackFloatReturn
    fun slansy(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, work : LibC::Float*) : LapackFloatReturn
    fun slantb(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, k : Int32*, ab : LibC::Float*, ldab : Int32*, work : LibC::Float*) : LapackFloatReturn
    fun slantp(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, ap : LibC::Float*, work : LibC::Float*) : LapackFloatReturn
    fun slantr(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, work : LibC::Float*) : LapackFloatReturn
    fun slanv2(a : LibC::Float*, b : LibC::Float*, c__ : LibC::Float*, d__ : LibC::Float*, rt1r : LibC::Float*, rt1i : LibC::Float*, rt2r : LibC::Float*, rt2i : LibC::Float*, cs : LibC::Float*, sn : LibC::Float*)
    fun slapll(n : Int32*, x : LibC::Float*, incx : Int32*, y : LibC::Float*, incy : Int32*, ssmin : LibC::Float*)
    fun slapmr(forwrd : Int32*, m : Int32*, n : Int32*, x : LibC::Float*, ldx : Int32*, k : Int32*)
    fun slapmt(forwrd : Int32*, m : Int32*, n : Int32*, x : LibC::Float*, ldx : Int32*, k : Int32*)
    fun slapy2(x : LibC::Float*, y : LibC::Float*) : LapackFloatReturn
    fun slapy3(x : LibC::Float*, y : LibC::Float*, z : LibC::Float*) : LapackFloatReturn
    fun slaqgb(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : LibC::Float*, ldab : Int32*, r__ : LibC::Float*, c__ : LibC::Float*, rowcnd : LibC::Float*, colcnd : LibC::Float*, amax : LibC::Float*, equed : LibC::Char*)
    fun slaqge(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, r__ : LibC::Float*, c__ : LibC::Float*, rowcnd : LibC::Float*, colcnd : LibC::Float*, amax : LibC::Float*, equed : LibC::Char*)
    fun slaqp2(m : Int32*, n : Int32*, offset : Int32*, a : LibC::Float*, lda : Int32*, jpvt : Int32*, tau : LibC::Float*, vn1 : LibC::Float*, vn2 : LibC::Float*, work : LibC::Float*)
    fun slaqps(m : Int32*, n : Int32*, offset : Int32*, nb : Int32*, kb : Int32*, a : LibC::Float*, lda : Int32*, jpvt : Int32*, tau : LibC::Float*, vn1 : LibC::Float*, vn2 : LibC::Float*, auxv : LibC::Float*, f : LibC::Float*, ldf : Int32*)
    fun slaqr0(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h__ : LibC::Float*, ldh : Int32*, wr : LibC::Float*, wi : LibC::Float*, iloz : Int32*, ihiz : Int32*, z__ : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun slaqr1(n : Int32*, h__ : LibC::Float*, ldh : Int32*, sr1 : LibC::Float*, si1 : LibC::Float*, sr2 : LibC::Float*, si2 : LibC::Float*, v : LibC::Float*)
    fun slaqr2(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ktop : Int32*, kbot : Int32*, nw : Int32*, h__ : LibC::Float*, ldh : Int32*, iloz : Int32*, ihiz : Int32*, z__ : LibC::Float*, ldz : Int32*, ns : Int32*, nd : Int32*, sr : LibC::Float*, si : LibC::Float*, v : LibC::Float*, ldv : Int32*, nh : Int32*, t : LibC::Float*, ldt : Int32*, nv : Int32*, wv : LibC::Float*, ldwv : Int32*, work : LibC::Float*, lwork : Int32*)
    fun slaqr3(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ktop : Int32*, kbot : Int32*, nw : Int32*, h__ : LibC::Float*, ldh : Int32*, iloz : Int32*, ihiz : Int32*, z__ : LibC::Float*, ldz : Int32*, ns : Int32*, nd : Int32*, sr : LibC::Float*, si : LibC::Float*, v : LibC::Float*, ldv : Int32*, nh : Int32*, t : LibC::Float*, ldt : Int32*, nv : Int32*, wv : LibC::Float*, ldwv : Int32*, work : LibC::Float*, lwork : Int32*)
    fun slaqr4(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h__ : LibC::Float*, ldh : Int32*, wr : LibC::Float*, wi : LibC::Float*, iloz : Int32*, ihiz : Int32*, z__ : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun slaqr5(wantt : LibC::Char*, wantz : LibC::Char*, kacc22 : Int32*, n : Int32*, ktop : Int32*, kbot : Int32*, nshfts : Int32*, sr : LibC::Float*, si : LibC::Float*, h__ : LibC::Float*, ldh : Int32*, iloz : Int32*, ihiz : Int32*, z__ : LibC::Float*, ldz : Int32*, v : LibC::Float*, ldv : Int32*, u : LibC::Float*, ldu : Int32*, nv : Int32*, wv : LibC::Float*, ldwv : Int32*, nh : Int32*, wh : LibC::Float*, ldwh : Int32*)
    fun slaqsb(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Float*, ldab : Int32*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, equed : LibC::Char*)
    fun slaqsp(uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, equed : LibC::Char*)
    fun slaqsy(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, equed : LibC::Char*)
    fun slaqtr(ltran : LibC::Char*, lreal : LibC::Char*, n : Int32*, t : LibC::Float*, ldt : Int32*, b : LibC::Float*, w : LibC::Float*, scale : LibC::Float*, x : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun slar1v(n : Int32*, b1 : Int32*, bn : Int32*, lambda : LibC::Float*, d__ : LibC::Float*, l : LibC::Float*, ld : LibC::Float*, lld : LibC::Float*, pivmin : LibC::Float*, gaptol : LibC::Float*, z__ : LibC::Float*, wantnc : LibC::Char*, negcnt : Int32*, ztz : LibC::Float*, mingma : LibC::Float*, r__ : Int32*, isuppz : Int32*, nrminv : LibC::Float*, resid : LibC::Float*, rqcorr : LibC::Float*, work : LibC::Float*)
    fun slar2v(n : Int32*, x : LibC::Float*, y : LibC::Float*, z__ : LibC::Float*, incx : Int32*, c__ : LibC::Float*, s : LibC::Float*, incc : Int32*)
    fun slarf(side : LibC::Char*, m : Int32*, n : Int32*, v : LibC::Float*, incv : Int32*, tau : LibC::Float*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*)
    fun slarfb(side : LibC::Char*, trans : LibC::Char*, direct : LibC::Char*, storev : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, v : LibC::Float*, ldv : Int32*, t : LibC::Float*, ldt : Int32*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*, ldwork : Int32*)
    fun slarfg(n : Int32*, alpha : LibC::Float*, x : LibC::Float*, incx : Int32*, tau : LibC::Float*)
    fun slarfp(n : Int32*, alpha : LibC::Float*, x : LibC::Float*, incx : Int32*, tau : LibC::Float*)
    fun slarft(direct : LibC::Char*, storev : LibC::Char*, n : Int32*, k : Int32*, v : LibC::Float*, ldv : Int32*, tau : LibC::Float*, t : LibC::Float*, ldt : Int32*)
    fun slarfx(side : LibC::Char*, m : Int32*, n : Int32*, v : LibC::Float*, tau : LibC::Float*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*)
    fun slargv(n : Int32*, x : LibC::Float*, incx : Int32*, y : LibC::Float*, incy : Int32*, c__ : LibC::Float*, incc : Int32*)
    fun slarnv(idist : Int32*, iseed : Int32*, n : Int32*, x : LibC::Float*)
    fun slarra(n : Int32*, d__ : LibC::Float*, e : LibC::Float*, e2 : LibC::Float*, spltol : LibC::Float*, tnrm : LibC::Float*, nsplit : Int32*, isplit : Int32*, info : Int32*)
    fun slarrb(n : Int32*, d__ : LibC::Float*, lld : LibC::Float*, ifirst : Int32*, ilast : Int32*, rtol1 : LibC::Float*, rtol2 : LibC::Float*, offset : Int32*, w : LibC::Float*, wgap : LibC::Float*, werr : LibC::Float*, work : LibC::Float*, iwork : Int32*, pivmin : LibC::Float*, spdiam : LibC::Float*, twist : Int32*, info : Int32*)
    fun slarrc(jobt : LibC::Char*, n : Int32*, vl : LibC::Float*, vu : LibC::Float*, d__ : LibC::Float*, e : LibC::Float*, pivmin : LibC::Float*, eigcnt : Int32*, lcnt : Int32*, rcnt : Int32*, info : Int32*)
    fun slarrd(range : LibC::Char*, order : LibC::Char*, n : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, gers : LibC::Float*, reltol : LibC::Float*, d__ : LibC::Float*, e : LibC::Float*, e2 : LibC::Float*, pivmin : LibC::Float*, nsplit : Int32*, isplit : Int32*, m : Int32*, w : LibC::Float*, werr : LibC::Float*, wl : LibC::Float*, wu : LibC::Float*, iblock : Int32*, indexw : Int32*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun slarre(range : LibC::Char*, n : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, d__ : LibC::Float*, e : LibC::Float*, e2 : LibC::Float*, rtol1 : LibC::Float*, rtol2 : LibC::Float*, spltol : LibC::Float*, nsplit : Int32*, isplit : Int32*, m : Int32*, w : LibC::Float*, werr : LibC::Float*, wgap : LibC::Float*, iblock : Int32*, indexw : Int32*, gers : LibC::Float*, pivmin : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun slarrf(n : Int32*, d__ : LibC::Float*, l : LibC::Float*, ld : LibC::Float*, clstrt : Int32*, clend : Int32*, w : LibC::Float*, wgap : LibC::Float*, werr : LibC::Float*, spdiam : LibC::Float*, clgapl : LibC::Float*, clgapr : LibC::Float*, pivmin : LibC::Float*, sigma : LibC::Float*, dplus : LibC::Float*, lplus : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun slarrj(n : Int32*, d__ : LibC::Float*, e2 : LibC::Float*, ifirst : Int32*, ilast : Int32*, rtol : LibC::Float*, offset : Int32*, w : LibC::Float*, werr : LibC::Float*, work : LibC::Float*, iwork : Int32*, pivmin : LibC::Float*, spdiam : LibC::Float*, info : Int32*)
    fun slarrk(n : Int32*, iw : Int32*, gl : LibC::Float*, gu : LibC::Float*, d__ : LibC::Float*, e2 : LibC::Float*, pivmin : LibC::Float*, reltol : LibC::Float*, w : LibC::Float*, werr : LibC::Float*, info : Int32*)
    fun slarrr(n : Int32*, d__ : LibC::Float*, e : LibC::Float*, info : Int32*)
    fun slarrv(n : Int32*, vl : LibC::Float*, vu : LibC::Float*, d__ : LibC::Float*, l : LibC::Float*, pivmin : LibC::Float*, isplit : Int32*, m : Int32*, dol : Int32*, dou : Int32*, minrgp : LibC::Float*, rtol1 : LibC::Float*, rtol2 : LibC::Float*, w : LibC::Float*, werr : LibC::Float*, wgap : LibC::Float*, iblock : Int32*, indexw : Int32*, gers : LibC::Float*, z__ : LibC::Float*, ldz : Int32*, isuppz : Int32*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun slarscl2(m : Int32*, n : Int32*, d__ : LibC::Float*, x : LibC::Float*, ldx : Int32*)
    fun slartg(f : LibC::Float*, g : LibC::Float*, cs : LibC::Float*, sn : LibC::Float*, r__ : LibC::Float*)
    fun slartgp(f : LibC::Float*, g : LibC::Float*, cs : LibC::Float*, sn : LibC::Float*, r : LibC::Float*)
    fun slartgs(x : LibC::Float*, y : LibC::Float*, sigma : LibC::Float*, cs : LibC::Float*, sn : LibC::Float*)
    fun slartv(n : Int32*, x : LibC::Float*, incx : Int32*, y : LibC::Float*, incy : Int32*, c__ : LibC::Float*, s : LibC::Float*, incc : Int32*)
    fun slaruv(iseed : Int32*, n : Int32*, x : LibC::Float*)
    fun slarz(side : LibC::Char*, m : Int32*, n : Int32*, l : Int32*, v : LibC::Float*, incv : Int32*, tau : LibC::Float*, c__ : LibC::Float*, ldc : Int32*, work : LibC::Float*)
    fun slarzb(side : LibC::Char*, trans : LibC::Char*, direct : LibC::Char*, storev : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, v : LibC::Float*, ldv : Int32*, t : LibC::Float*, ldt : Int32*, c__ : LibC::Float*, ldc : Int32*, work : LibC::Float*, ldwork : Int32*)
    fun slarzt(direct : LibC::Char*, storev : LibC::Char*, n : Int32*, k : Int32*, v : LibC::Float*, ldv : Int32*, tau : LibC::Float*, t : LibC::Float*, ldt : Int32*)
    fun slas2(f : LibC::Float*, g : LibC::Float*, h__ : LibC::Float*, ssmin : LibC::Float*, ssmax : LibC::Float*)
    fun slascl(type : LibC::Char*, kl : Int32*, ku : Int32*, cfrom : LibC::Float*, cto : LibC::Float*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, info : Int32*)
    fun slascl2(m : Int32*, n : Int32*, d__ : LibC::Float*, x : LibC::Float*, ldx : Int32*)
    fun slasd0(n : Int32*, sqre : Int32*, d__ : LibC::Float*, e : LibC::Float*, u : LibC::Float*, ldu : Int32*, vt : LibC::Float*, ldvt : Int32*, smlsiz : Int32*, iwork : Int32*, work : LibC::Float*, info : Int32*)
    fun slasd1(nl : Int32*, nr : Int32*, sqre : Int32*, d__ : LibC::Float*, alpha : LibC::Float*, beta : LibC::Float*, u : LibC::Float*, ldu : Int32*, vt : LibC::Float*, ldvt : Int32*, idxq : Int32*, iwork : Int32*, work : LibC::Float*, info : Int32*)
    fun slasd2(nl : Int32*, nr : Int32*, sqre : Int32*, k : Int32*, d__ : LibC::Float*, z__ : LibC::Float*, alpha : LibC::Float*, beta : LibC::Float*, u : LibC::Float*, ldu : Int32*, vt : LibC::Float*, ldvt : Int32*, dsigma : LibC::Float*, u2 : LibC::Float*, ldu2 : Int32*, vt2 : LibC::Float*, ldvt2 : Int32*, idxp : Int32*, idx : Int32*, idxc : Int32*, idxq : Int32*, coltyp : Int32*, info : Int32*)
    fun slasd3(nl : Int32*, nr : Int32*, sqre : Int32*, k : Int32*, d__ : LibC::Float*, q : LibC::Float*, ldq : Int32*, dsigma : LibC::Float*, u : LibC::Float*, ldu : Int32*, u2 : LibC::Float*, ldu2 : Int32*, vt : LibC::Float*, ldvt : Int32*, vt2 : LibC::Float*, ldvt2 : Int32*, idxc : Int32*, ctot : Int32*, z__ : LibC::Float*, info : Int32*)
    fun slasd4(n : Int32*, i__ : Int32*, d__ : LibC::Float*, z__ : LibC::Float*, delta : LibC::Float*, rho : LibC::Float*, sigma : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun slasd5(i__ : Int32*, d__ : LibC::Float*, z__ : LibC::Float*, delta : LibC::Float*, rho : LibC::Float*, dsigma : LibC::Float*, work : LibC::Float*)
    fun slasd6(icompq : Int32*, nl : Int32*, nr : Int32*, sqre : Int32*, d__ : LibC::Float*, vf : LibC::Float*, vl : LibC::Float*, alpha : LibC::Float*, beta : LibC::Float*, idxq : Int32*, perm : Int32*, givptr : Int32*, givcol : Int32*, ldgcol : Int32*, givnum : LibC::Float*, ldgnum : Int32*, poles : LibC::Float*, difl : LibC::Float*, difr : LibC::Float*, z__ : LibC::Float*, k : Int32*, c__ : LibC::Float*, s : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun slasd7(icompq : Int32*, nl : Int32*, nr : Int32*, sqre : Int32*, k : Int32*, d__ : LibC::Float*, z__ : LibC::Float*, zw : LibC::Float*, vf : LibC::Float*, vfw : LibC::Float*, vl : LibC::Float*, vlw : LibC::Float*, alpha : LibC::Float*, beta : LibC::Float*, dsigma : LibC::Float*, idx : Int32*, idxp : Int32*, idxq : Int32*, perm : Int32*, givptr : Int32*, givcol : Int32*, ldgcol : Int32*, givnum : LibC::Float*, ldgnum : Int32*, c__ : LibC::Float*, s : LibC::Float*, info : Int32*)
    fun slasd8(icompq : Int32*, k : Int32*, d__ : LibC::Float*, z__ : LibC::Float*, vf : LibC::Float*, vl : LibC::Float*, difl : LibC::Float*, difr : LibC::Float*, lddifr : Int32*, dsigma : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun slasda(icompq : Int32*, smlsiz : Int32*, n : Int32*, sqre : Int32*, d__ : LibC::Float*, e : LibC::Float*, u : LibC::Float*, ldu : Int32*, vt : LibC::Float*, k : Int32*, difl : LibC::Float*, difr : LibC::Float*, z__ : LibC::Float*, poles : LibC::Float*, givptr : Int32*, givcol : Int32*, ldgcol : Int32*, perm : Int32*, givnum : LibC::Float*, c__ : LibC::Float*, s : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun slasdq(uplo : LibC::Char*, sqre : Int32*, n : Int32*, ncvt : Int32*, nru : Int32*, ncc : Int32*, d__ : LibC::Float*, e : LibC::Float*, vt : LibC::Float*, ldvt : Int32*, u : LibC::Float*, ldu : Int32*, c__ : LibC::Float*, ldc : Int32*, work : LibC::Float*, info : Int32*)
    fun slasdt(n : Int32*, lvl : Int32*, nd : Int32*, inode : Int32*, ndiml : Int32*, ndimr : Int32*, msub : Int32*)
    fun slaset(uplo : LibC::Char*, m : Int32*, n : Int32*, alpha : LibC::Float*, beta : LibC::Float*, a : LibC::Float*, lda : Int32*)
    fun slasq1(n : Int32*, d__ : LibC::Float*, e : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun slasq2(n : Int32*, z__ : LibC::Float*, info : Int32*)
    fun slasq3(i0 : Int32*, n0 : Int32*, z__ : LibC::Float*, pp : Int32*, dmin__ : LibC::Float*, sigma : LibC::Float*, desig : LibC::Float*, qmax : LibC::Float*, nfail : Int32*, iter : Int32*, ndiv : Int32*, ieee : LibC::Char*, ttype : Int32*, dmin1 : LibC::Float*, dmin2 : LibC::Float*, dn : LibC::Float*, dn1 : LibC::Float*, dn2 : LibC::Float*, g : LibC::Float*, tau : LibC::Float*)
    fun slasq4(i0 : Int32*, n0 : Int32*, z__ : LibC::Float*, pp : Int32*, n0in : Int32*, dmin__ : LibC::Float*, dmin1 : LibC::Float*, dmin2 : LibC::Float*, dn : LibC::Float*, dn1 : LibC::Float*, dn2 : LibC::Float*, tau : LibC::Float*, ttype : Int32*, g : LibC::Float*)
    fun slasq5(i0 : Int32*, n0 : Int32*, z__ : LibC::Float*, pp : Int32*, tau : LibC::Float*, dmin__ : LibC::Float*, dmin1 : LibC::Float*, dmin2 : LibC::Float*, dn : LibC::Float*, dnm1 : LibC::Float*, dnm2 : LibC::Float*, ieee : LibC::Char*)
    fun slasq6(i0 : Int32*, n0 : Int32*, z__ : LibC::Float*, pp : Int32*, dmin__ : LibC::Float*, dmin1 : LibC::Float*, dmin2 : LibC::Float*, dn : LibC::Float*, dnm1 : LibC::Float*, dnm2 : LibC::Float*)
    fun slasr(side : LibC::Char*, pivot : LibC::Char*, direct : LibC::Char*, m : Int32*, n : Int32*, c__ : LibC::Float*, s : LibC::Float*, a : LibC::Float*, lda : Int32*)
    fun slasrt(id : LibC::Char*, n : Int32*, d : LibC::Float*, info : Int32*)
    fun slassq(n : Int32*, x : LibC::Float*, incx : Int32*, scale : LibC::Float*, sumsq : LibC::Float*)
    fun slasv2(f : LibC::Float*, g : LibC::Float*, h__ : LibC::Float*, ssmin : LibC::Float*, ssmax : LibC::Float*, snr : LibC::Float*, csr : LibC::Float*, snl : LibC::Float*, csl : LibC::Float*)
    fun slaswp(n : Int32*, a : LibC::Float*, lda : Int32*, k1 : Int32*, k2 : Int32*, ipiv : Int32*, incx : Int32*)
    fun slasy2(ltranl : LibC::Char*, ltranr : LibC::Char*, isgn : Int32*, n1 : Int32*, n2 : Int32*, tl : LibC::Float*, ldtl : Int32*, tr : LibC::Float*, ldtr : Int32*, b : LibC::Float*, ldb : Int32*, scale : LibC::Float*, x : LibC::Float*, ldx : Int32*, xnorm : LibC::Float*, info : Int32*)
    fun slasyf(uplo : LibC::Char*, n : Int32*, nb : Int32*, kb : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, w : LibC::Float*, ldw : Int32*, info : Int32*)
    fun slatbs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, normin : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Float*, ldab : Int32*, x : LibC::Float*, scale : LibC::Float*, cnorm : LibC::Float*, info : Int32*)
    fun slatdf(ijob : Int32*, n : Int32*, z__ : LibC::Float*, ldz : Int32*, rhs : LibC::Float*, rdsum : LibC::Float*, rdscal : LibC::Float*, ipiv : Int32*, jpiv : Int32*)
    fun slatms(m : Int32*, n : Int32*, dist : LibC::Char*, iseed : Int32*, sym : LibC::Char*, d : LibC::Float*, mode : Int32*, cond : LibC::Float*, dmax : LibC::Float*, kl : Int32*, ku : Int32*, pack : LibC::Char*, a : LibC::Float*, lda : Int32*, work : LibC::Float*, info : Int32*)
    fun slatps(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, normin : LibC::Char*, n : Int32*, ap : LibC::Float*, x : LibC::Float*, scale : LibC::Float*, cnorm : LibC::Float*, info : Int32*)
    fun slatrd(uplo : LibC::Char*, n : Int32*, nb : Int32*, a : LibC::Float*, lda : Int32*, e : LibC::Float*, tau : LibC::Float*, w : LibC::Float*, ldw : Int32*)
    fun slatrs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, normin : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, x : LibC::Float*, scale : LibC::Float*, cnorm : LibC::Float*, info : Int32*)
    fun slatrz(m : Int32*, n : Int32*, l : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*)
    fun slatzm(side : LibC::Char*, m : Int32*, n : Int32*, v : LibC::Float*, incv : Int32*, tau : LibC::Float*, c1 : LibC::Float*, c2 : LibC::Float*, ldc : Int32*, work : LibC::Float*)
    fun slauu2(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, info : Int32*)
    fun slauum(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, info : Int32*)
    fun smaxloc(a : LibC::Float*, dimm : Int32*) : Int32
    fun sopgtr(uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, tau : LibC::Float*, q : LibC::Float*, ldq : Int32*, work : LibC::Float*, info : Int32*)
    fun sopmtr(side : LibC::Char*, uplo : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, ap : LibC::Float*, tau : LibC::Float*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*, info : Int32*)
    fun sorbdb(trans : LibC::Char*, signs : LibC::Char*, m : Int32*, p : Int32*, q : Int32*, x11 : LibC::Float*, ldx11 : Int32*, x12 : LibC::Float*, ldx12 : Int32*, x21 : LibC::Float*, ldx21 : Int32*, x22 : LibC::Float*, ldx22 : Int32*, theta : LibC::Float*, phi : LibC::Float*, taup1 : LibC::Float*, taup2 : LibC::Float*, tauq1 : LibC::Float*, tauq2 : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sorcsd(jobu1 : LibC::Char*, jobu2 : LibC::Char*, jobv1t : LibC::Char*, jobv2t : LibC::Char*, trans : LibC::Char*, signs : LibC::Char*, m : Int32*, p : Int32*, q : Int32*, x11 : LibC::Float*, ldx11 : Int32*, x12 : LibC::Float*, ldx12 : Int32*, x21 : LibC::Float*, ldx21 : Int32*, x22 : LibC::Float*, ldx22 : Int32*, theta : LibC::Float*, u1 : LibC::Float*, ldu1 : Int32*, u2 : LibC::Float*, ldu2 : Int32*, v1_t : LibC::Float*, ldv1t : Int32*, v2_t : LibC::Float*, ldv2t : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun sorcsd2by1(jobu1 : LibC::Char*, jobu2 : LibC::Char*, jobv1t : LibC::Char*, m : Int32*, p : Int32*, q : Int32*, x11 : LibC::Float*, ldx11 : Int32*, x21 : LibC::Float*, ldx21 : Int32*, theta : LibC::Float*, u1 : LibC::Float*, ldu1 : Int32*, u2 : LibC::Float*, ldu2 : Int32*, v1_t : LibC::Float*, ldv1t : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun sorg2l(m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun sorg2r(m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun sorgbr(vect : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sorghr(n : Int32*, ilo : Int32*, ihi : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sorgl2(m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun sorglq(m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sorgql(m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sorgqr(m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sorgr2(m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun sorgrq(m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sorgtr(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sorgtsqr_row(m : Int32*, n : Int32*, mb : Int32*, nb : Int32*, a : LibC::Float*, lda : Int32*, t : LibC::Float*, ldt : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sorm2l(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, c__ : LibC::Float*, ldc : Int32*, work : LibC::Float*, info : Int32*)
    fun sorm2r(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, c__ : LibC::Float*, ldc : Int32*, work : LibC::Float*, info : Int32*)
    fun sormbr(vect : LibC::Char*, side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sormhr(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, ilo : Int32*, ihi : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sorml2(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, c__ : LibC::Float*, ldc : Int32*, work : LibC::Float*, info : Int32*)
    fun sormlq(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sormql(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sormqr(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sormr2(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, c__ : LibC::Float*, ldc : Int32*, work : LibC::Float*, info : Int32*)
    fun sormr3(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, c__ : LibC::Float*, ldc : Int32*, work : LibC::Float*, info : Int32*)
    fun sormrq(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sormrz(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun sormtr(side : LibC::Char*, uplo : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, c : LibC::Float*, ldc : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun spbcon(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Float*, ldab : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun spbequ(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Float*, ldab : Int32*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, info : Int32*)
    fun spbrfs(uplo : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : LibC::Float*, ldab : Int32*, afb : LibC::Float*, ldafb : Int32*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun spbstf(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Float*, ldab : Int32*, info : Int32*)
    fun spbsv(uplo : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : LibC::Float*, ldab : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun spbsvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : LibC::Float*, ldab : Int32*, afb : LibC::Float*, ldafb : Int32*, equed : LibC::Char*, s : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun spbtf2(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Float*, ldab : Int32*, info : Int32*)
    fun spbtrf(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Float*, ldab : Int32*, info : Int32*)
    fun spbtrs(uplo : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : LibC::Float*, ldab : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun spftrf(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, info : Int32*)
    fun spftri(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, info : Int32*)
    fun spftrs(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun spocon(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun spoequ(n : Int32*, a : LibC::Float*, lda : Int32*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, info : Int32*)
    fun spoequb(n : Int32*, a : LibC::Float*, lda : Int32*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, info : Int32*)
    fun sporfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sporfsx(uplo : LibC::Char*, equed : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, s : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sposv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun sposvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, equed : LibC::Char*, s : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sposvxx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, equed : LibC::Char*, s : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, rpvgrw : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun spotf2(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, info : Int32*)
    fun spotrf(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, info : Int32*)
    fun spotrf2(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, info : Int32*)
    fun spotri(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, info : Int32*)
    fun spotrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun sppcon(uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, anorm : LibC::Float*, rcond : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sppequ(uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, info : Int32*)
    fun spprfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Float*, afp : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sppsv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Float*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun sppsvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Float*, afp : LibC::Float*, equed : LibC::Char*, s : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun spptrf(uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, info : Int32*)
    fun spptri(uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, info : Int32*)
    fun spptrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Float*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun spstf2(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, piv : Int32*, rank : Int32*, tol : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun spstrf(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, piv : Int32*, rank : Int32*, tol : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun sptcon(n : Int32*, d : LibC::Float*, e : LibC::Float*, anorm : LibC::Float*, rcond : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun spteqr(compz : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, info : Int32*)
    fun sptrfs(n : Int32*, nrhs : Int32*, d : LibC::Float*, e : LibC::Float*, df : LibC::Float*, ef : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun sptsv(n : Int32*, nrhs : Int32*, d : LibC::Float*, e : LibC::Float*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun sptsvx(fact : LibC::Char*, n : Int32*, nrhs : Int32*, d : LibC::Float*, e : LibC::Float*, df : LibC::Float*, ef : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun spttrf(n : Int32*, d : LibC::Float*, e : LibC::Float*, info : Int32*)
    fun spttrs(n : Int32*, nrhs : Int32*, d : LibC::Float*, e : LibC::Float*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun sptts2(n : Int32*, nrhs : Int32*, d__ : LibC::Float*, e : LibC::Float*, b : LibC::Float*, ldb : Int32*)
    fun srscl(n : Int32*, sa : LibC::Float*, sx : LibC::Float*, incx : Int32*)
    fun ssbev(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Float*, ldab : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, info : Int32*)
    fun ssbev_2stage(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Float*, ldab : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssbevd(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Float*, ldab : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun ssbevd_2stage(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Float*, ldab : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun ssbevx(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Float*, ldab : Int32*, q : LibC::Float*, ldq : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun ssbevx_2stage(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Float*, ldab : Int32*, q : LibC::Float*, ldq : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun ssbgst(vect : LibC::Char*, uplo : LibC::Char*, n : Int32*, ka : Int32*, kb : Int32*, ab : LibC::Float*, ldab : Int32*, bb : LibC::Float*, ldbb : Int32*, x : LibC::Float*, ldx : Int32*, work : LibC::Float*, info : Int32*)
    fun ssbgv(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ka : Int32*, kb : Int32*, ab : LibC::Float*, ldab : Int32*, bb : LibC::Float*, ldbb : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, info : Int32*)
    fun ssbgvd(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ka : Int32*, kb : Int32*, ab : LibC::Float*, ldab : Int32*, bb : LibC::Float*, ldbb : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun ssbgvx(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, ka : Int32*, kb : Int32*, ab : LibC::Float*, ldab : Int32*, bb : LibC::Float*, ldbb : Int32*, q : LibC::Float*, ldq : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun ssbtrd(vect : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Float*, ldab : Int32*, d : LibC::Float*, e : LibC::Float*, q : LibC::Float*, ldq : Int32*, work : LibC::Float*, info : Int32*)
    fun ssfrk(transr : LibC::Char*, uplo : LibC::Char*, trans : LibC::Char*, n : Int32*, k : Int32*, alpha : LibC::Float*, a : LibC::Float*, lda : Int32*, beta : LibC::Float*, c : LibC::Float*)
    fun sspcon(uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, ipiv : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sspev(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, info : Int32*)
    fun sspevd(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun sspevx(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun sspgst(itype : Int32*, uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, bp : LibC::Float*, info : Int32*)
    fun sspgv(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, bp : LibC::Float*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, info : Int32*)
    fun sspgvd(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, bp : LibC::Float*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun sspgvx(itype : Int32*, jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, bp : LibC::Float*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun ssprfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Float*, afp : LibC::Float*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sspsv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Float*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun sspsvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Float*, afp : LibC::Float*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun ssptrd(uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, d : LibC::Float*, e : LibC::Float*, tau : LibC::Float*, info : Int32*)
    fun ssptrf(uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, ipiv : Int32*, info : Int32*)
    fun ssptri(uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, ipiv : Int32*, work : LibC::Float*, info : Int32*)
    fun ssptrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Float*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun sstebz(range : LibC::Char*, order : LibC::Char*, n : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, d : LibC::Float*, e : LibC::Float*, m : Int32*, nsplit : Int32*, w : LibC::Float*, iblock : Int32*, isplit : Int32*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun sstedc(compz : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun sstegr(jobz : LibC::Char*, range : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, isuppz : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun sstein(n : Int32*, d : LibC::Float*, e : LibC::Float*, m : Int32*, w : LibC::Float*, iblock : Int32*, isplit : Int32*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun sstemr(jobz : LibC::Char*, range : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, m : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, nzc : Int32*, isuppz : Int32*, tryrac : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun ssteqr(compz : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, info : Int32*)
    fun ssterf(n : Int32*, d : LibC::Float*, e : LibC::Float*, info : Int32*)
    fun sstev(jobz : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, info : Int32*)
    fun sstevd(jobz : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun sstevr(jobz : LibC::Char*, range : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, isuppz : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun sstevx(jobz : LibC::Char*, range : LibC::Char*, n : Int32*, d : LibC::Float*, e : LibC::Float*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun ssycon(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun ssycon_3(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, e : LibC::Float*, ipiv : Int32*, anorm : LibC::Float*, rcond : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun ssyconv(uplo : LibC::Char*, way : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, e : LibC::Float*, info : Int32*)
    fun ssyequb(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, s : LibC::Float*, scond : LibC::Float*, amax : LibC::Float*, work : LibC::Float*, info : Int32*)
    fun ssyev(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, w : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssyev_2stage(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, w : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssyevd(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, w : LibC::Float*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun ssyevd_2stage(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, w : LibC::Float*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun ssyevr(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, isuppz : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun ssyevr_2stage(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, isuppz : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun ssyevx(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun ssyevx_2stage(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun ssygs2(itype : Int32*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun ssygst(itype : Int32*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun ssygv(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, w : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssygv_2stage(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, w : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssygvd(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, w : LibC::Float*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun ssygvx(itype : Int32*, jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, vl : LibC::Float*, vu : LibC::Float*, il : Int32*, iu : Int32*, abstol : LibC::Float*, m : Int32*, w : LibC::Float*, z : LibC::Float*, ldz : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun ssyrfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun ssyrfsx(uplo : LibC::Char*, equed : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, ipiv : Int32*, s : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun ssysv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssysv_aa(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssysv_aa_2stage(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, tb : LibC::Float*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, b : LibC::Float*, ldb : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssysv_rk(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, e : LibC::Float*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssysv_rook(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssysvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun ssysvxx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, af : LibC::Float*, ldaf : Int32*, ipiv : Int32*, equed : LibC::Char*, s : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, rcond : LibC::Float*, rpvgrw : LibC::Float*, berr : LibC::Float*, n_err_bnds : Int32*, err_bnds_norm : LibC::Float*, err_bnds_comp : LibC::Float*, nparams : Int32*, params : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun ssyswapr(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, i1 : Int32*, i2 : Int32*)
    fun ssytd2(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, d__ : LibC::Float*, e : LibC::Float*, tau : LibC::Float*, info : Int32*)
    fun ssytf2(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun ssytrd(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, d : LibC::Float*, e : LibC::Float*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssytrd_2stage(vect : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, d : LibC::Float*, e : LibC::Float*, tau : LibC::Float*, hous2 : LibC::Float*, lhous2 : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssytrf(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssytrf_aa(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssytrf_aa_2stage(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, tb : LibC::Float*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssytrf_rk(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, e : LibC::Float*, ipiv : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssytrf_rook(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssytri(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, work : LibC::Float*, info : Int32*)
    fun ssytri2(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssytri2x(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, work : LibC::Float*, nb : Int32*, info : Int32*)
    fun ssytri_3(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, e : LibC::Float*, ipiv : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssytrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun ssytrs2(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, work : LibC::Float*, info : Int32*)
    fun ssytrs_3(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, e : LibC::Float*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun ssytrs_aa(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun ssytrs_aa_2stage(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, tb : LibC::Float*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun ssytrs_rook(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, ipiv : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun stbcon(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, kd : Int32*, ab : LibC::Float*, ldab : Int32*, rcond : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun stbrfs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : LibC::Float*, ldab : Int32*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun stbtrs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : LibC::Float*, ldab : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun stfsm(transr : LibC::Char*, side : LibC::Char*, uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, m : Int32*, n : Int32*, alpha : LibC::Float*, a : LibC::Float*, b : LibC::Float*, ldb : Int32*)
    fun stftri(transr : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, a : LibC::Float*, info : Int32*)
    fun stfttp(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, arf : LibC::Float*, ap : LibC::Float*, info : Int32*)
    fun stfttr(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, arf : LibC::Float*, a : LibC::Float*, lda : Int32*, info : Int32*)
    fun stgevc(side : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, s : LibC::Float*, lds : Int32*, p : LibC::Float*, ldp : Int32*, vl : LibC::Float*, ldvl : Int32*, vr : LibC::Float*, ldvr : Int32*, mm : Int32*, m : Int32*, work : LibC::Float*, info : Int32*)
    fun stgex2(wantq : LibC::Char*, wantz : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, q : LibC::Float*, ldq : Int32*, z__ : LibC::Float*, ldz : Int32*, j1 : Int32*, n1 : Int32*, n2 : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun stgexc(wantq : Int32*, wantz : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, q : LibC::Float*, ldq : Int32*, z : LibC::Float*, ldz : Int32*, ifst : Int32*, ilst : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun stgsen(ijob : Int32*, wantq : Int32*, wantz : Int32*, select : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, alphar : LibC::Float*, alphai : LibC::Float*, beta : LibC::Float*, q : LibC::Float*, ldq : Int32*, z : LibC::Float*, ldz : Int32*, m : Int32*, pl : LibC::Float*, pr : LibC::Float*, dif : LibC::Float*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun stgsja(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, p : Int32*, n : Int32*, k : Int32*, l : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, tola : LibC::Float*, tolb : LibC::Float*, alpha : LibC::Float*, beta : LibC::Float*, u : LibC::Float*, ldu : Int32*, v : LibC::Float*, ldv : Int32*, q : LibC::Float*, ldq : Int32*, work : LibC::Float*, ncycle : Int32*, info : Int32*)
    fun stgsna(job : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, vl : LibC::Float*, ldvl : Int32*, vr : LibC::Float*, ldvr : Int32*, s : LibC::Float*, dif : LibC::Float*, mm : Int32*, m : Int32*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun stgsy2(trans : LibC::Char*, ijob : Int32*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, c__ : LibC::Float*, ldc : Int32*, d__ : LibC::Float*, ldd : Int32*, e : LibC::Float*, lde : Int32*, f : LibC::Float*, ldf : Int32*, scale : LibC::Float*, rdsum : LibC::Float*, rdscal : LibC::Float*, iwork : Int32*, pq : Int32*, info : Int32*)
    fun stgsyl(trans : LibC::Char*, ijob : Int32*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, c : LibC::Float*, ldc : Int32*, d : LibC::Float*, ldd : Int32*, e : LibC::Float*, lde : Int32*, f : LibC::Float*, ldf : Int32*, dif : LibC::Float*, scale : LibC::Float*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun stpcon(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, ap : LibC::Float*, rcond : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun stplqt(m : Int32*, n : Int32*, l : Int32*, mb : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, t : LibC::Float*, ldt : Int32*, work : LibC::Float*, info : Int32*)
    fun stplqt2(m : Int32*, n : Int32*, l : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, t : LibC::Float*, ldt : Int32*, info : Int32*)
    fun stpmlqt(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, mb : Int32*, v : LibC::Float*, ldv : Int32*, t : LibC::Float*, ldt : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, work : LibC::Float*, info : Int32*)
    fun stpmqrt(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, nb : Int32*, v : LibC::Float*, ldv : Int32*, t : LibC::Float*, ldt : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, work : LibC::Float*, info : Int32*)
    fun stpqrt(m : Int32*, n : Int32*, l : Int32*, nb : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, t : LibC::Float*, ldt : Int32*, work : LibC::Float*, info : Int32*)
    fun stpqrt2(m : Int32*, n : Int32*, l : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, t : LibC::Float*, ldt : Int32*, info : Int32*)
    fun stprfb(side : LibC::Char*, trans : LibC::Char*, direct : LibC::Char*, storev : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, v : LibC::Float*, ldv : Int32*, t : LibC::Float*, ldt : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, work : LibC::Float*, ldwork : Int32*)
    fun stprfs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Float*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun stptri(uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, ap : LibC::Float*, info : Int32*)
    fun stptrs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, nrhs : Int32*, ap : LibC::Float*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun stpttf(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, arf : LibC::Float*, info : Int32*)
    fun stpttr(uplo : LibC::Char*, n : Int32*, ap : LibC::Float*, a : LibC::Float*, lda : Int32*, info : Int32*)
    fun strcon(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, rcond : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun strevc(side : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, t : LibC::Float*, ldt : Int32*, vl : LibC::Float*, ldvl : Int32*, vr : LibC::Float*, ldvr : Int32*, mm : Int32*, m : Int32*, work : LibC::Float*, info : Int32*)
    fun strevc3(side : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, t : LibC::Float*, ldt : Int32*, vl : LibC::Float*, ldvl : Int32*, vr : LibC::Float*, ldvr : Int32*, mm : Int32*, m : Int32*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun strexc(compq : LibC::Char*, n : Int32*, t : LibC::Float*, ldt : Int32*, q : LibC::Float*, ldq : Int32*, ifst : Int32*, ilst : Int32*, work : LibC::Float*, info : Int32*)
    fun strrfs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, x : LibC::Float*, ldx : Int32*, ferr : LibC::Float*, berr : LibC::Float*, work : LibC::Float*, iwork : Int32*, info : Int32*)
    fun strsen(job : LibC::Char*, compq : LibC::Char*, select : Int32*, n : Int32*, t : LibC::Float*, ldt : Int32*, q : LibC::Float*, ldq : Int32*, wr : LibC::Float*, wi : LibC::Float*, m : Int32*, s : LibC::Float*, sep : LibC::Float*, work : LibC::Float*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun strsna(job : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, t : LibC::Float*, ldt : Int32*, vl : LibC::Float*, ldvl : Int32*, vr : LibC::Float*, ldvr : Int32*, s : LibC::Float*, sep : LibC::Float*, mm : Int32*, m : Int32*, work : LibC::Float*, ldwork : Int32*, iwork : Int32*, info : Int32*)
    fun strsyl(trana : LibC::Char*, tranb : LibC::Char*, isgn : Int32*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, c : LibC::Float*, ldc : Int32*, scale : LibC::Float*, info : Int32*)
    fun strsyl3(trana : LibC::Char*, tranb : LibC::Char*, isgn : Int32*, m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, c : LibC::Float*, ldc : Int32*, scale : LibC::Float*, iwork : Int32*, liwork : Int32*, swork : LibC::Float*, ldswork : Int32*, info : Int32*)
    fun strti2(uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, info : Int32*)
    fun strtri(uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, info : Int32*)
    fun strtrs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, nrhs : Int32*, a : LibC::Float*, lda : Int32*, b : LibC::Float*, ldb : Int32*, info : Int32*)
    fun strttf(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, arf : LibC::Float*, info : Int32*)
    fun strttp(uplo : LibC::Char*, n : Int32*, a : LibC::Float*, lda : Int32*, ap : LibC::Float*, info : Int32*)
    fun stzrqf(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, info : Int32*)
    fun stzrzf(m : Int32*, n : Int32*, a : LibC::Float*, lda : Int32*, tau : LibC::Float*, work : LibC::Float*, lwork : Int32*, info : Int32*)
    fun xerbla(srname : LibC::Char*, info : Int32*)
    fun xerbla_array_(srname_array__ : LibC::Char*, srname_len__ : Int32*, info : Int32*, srname_array_len : LibC::Int)
    fun zbbcsd(jobu1 : LibC::Char*, jobu2 : LibC::Char*, jobv1t : LibC::Char*, jobv2t : LibC::Char*, trans : LibC::Char*, m : Int32*, p : Int32*, q : Int32*, theta : LibC::Double*, phi : LibC::Double*, u1 : ComplexDouble*, ldu1 : Int32*, u2 : ComplexDouble*, ldu2 : Int32*, v1_t : ComplexDouble*, ldv1t : Int32*, v2_t : ComplexDouble*, ldv2t : Int32*, b11_d : LibC::Double*, b11_e : LibC::Double*, b12_d : LibC::Double*, b12_e : LibC::Double*, b21_d : LibC::Double*, b21_e : LibC::Double*, b22_d : LibC::Double*, b22_e : LibC::Double*, rwork : LibC::Double*, lrwork : Int32*, info : Int32*)
    fun zbdsqr(uplo : LibC::Char*, n : Int32*, ncvt : Int32*, nru : Int32*, ncc : Int32*, d : LibC::Double*, e : LibC::Double*, vt : ComplexDouble*, ldvt : Int32*, u : ComplexDouble*, ldu : Int32*, c : ComplexDouble*, ldc : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zcgesv(n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, work : ComplexDouble*, swork : ComplexFloat*, rwork : LibC::Double*, iter : Int32*, info : Int32*)
    fun zcposv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, work : ComplexDouble*, swork : ComplexFloat*, rwork : LibC::Double*, iter : Int32*, info : Int32*)
    fun zdrscl(n : Int32*, sa : LibC::Double*, sx : ComplexDouble*, incx : Int32*)
    fun zgbbrd(vect : LibC::Char*, m : Int32*, n : Int32*, ncc : Int32*, kl : Int32*, ku : Int32*, ab : ComplexDouble*, ldab : Int32*, d : LibC::Double*, e : LibC::Double*, q : ComplexDouble*, ldq : Int32*, pt : ComplexDouble*, ldpt : Int32*, c : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zgbcon(norm : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexDouble*, ldab : Int32*, ipiv : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zgbequ(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexDouble*, ldab : Int32*, r : LibC::Double*, c : LibC::Double*, rowcnd : LibC::Double*, colcnd : LibC::Double*, amax : LibC::Double*, info : Int32*)
    fun zgbequb(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexDouble*, ldab : Int32*, r : LibC::Double*, c : LibC::Double*, rowcnd : LibC::Double*, colcnd : LibC::Double*, amax : LibC::Double*, info : Int32*)
    fun zgbrfs(trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : ComplexDouble*, ldab : Int32*, afb : ComplexDouble*, ldafb : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zgbrfsx(trans : LibC::Char*, equed : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : ComplexDouble*, ldab : Int32*, afb : ComplexDouble*, ldafb : Int32*, ipiv : Int32*, r : LibC::Double*, c : LibC::Double*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zgbsv(n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : ComplexDouble*, ldab : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zgbsvx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : ComplexDouble*, ldab : Int32*, afb : ComplexDouble*, ldafb : Int32*, ipiv : Int32*, equed : LibC::Char*, r : LibC::Double*, c : LibC::Double*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zgbsvxx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : ComplexDouble*, ldab : Int32*, afb : ComplexDouble*, ldafb : Int32*, ipiv : Int32*, equed : LibC::Char*, r : LibC::Double*, c : LibC::Double*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, rpvgrw : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zgbtf2(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexDouble*, ldab : Int32*, ipiv : Int32*, info : Int32*)
    fun zgbtrf(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexDouble*, ldab : Int32*, ipiv : Int32*, info : Int32*)
    fun zgbtrs(trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : ComplexDouble*, ldab : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zgebak(job : LibC::Char*, side : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, scale : LibC::Double*, m : Int32*, v : ComplexDouble*, ldv : Int32*, info : Int32*)
    fun zgebal(job : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ilo : Int32*, ihi : Int32*, scale : LibC::Double*, info : Int32*)
    fun zgebd2(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, d__ : LibC::Double*, e : LibC::Double*, tauq : ComplexDouble*, taup : ComplexDouble*, work : ComplexDouble*, info : Int32*)
    fun zgebrd(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, d : LibC::Double*, e : LibC::Double*, tauq : ComplexDouble*, taup : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgecon(norm : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zgeequ(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, r : LibC::Double*, c : LibC::Double*, rowcnd : LibC::Double*, colcnd : LibC::Double*, amax : LibC::Double*, info : Int32*)
    fun zgeequb(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, r : LibC::Double*, c : LibC::Double*, rowcnd : LibC::Double*, colcnd : LibC::Double*, amax : LibC::Double*, info : Int32*)
    fun zgees(jobvs : LibC::Char*, sort : LibC::Char*, select : LapackZSelect1, n : Int32*, a : ComplexDouble*, lda : Int32*, sdim : Int32*, w : ComplexDouble*, vs : ComplexDouble*, ldvs : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, bwork : Int32*, info : Int32*)
    fun zgeesx(jobvs : LibC::Char*, sort : LibC::Char*, select : LapackZSelect1, sense : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, sdim : Int32*, w : ComplexDouble*, vs : ComplexDouble*, ldvs : Int32*, rconde : LibC::Double*, rcondv : LibC::Double*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, bwork : Int32*, info : Int32*)
    fun zgeev(jobvl : LibC::Char*, jobvr : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, w : ComplexDouble*, vl : ComplexDouble*, ldvl : Int32*, vr : ComplexDouble*, ldvr : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zgeevx(balanc : LibC::Char*, jobvl : LibC::Char*, jobvr : LibC::Char*, sense : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, w : ComplexDouble*, vl : ComplexDouble*, ldvl : Int32*, vr : ComplexDouble*, ldvr : Int32*, ilo : Int32*, ihi : Int32*, scale : LibC::Double*, abnrm : LibC::Double*, rconde : LibC::Double*, rcondv : LibC::Double*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zgegs(jobvsl : LibC::Char*, jobvsr : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, alpha : ComplexDouble*, beta : ComplexDouble*, vsl : ComplexDouble*, ldvsl : Int32*, vsr : ComplexDouble*, ldvsr : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zgegv(jobvl : LibC::Char*, jobvr : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, alpha : ComplexDouble*, beta : ComplexDouble*, vl : ComplexDouble*, ldvl : Int32*, vr : ComplexDouble*, ldvr : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zgehd2(n : Int32*, ilo : Int32*, ihi : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, info : Int32*)
    fun zgehrd(n : Int32*, ilo : Int32*, ihi : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgejsv(joba : LibC::Char*, jobu : LibC::Char*, jobv : LibC::Char*, jobr : LibC::Char*, jobt : LibC::Char*, jobp : LibC::Char*, m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, sva : LibC::Double*, u : ComplexDouble*, ldu : Int32*, v : ComplexDouble*, ldv : Int32*, cwork : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, iwork : Int32*, info : Int32*)
    fun zgelq(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, t : ComplexDouble*, tsize : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgelq2(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, info : Int32*)
    fun zgelqf(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgels(trans : LibC::Char*, m : Int32*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgelsd(m : Int32*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, s : LibC::Double*, rcond : LibC::Double*, rank : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, iwork : Int32*, info : Int32*)
    fun zgelss(m : Int32*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, s : LibC::Double*, rcond : LibC::Double*, rank : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zgelsx(m : Int32*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, jpvt : Int32*, rcond : LibC::Double*, rank : Int32*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zgelsy(m : Int32*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, jpvt : Int32*, rcond : LibC::Double*, rank : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zgemlq(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, t : ComplexDouble*, tsize : Int32*, c : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgemqr(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, t : ComplexDouble*, tsize : Int32*, c : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgemqrt(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, nb : Int32*, v : ComplexDouble*, ldv : Int32*, t : ComplexDouble*, ldt : Int32*, c : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, info : Int32*)
    fun zgeql2(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, info : Int32*)
    fun zgeqlf(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgeqp3(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, jpvt : Int32*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zgeqpf(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, jpvt : Int32*, tau : ComplexDouble*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zgeqr(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, t : ComplexDouble*, tsize : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgeqr2(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, info : Int32*)
    fun zgeqrf(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgeqrfp(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgeqrt(m : Int32*, n : Int32*, nb : Int32*, a : ComplexDouble*, lda : Int32*, t : ComplexDouble*, ldt : Int32*, work : ComplexDouble*, info : Int32*)
    fun zgeqrt2(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, t : ComplexDouble*, ldt : Int32*, info : Int32*)
    fun zgeqrt3(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, t : ComplexDouble*, ldt : Int32*, info : Int32*)
    fun zgerfs(trans : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zgerfsx(trans : LibC::Char*, equed : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, r : LibC::Double*, c : LibC::Double*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zgerq2(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, info : Int32*)
    fun zgerqf(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgesc2(n : Int32*, a : ComplexDouble*, lda : Int32*, rhs : ComplexDouble*, ipiv : Int32*, jpiv : Int32*, scale : LibC::Double*)
    fun zgesdd(jobz : LibC::Char*, m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, s : LibC::Double*, u : ComplexDouble*, ldu : Int32*, vt : ComplexDouble*, ldvt : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, iwork : Int32*, info : Int32*)
    fun zgesv(n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zgesvd(jobu : LibC::Char*, jobvt : LibC::Char*, m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, s : LibC::Double*, u : ComplexDouble*, ldu : Int32*, vt : ComplexDouble*, ldvt : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zgesvdq(joba : LibC::Char*, jobp : LibC::Char*, jobr : LibC::Char*, jobu : LibC::Char*, jobv : LibC::Char*, m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, s : LibC::Double*, u : ComplexDouble*, ldu : Int32*, v : ComplexDouble*, ldv : Int32*, numrank : Int32*, iwork : Int32*, liwork : Int32*, cwork : ComplexDouble*, lcwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, info : Int32*)
    fun zgesvdx(jobu : LibC::Char*, jobvt : LibC::Char*, range : LibC::Char*, m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, ns : Int32*, s : LibC::Double*, u : ComplexDouble*, ldu : Int32*, vt : ComplexDouble*, ldvt : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, iwork : Int32*, info : Int32*)
    fun zgesvj(joba : LibC::Char*, jobu : LibC::Char*, jobv : LibC::Char*, m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, sva : LibC::Double*, mv : Int32*, v : ComplexDouble*, ldv : Int32*, cwork : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, info : Int32*)
    fun zgesvx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, equed : LibC::Char*, r : LibC::Double*, c : LibC::Double*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zgesvxx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, equed : LibC::Char*, r : LibC::Double*, c : LibC::Double*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, rpvgrw : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zgetc2(n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, jpiv : Int32*, info : Int32*)
    fun zgetf2(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun zgetrf(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun zgetrf2(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun zgetri(n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgetrs(trans : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zgetsls(trans : LibC::Char*, m : Int32*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgetsqrhrt(m : Int32*, n : Int32*, mb1 : Int32*, nb1 : Int32*, nb2 : Int32*, a : ComplexDouble*, lda : Int32*, t : ComplexDouble*, ldt : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zggbak(job : LibC::Char*, side : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, lscale : LibC::Double*, rscale : LibC::Double*, m : Int32*, v : ComplexDouble*, ldv : Int32*, info : Int32*)
    fun zggbal(job : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, ilo : Int32*, ihi : Int32*, lscale : LibC::Double*, rscale : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun zgges(jobvsl : LibC::Char*, jobvsr : LibC::Char*, sort : LibC::Char*, selctg : LapackZSelect2, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, sdim : Int32*, alpha : ComplexDouble*, beta : ComplexDouble*, vsl : ComplexDouble*, ldvsl : Int32*, vsr : ComplexDouble*, ldvsr : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, bwork : Int32*, info : Int32*)
    fun zgges3(jobvsl : LibC::Char*, jobvsr : LibC::Char*, sort : LibC::Char*, selctg : LapackZSelect2, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, sdim : Int32*, alpha : ComplexDouble*, beta : ComplexDouble*, vsl : ComplexDouble*, ldvsl : Int32*, vsr : ComplexDouble*, ldvsr : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, bwork : Int32*, info : Int32*)
    fun zggesx(jobvsl : LibC::Char*, jobvsr : LibC::Char*, sort : LibC::Char*, selctg : LapackZSelect2, sense : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, sdim : Int32*, alpha : ComplexDouble*, beta : ComplexDouble*, vsl : ComplexDouble*, ldvsl : Int32*, vsr : ComplexDouble*, ldvsr : Int32*, rconde : LibC::Double*, rcondv : LibC::Double*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, iwork : Int32*, liwork : Int32*, bwork : Int32*, info : Int32*)
    fun zggev(jobvl : LibC::Char*, jobvr : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, alpha : ComplexDouble*, beta : ComplexDouble*, vl : ComplexDouble*, ldvl : Int32*, vr : ComplexDouble*, ldvr : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zggev3(jobvl : LibC::Char*, jobvr : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, alpha : ComplexDouble*, beta : ComplexDouble*, vl : ComplexDouble*, ldvl : Int32*, vr : ComplexDouble*, ldvr : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zggevx(balanc : LibC::Char*, jobvl : LibC::Char*, jobvr : LibC::Char*, sense : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, alpha : ComplexDouble*, beta : ComplexDouble*, vl : ComplexDouble*, ldvl : Int32*, vr : ComplexDouble*, ldvr : Int32*, ilo : Int32*, ihi : Int32*, lscale : LibC::Double*, rscale : LibC::Double*, abnrm : LibC::Double*, bbnrm : LibC::Double*, rconde : LibC::Double*, rcondv : LibC::Double*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, iwork : Int32*, bwork : Int32*, info : Int32*)
    fun zggglm(n : Int32*, m : Int32*, p : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, d : ComplexDouble*, x : ComplexDouble*, y : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgghd3(compq : LibC::Char*, compz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, q : ComplexDouble*, ldq : Int32*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgghrd(compq : LibC::Char*, compz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, q : ComplexDouble*, ldq : Int32*, z : ComplexDouble*, ldz : Int32*, info : Int32*)
    fun zgglse(m : Int32*, n : Int32*, p : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, c : ComplexDouble*, d : ComplexDouble*, x : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zggqrf(n : Int32*, m : Int32*, p : Int32*, a : ComplexDouble*, lda : Int32*, taua : ComplexDouble*, b : ComplexDouble*, ldb : Int32*, taub : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zggrqf(m : Int32*, p : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, taua : ComplexDouble*, b : ComplexDouble*, ldb : Int32*, taub : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zggsvd(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, n : Int32*, p : Int32*, k : Int32*, l : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, alpha : LibC::Double*, beta : LibC::Double*, u : ComplexDouble*, ldu : Int32*, v : ComplexDouble*, ldv : Int32*, q : ComplexDouble*, ldq : Int32*, work : ComplexDouble*, rwork : LibC::Double*, iwork : Int32*, info : Int32*) : Int32
    fun zggsvd3(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, n : Int32*, p : Int32*, k : Int32*, l : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, alpha : LibC::Double*, beta : LibC::Double*, u : ComplexDouble*, ldu : Int32*, v : ComplexDouble*, ldv : Int32*, q : ComplexDouble*, ldq : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, iwork : Int32*, info : Int32*)
    fun zggsvp(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, p : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, tola : LibC::Double*, tolb : LibC::Double*, k : Int32*, l : Int32*, u : ComplexDouble*, ldu : Int32*, v : ComplexDouble*, ldv : Int32*, q : ComplexDouble*, ldq : Int32*, iwork : Int32*, rwork : LibC::Double*, tau : ComplexDouble*, work : ComplexDouble*, info : Int32*) : Int32
    fun zggsvp3(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, p : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, tola : LibC::Double*, tolb : LibC::Double*, k : Int32*, l : Int32*, u : ComplexDouble*, ldu : Int32*, v : ComplexDouble*, ldv : Int32*, q : ComplexDouble*, ldq : Int32*, iwork : Int32*, rwork : LibC::Double*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zgtcon(norm : LibC::Char*, n : Int32*, dl : ComplexDouble*, d : ComplexDouble*, du : ComplexDouble*, du2 : ComplexDouble*, ipiv : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : ComplexDouble*, info : Int32*)
    fun zgtrfs(trans : LibC::Char*, n : Int32*, nrhs : Int32*, dl : ComplexDouble*, d : ComplexDouble*, du : ComplexDouble*, dlf : ComplexDouble*, df : ComplexDouble*, duf : ComplexDouble*, du2 : ComplexDouble*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zgtsv(n : Int32*, nrhs : Int32*, dl : ComplexDouble*, d : ComplexDouble*, du : ComplexDouble*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zgtsvx(fact : LibC::Char*, trans : LibC::Char*, n : Int32*, nrhs : Int32*, dl : ComplexDouble*, d : ComplexDouble*, du : ComplexDouble*, dlf : ComplexDouble*, df : ComplexDouble*, duf : ComplexDouble*, du2 : ComplexDouble*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zgttrf(n : Int32*, dl : ComplexDouble*, d : ComplexDouble*, du : ComplexDouble*, du2 : ComplexDouble*, ipiv : Int32*, info : Int32*)
    fun zgttrs(trans : LibC::Char*, n : Int32*, nrhs : Int32*, dl : ComplexDouble*, d : ComplexDouble*, du : ComplexDouble*, du2 : ComplexDouble*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zgtts2(itrans : Int32*, n : Int32*, nrhs : Int32*, dl : ComplexDouble*, d__ : ComplexDouble*, du : ComplexDouble*, du2 : ComplexDouble*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*)
    fun zhbev(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexDouble*, ldab : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zhbev_2stage(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexDouble*, ldab : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zhbevd(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexDouble*, ldab : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun zhbevd_2stage(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexDouble*, ldab : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun zhbevx(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexDouble*, ldab : Int32*, q : ComplexDouble*, ldq : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, rwork : LibC::Double*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun zhbevx_2stage(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexDouble*, ldab : Int32*, q : ComplexDouble*, ldq : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun zhbgst(vect : LibC::Char*, uplo : LibC::Char*, n : Int32*, ka : Int32*, kb : Int32*, ab : ComplexDouble*, ldab : Int32*, bb : ComplexDouble*, ldbb : Int32*, x : ComplexDouble*, ldx : Int32*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zhbgv(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ka : Int32*, kb : Int32*, ab : ComplexDouble*, ldab : Int32*, bb : ComplexDouble*, ldbb : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zhbgvd(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ka : Int32*, kb : Int32*, ab : ComplexDouble*, ldab : Int32*, bb : ComplexDouble*, ldbb : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun zhbgvx(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, ka : Int32*, kb : Int32*, ab : ComplexDouble*, ldab : Int32*, bb : ComplexDouble*, ldbb : Int32*, q : ComplexDouble*, ldq : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, rwork : LibC::Double*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun zhbtrd(vect : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexDouble*, ldab : Int32*, d : LibC::Double*, e : LibC::Double*, q : ComplexDouble*, ldq : Int32*, work : ComplexDouble*, info : Int32*)
    fun zhecon(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : ComplexDouble*, info : Int32*)
    fun zhecon_3(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, e : ComplexDouble*, ipiv : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : ComplexDouble*, info : Int32*)
    fun zheequb(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, work : ComplexDouble*, info : Int32*)
    fun zheev(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, w : LibC::Double*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zheev_2stage(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, w : LibC::Double*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zheevd(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, w : LibC::Double*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun zheevd_2stage(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, w : LibC::Double*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun zheevr(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, isuppz : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun zheevr_2stage(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, isuppz : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun zheevx(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun zheevx_2stage(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun zhegs2(itype : Int32*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zhegst(itype : Int32*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zhegv(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, w : LibC::Double*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zhegv_2stage(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, w : LibC::Double*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zhegvd(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, w : LibC::Double*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun zhegvx(itype : Int32*, jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun zherfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zherfsx(uplo : LibC::Char*, equed : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, s : LibC::Double*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zhesv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zhesv_aa(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zhesv_aa_2stage(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, tb : ComplexDouble*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zhesv_rk(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, e : ComplexDouble*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zhesv_rook(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zhesvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zhesvxx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, equed : LibC::Char*, s : LibC::Double*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, rpvgrw : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zheswapr(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, i1 : Int32*, i2 : Int32*)
    fun zhetd2(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, d__ : LibC::Double*, e : LibC::Double*, tau : ComplexDouble*, info : Int32*)
    fun zhetf2(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun zhetrd(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, d : LibC::Double*, e : LibC::Double*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zhetrd_2stage(vect : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, d : LibC::Double*, e : LibC::Double*, tau : ComplexDouble*, hous2 : ComplexDouble*, lhous2 : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zhetrf(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zhetrf_aa(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zhetrf_aa_2stage(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, tb : ComplexDouble*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zhetrf_rk(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, e : ComplexDouble*, ipiv : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zhetrf_rook(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zhetri(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, work : ComplexDouble*, info : Int32*)
    fun zhetri2(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zhetri2x(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, work : ComplexDouble*, nb : Int32*, info : Int32*)
    fun zhetri_3(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, e : ComplexDouble*, ipiv : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zhetrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zhetrs2(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, info : Int32*)
    fun zhetrs_3(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, e : ComplexDouble*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zhetrs_aa(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zhetrs_aa_2stage(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, tb : ComplexDouble*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zhetrs_rook(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zhfrk(transr : LibC::Char*, uplo : LibC::Char*, trans : LibC::Char*, n : Int32*, k : Int32*, alpha : LibC::Double*, a : ComplexDouble*, lda : Int32*, beta : LibC::Double*, c : ComplexDouble*)
    fun zhgeqz(job : LibC::Char*, compq : LibC::Char*, compz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h : ComplexDouble*, ldh : Int32*, t : ComplexDouble*, ldt : Int32*, alpha : ComplexDouble*, beta : ComplexDouble*, q : ComplexDouble*, ldq : Int32*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zhpcon(uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, ipiv : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : ComplexDouble*, info : Int32*)
    fun zhpev(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zhpevd(jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun zhpevx(jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, rwork : LibC::Double*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun zhpgst(itype : Int32*, uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, bp : ComplexDouble*, info : Int32*)
    fun zhpgv(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, bp : ComplexDouble*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zhpgvd(itype : Int32*, jobz : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, bp : ComplexDouble*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun zhpgvx(itype : Int32*, jobz : LibC::Char*, range : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, bp : ComplexDouble*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, rwork : LibC::Double*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun zhprfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexDouble*, afp : ComplexDouble*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zhpsv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexDouble*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zhpsvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexDouble*, afp : ComplexDouble*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zhptrd(uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, d : LibC::Double*, e : LibC::Double*, tau : ComplexDouble*, info : Int32*)
    fun zhptrf(uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, ipiv : Int32*, info : Int32*)
    fun zhptri(uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, ipiv : Int32*, work : ComplexDouble*, info : Int32*)
    fun zhptrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexDouble*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zhsein(side : LibC::Char*, eigsrc : LibC::Char*, initv : LibC::Char*, select : Int32*, n : Int32*, h : ComplexDouble*, ldh : Int32*, w : ComplexDouble*, vl : ComplexDouble*, ldvl : Int32*, vr : ComplexDouble*, ldvr : Int32*, mm : Int32*, m : Int32*, work : ComplexDouble*, rwork : LibC::Double*, ifaill : Int32*, ifailr : Int32*, info : Int32*)
    fun zhseqr(job : LibC::Char*, compz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h : ComplexDouble*, ldh : Int32*, w : ComplexDouble*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zla_gbamv_(trans : Int32*, m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, alpha : LibC::Double*, ab : ComplexDouble*, ldab : Int32*, x : ComplexDouble*, incx : Int32*, beta : LibC::Double*, y : LibC::Double*, incy : Int32*)
    fun zla_gbrcond_c_(trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexDouble*, ldab : Int32*, afb : ComplexDouble*, ldafb : Int32*, ipiv : Int32*, c__ : LibC::Double*, capply : LibC::Char*, info : Int32*, work : ComplexDouble*, rwork : LibC::Double*, trans_len : LibC::Int) : LibC::Double
    fun zla_gbrcond_x_(trans : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexDouble*, ldab : Int32*, afb : ComplexDouble*, ldafb : Int32*, ipiv : Int32*, x : ComplexDouble*, info : Int32*, work : ComplexDouble*, rwork : LibC::Double*, trans_len : LibC::Int) : LibC::Double
    fun zla_gbrfsx_extended_(prec_type__ : Int32*, trans_type__ : Int32*, n : Int32*, kl : Int32*, ku : Int32*, nrhs : Int32*, ab : ComplexDouble*, ldab : Int32*, afb : ComplexDouble*, ldafb : Int32*, ipiv : Int32*, colequ : LibC::Char*, c__ : LibC::Double*, b : ComplexDouble*, ldb : Int32*, y : ComplexDouble*, ldy : Int32*, berr_out__ : LibC::Double*, n_norms__ : Int32*, errs_n__ : LibC::Double*, errs_c__ : LibC::Double*, res : ComplexDouble*, ayb : LibC::Double*, dy : ComplexDouble*, y_tail__ : ComplexDouble*, rcond : LibC::Double*, ithresh : Int32*, rthresh : LibC::Double*, dz_ub__ : LibC::Double*, ignore_cwise__ : LibC::Char*, info : Int32*)
    fun zla_gbrpvgrw_(n : Int32*, kl : Int32*, ku : Int32*, ncols : Int32*, ab : ComplexDouble*, ldab : Int32*, afb : ComplexDouble*, ldafb : Int32*) : LibC::Double
    fun zla_geamv_(trans : Int32*, m : Int32*, n : Int32*, alpha : LibC::Double*, a : ComplexDouble*, lda : Int32*, x : ComplexDouble*, incx : Int32*, beta : LibC::Double*, y : LibC::Double*, incy : Int32*)
    fun zla_gercond_c_(trans : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, c__ : LibC::Double*, capply : LibC::Char*, info : Int32*, work : ComplexDouble*, rwork : LibC::Double*, trans_len : LibC::Int) : LibC::Double
    fun zla_gercond_x_(trans : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, x : ComplexDouble*, info : Int32*, work : ComplexDouble*, rwork : LibC::Double*, trans_len : LibC::Int) : LibC::Double
    fun zla_gerfsx_extended_(prec_type__ : Int32*, trans_type__ : Int32*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, colequ : LibC::Char*, c__ : LibC::Double*, b : ComplexDouble*, ldb : Int32*, y : ComplexDouble*, ldy : Int32*, berr_out__ : LibC::Double*, n_norms__ : Int32*, errs_n__ : LibC::Double*, errs_c__ : LibC::Double*, res : ComplexDouble*, ayb : LibC::Double*, dy : ComplexDouble*, y_tail__ : ComplexDouble*, rcond : LibC::Double*, ithresh : Int32*, rthresh : LibC::Double*, dz_ub__ : LibC::Double*, ignore_cwise__ : LibC::Char*, info : Int32*)
    fun zla_heamv_(uplo : Int32*, n : Int32*, alpha : LibC::Double*, a : ComplexDouble*, lda : Int32*, x : ComplexDouble*, incx : Int32*, beta : LibC::Double*, y : LibC::Double*, incy : Int32*)
    fun zla_hercond_c_(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, c__ : LibC::Double*, capply : LibC::Char*, info : Int32*, work : ComplexDouble*, rwork : LibC::Double*, uplo_len : LibC::Int) : LibC::Double
    fun zla_hercond_x_(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, x : ComplexDouble*, info : Int32*, work : ComplexDouble*, rwork : LibC::Double*, uplo_len : LibC::Int) : LibC::Double
    fun zla_herfsx_extended_(prec_type__ : Int32*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, colequ : LibC::Char*, c__ : LibC::Double*, b : ComplexDouble*, ldb : Int32*, y : ComplexDouble*, ldy : Int32*, berr_out__ : LibC::Double*, n_norms__ : Int32*, errs_n__ : LibC::Double*, errs_c__ : LibC::Double*, res : ComplexDouble*, ayb : LibC::Double*, dy : ComplexDouble*, y_tail__ : ComplexDouble*, rcond : LibC::Double*, ithresh : Int32*, rthresh : LibC::Double*, dz_ub__ : LibC::Double*, ignore_cwise__ : LibC::Char*, info : Int32*, uplo_len : LibC::Int)
    fun zla_herpvgrw_(uplo : LibC::Char*, n : Int32*, info : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, work : LibC::Double*, uplo_len : LibC::Int) : LibC::Double
    fun zla_lin_berr_(n : Int32*, nz : Int32*, nrhs : Int32*, res : ComplexDouble*, ayb : LibC::Double*, berr : LibC::Double*)
    fun zla_porcond_c_(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, c__ : LibC::Double*, capply : LibC::Char*, info : Int32*, work : ComplexDouble*, rwork : LibC::Double*, uplo_len : LibC::Int) : LibC::Double
    fun zla_porcond_x_(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, x : ComplexDouble*, info : Int32*, work : ComplexDouble*, rwork : LibC::Double*, uplo_len : LibC::Int) : LibC::Double
    fun zla_porfsx_extended_(prec_type__ : Int32*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, colequ : LibC::Char*, c__ : LibC::Double*, b : ComplexDouble*, ldb : Int32*, y : ComplexDouble*, ldy : Int32*, berr_out__ : LibC::Double*, n_norms__ : Int32*, errs_n__ : LibC::Double*, errs_c__ : LibC::Double*, res : ComplexDouble*, ayb : LibC::Double*, dy : ComplexDouble*, y_tail__ : ComplexDouble*, rcond : LibC::Double*, ithresh : Int32*, rthresh : LibC::Double*, dz_ub__ : LibC::Double*, ignore_cwise__ : LibC::Char*, info : Int32*, uplo_len : LibC::Int)
    fun zla_porpvgrw_(uplo : LibC::Char*, ncols : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, work : LibC::Double*, uplo_len : LibC::Int) : LibC::Double
    fun zla_rpvgrw_(n : Int32*, ncols : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*) : LibC::Double
    fun zla_syamv_(uplo : Int32*, n : Int32*, alpha : LibC::Double*, a : ComplexDouble*, lda : Int32*, x : ComplexDouble*, incx : Int32*, beta : LibC::Double*, y : LibC::Double*, incy : Int32*)
    fun zla_syrcond_c_(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, c__ : LibC::Double*, capply : LibC::Char*, info : Int32*, work : ComplexDouble*, rwork : LibC::Double*, uplo_len : LibC::Int) : LibC::Double
    fun zla_syrcond_x_(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, x : ComplexDouble*, info : Int32*, work : ComplexDouble*, rwork : LibC::Double*, uplo_len : LibC::Int) : LibC::Double
    fun zla_syrfsx_extended_(prec_type__ : Int32*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, colequ : LibC::Char*, c__ : LibC::Double*, b : ComplexDouble*, ldb : Int32*, y : ComplexDouble*, ldy : Int32*, berr_out__ : LibC::Double*, n_norms__ : Int32*, errs_n__ : LibC::Double*, errs_c__ : LibC::Double*, res : ComplexDouble*, ayb : LibC::Double*, dy : ComplexDouble*, y_tail__ : ComplexDouble*, rcond : LibC::Double*, ithresh : Int32*, rthresh : LibC::Double*, dz_ub__ : LibC::Double*, ignore_cwise__ : LibC::Char*, info : Int32*, uplo_len : LibC::Int)
    fun zla_syrpvgrw_(uplo : LibC::Char*, n : Int32*, info : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, work : LibC::Double*, uplo_len : LibC::Int) : LibC::Double
    fun zla_wwaddw_(n : Int32*, x : ComplexDouble*, y : ComplexDouble*, w : ComplexDouble*)
    fun zlabrd(m : Int32*, n : Int32*, nb : Int32*, a : ComplexDouble*, lda : Int32*, d__ : LibC::Double*, e : LibC::Double*, tauq : ComplexDouble*, taup : ComplexDouble*, x : ComplexDouble*, ldx : Int32*, y : ComplexDouble*, ldy : Int32*)
    fun zlacgv(n : Int32*, x : ComplexDouble*, incx : Int32*)
    fun zlacn2(n : Int32*, v : ComplexDouble*, x : ComplexDouble*, est : LibC::Double*, kase : Int32*, isave : Int32*)
    fun zlacon(n : Int32*, v : ComplexDouble*, x : ComplexDouble*, est : LibC::Double*, kase : Int32*)
    fun zlacp2(uplo : LibC::Char*, m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, b : ComplexDouble*, ldb : Int32*)
    fun zlacpy(uplo : LibC::Char*, m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*)
    fun zlacrm(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : LibC::Double*, ldb : Int32*, c : ComplexDouble*, ldc : Int32*, rwork : LibC::Double*)
    fun zlacrt(n : Int32*, cx : ComplexDouble*, incx : Int32*, cy : ComplexDouble*, incy : Int32*, c__ : ComplexDouble*, s : ComplexDouble*)
    fun zladiv(ret_val : ComplexDouble*, x : ComplexDouble*, y : ComplexDouble*)
    fun zlaed0(qsiz : Int32*, n : Int32*, d__ : LibC::Double*, e : LibC::Double*, q : ComplexDouble*, ldq : Int32*, qstore : ComplexDouble*, ldqs : Int32*, rwork : LibC::Double*, iwork : Int32*, info : Int32*)
    fun zlaed7(n : Int32*, cutpnt : Int32*, qsiz : Int32*, tlvls : Int32*, curlvl : Int32*, curpbm : Int32*, d__ : LibC::Double*, q : ComplexDouble*, ldq : Int32*, rho : LibC::Double*, indxq : Int32*, qstore : LibC::Double*, qptr : Int32*, prmptr : Int32*, perm : Int32*, givptr : Int32*, givcol : Int32*, givnum : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, iwork : Int32*, info : Int32*)
    fun zlaed8(k : Int32*, n : Int32*, qsiz : Int32*, q : ComplexDouble*, ldq : Int32*, d__ : LibC::Double*, rho : LibC::Double*, cutpnt : Int32*, z__ : LibC::Double*, dlamda : LibC::Double*, q2 : ComplexDouble*, ldq2 : Int32*, w : LibC::Double*, indxp : Int32*, indx : Int32*, indxq : Int32*, perm : Int32*, givptr : Int32*, givcol : Int32*, givnum : LibC::Double*, info : Int32*)
    fun zlaein(rightv : LibC::Char*, noinit : LibC::Char*, n : Int32*, h__ : ComplexDouble*, ldh : Int32*, w : ComplexDouble*, v : ComplexDouble*, b : ComplexDouble*, ldb : Int32*, rwork : LibC::Double*, eps3 : LibC::Double*, smlnum : LibC::Double*, info : Int32*)
    fun zlaesy(a : ComplexDouble*, b : ComplexDouble*, c__ : ComplexDouble*, rt1 : ComplexDouble*, rt2 : ComplexDouble*, evscal : ComplexDouble*, cs1 : ComplexDouble*, sn1 : ComplexDouble*)
    fun zlaev2(a : ComplexDouble*, b : ComplexDouble*, c__ : ComplexDouble*, rt1 : LibC::Double*, rt2 : LibC::Double*, cs1 : LibC::Double*, sn1 : ComplexDouble*)
    fun zlag2c(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, sa : ComplexFloat*, ldsa : Int32*, info : Int32*)
    fun zlagge(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, d : LibC::Double*, a : ComplexDouble*, lda : Int32*, iseed : Int32*, work : ComplexDouble*, info : Int32*)
    fun zlaghe(n : Int32*, k : Int32*, d : LibC::Double*, a : ComplexDouble*, lda : Int32*, iseed : Int32*, work : ComplexDouble*, info : Int32*)
    fun zlags2(upper : LibC::Char*, a1 : LibC::Double*, a2 : ComplexDouble*, a3 : LibC::Double*, b1 : LibC::Double*, b2 : ComplexDouble*, b3 : LibC::Double*, csu : LibC::Double*, snu : ComplexDouble*, csv : LibC::Double*, snv : ComplexDouble*, csq : LibC::Double*, snq : ComplexDouble*)
    fun zlagsy(n : Int32*, k : Int32*, d : LibC::Double*, a : ComplexDouble*, lda : Int32*, iseed : Int32*, work : ComplexDouble*, info : Int32*)
    fun zlagtm(trans : LibC::Char*, n : Int32*, nrhs : Int32*, alpha : LibC::Double*, dl : ComplexDouble*, d__ : ComplexDouble*, du : ComplexDouble*, x : ComplexDouble*, ldx : Int32*, beta : LibC::Double*, b : ComplexDouble*, ldb : Int32*)
    fun zlahef(uplo : LibC::Char*, n : Int32*, nb : Int32*, kb : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, w : ComplexDouble*, ldw : Int32*, info : Int32*)
    fun zlahqr(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h__ : ComplexDouble*, ldh : Int32*, w : ComplexDouble*, iloz : Int32*, ihiz : Int32*, z__ : ComplexDouble*, ldz : Int32*, info : Int32*)
    fun zlahr2(n : Int32*, k : Int32*, nb : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, t : ComplexDouble*, ldt : Int32*, y : ComplexDouble*, ldy : Int32*)
    fun zlahrd(n : Int32*, k : Int32*, nb : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, t : ComplexDouble*, ldt : Int32*, y : ComplexDouble*, ldy : Int32*)
    fun zlaic1(job : Int32*, j : Int32*, x : ComplexDouble*, sest : LibC::Double*, w : ComplexDouble*, gamma : ComplexDouble*, sestpr : LibC::Double*, s : ComplexDouble*, c__ : ComplexDouble*)
    fun zlals0(icompq : Int32*, nl : Int32*, nr : Int32*, sqre : Int32*, nrhs : Int32*, b : ComplexDouble*, ldb : Int32*, bx : ComplexDouble*, ldbx : Int32*, perm : Int32*, givptr : Int32*, givcol : Int32*, ldgcol : Int32*, givnum : LibC::Double*, ldgnum : Int32*, poles : LibC::Double*, difl : LibC::Double*, difr : LibC::Double*, z__ : LibC::Double*, k : Int32*, c__ : LibC::Double*, s : LibC::Double*, rwork : LibC::Double*, info : Int32*)
    fun zlalsa(icompq : Int32*, smlsiz : Int32*, n : Int32*, nrhs : Int32*, b : ComplexDouble*, ldb : Int32*, bx : ComplexDouble*, ldbx : Int32*, u : LibC::Double*, ldu : Int32*, vt : LibC::Double*, k : Int32*, difl : LibC::Double*, difr : LibC::Double*, z__ : LibC::Double*, poles : LibC::Double*, givptr : Int32*, givcol : Int32*, ldgcol : Int32*, perm : Int32*, givnum : LibC::Double*, c__ : LibC::Double*, s : LibC::Double*, rwork : LibC::Double*, iwork : Int32*, info : Int32*)
    fun zlalsd(uplo : LibC::Char*, smlsiz : Int32*, n : Int32*, nrhs : Int32*, d__ : LibC::Double*, e : LibC::Double*, b : ComplexDouble*, ldb : Int32*, rcond : LibC::Double*, rank : Int32*, work : ComplexDouble*, rwork : LibC::Double*, iwork : Int32*, info : Int32*)
    fun zlangb(norm : LibC::Char*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexDouble*, ldab : Int32*, work : LibC::Double*) : LibC::Double
    fun zlange(norm : LibC::Char*, m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, work : LibC::Double*) : LibC::Double
    fun zlangt(norm : LibC::Char*, n : Int32*, dl : ComplexDouble*, d : ComplexDouble*, du : ComplexDouble*) : LibC::Double
    fun zlanhb(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, k : Int32*, ab : ComplexDouble*, ldab : Int32*, work : LibC::Double*) : LibC::Double
    fun zlanhe(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, work : LibC::Double*) : LibC::Double
    fun zlanhf(norm : LibC::Char*, transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, work : LibC::Double*) : LibC::Double
    fun zlanhp(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, work : LibC::Double*) : LibC::Double
    fun zlanhs(norm : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, work : LibC::Double*) : LibC::Double
    fun zlanht(norm : LibC::Char*, n : Int32*, d : LibC::Double*, e : ComplexDouble*) : LibC::Double
    fun zlansb(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, k : Int32*, ab : ComplexDouble*, ldab : Int32*, work : LibC::Double*) : LibC::Double
    fun zlansp(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, work : LibC::Double*) : LibC::Double
    fun zlansy(norm : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, work : LibC::Double*) : LibC::Double
    fun zlantb(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, k : Int32*, ab : ComplexDouble*, ldab : Int32*, work : LibC::Double*) : LibC::Double
    fun zlantp(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, ap : ComplexDouble*, work : LibC::Double*) : LibC::Double
    fun zlantr(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, work : LibC::Double*) : LibC::Double
    fun zlapll(n : Int32*, x : ComplexDouble*, incx : Int32*, y : ComplexDouble*, incy : Int32*, ssmin : LibC::Double*)
    fun zlapmr(forwrd : Int32*, m : Int32*, n : Int32*, x : ComplexDouble*, ldx : Int32*, k : Int32*)
    fun zlapmt(forwrd : Int32*, m : Int32*, n : Int32*, x : ComplexDouble*, ldx : Int32*, k : Int32*)
    fun zlaqgb(m : Int32*, n : Int32*, kl : Int32*, ku : Int32*, ab : ComplexDouble*, ldab : Int32*, r__ : LibC::Double*, c__ : LibC::Double*, rowcnd : LibC::Double*, colcnd : LibC::Double*, amax : LibC::Double*, equed : LibC::Char*)
    fun zlaqge(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, r__ : LibC::Double*, c__ : LibC::Double*, rowcnd : LibC::Double*, colcnd : LibC::Double*, amax : LibC::Double*, equed : LibC::Char*)
    fun zlaqhb(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexDouble*, ldab : Int32*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, equed : LibC::Char*)
    fun zlaqhe(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, equed : LibC::Char*)
    fun zlaqhp(uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, equed : LibC::Char*)
    fun zlaqp2(m : Int32*, n : Int32*, offset : Int32*, a : ComplexDouble*, lda : Int32*, jpvt : Int32*, tau : ComplexDouble*, vn1 : LibC::Double*, vn2 : LibC::Double*, work : ComplexDouble*)
    fun zlaqps(m : Int32*, n : Int32*, offset : Int32*, nb : Int32*, kb : Int32*, a : ComplexDouble*, lda : Int32*, jpvt : Int32*, tau : ComplexDouble*, vn1 : LibC::Double*, vn2 : LibC::Double*, auxv : ComplexDouble*, f : ComplexDouble*, ldf : Int32*)
    fun zlaqr0(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h__ : ComplexDouble*, ldh : Int32*, w : ComplexDouble*, iloz : Int32*, ihiz : Int32*, z__ : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zlaqr1(n : Int32*, h__ : ComplexDouble*, ldh : Int32*, s1 : ComplexDouble*, s2 : ComplexDouble*, v : ComplexDouble*)
    fun zlaqr2(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ktop : Int32*, kbot : Int32*, nw : Int32*, h__ : ComplexDouble*, ldh : Int32*, iloz : Int32*, ihiz : Int32*, z__ : ComplexDouble*, ldz : Int32*, ns : Int32*, nd : Int32*, sh : ComplexDouble*, v : ComplexDouble*, ldv : Int32*, nh : Int32*, t : ComplexDouble*, ldt : Int32*, nv : Int32*, wv : ComplexDouble*, ldwv : Int32*, work : ComplexDouble*, lwork : Int32*)
    fun zlaqr3(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ktop : Int32*, kbot : Int32*, nw : Int32*, h__ : ComplexDouble*, ldh : Int32*, iloz : Int32*, ihiz : Int32*, z__ : ComplexDouble*, ldz : Int32*, ns : Int32*, nd : Int32*, sh : ComplexDouble*, v : ComplexDouble*, ldv : Int32*, nh : Int32*, t : ComplexDouble*, ldt : Int32*, nv : Int32*, wv : ComplexDouble*, ldwv : Int32*, work : ComplexDouble*, lwork : Int32*)
    fun zlaqr4(wantt : LibC::Char*, wantz : LibC::Char*, n : Int32*, ilo : Int32*, ihi : Int32*, h__ : ComplexDouble*, ldh : Int32*, w : ComplexDouble*, iloz : Int32*, ihiz : Int32*, z__ : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zlaqr5(wantt : LibC::Char*, wantz : LibC::Char*, kacc22 : Int32*, n : Int32*, ktop : Int32*, kbot : Int32*, nshfts : Int32*, s : ComplexDouble*, h__ : ComplexDouble*, ldh : Int32*, iloz : Int32*, ihiz : Int32*, z__ : ComplexDouble*, ldz : Int32*, v : ComplexDouble*, ldv : Int32*, u : ComplexDouble*, ldu : Int32*, nv : Int32*, wv : ComplexDouble*, ldwv : Int32*, nh : Int32*, wh : ComplexDouble*, ldwh : Int32*)
    fun zlaqsb(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexDouble*, ldab : Int32*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, equed : LibC::Char*)
    fun zlaqsp(uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, equed : LibC::Char*)
    fun zlaqsy(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, equed : LibC::Char*)
    fun zlar1v(n : Int32*, b1 : Int32*, bn : Int32*, lambda : LibC::Double*, d__ : LibC::Double*, l : LibC::Double*, ld : LibC::Double*, lld : LibC::Double*, pivmin : LibC::Double*, gaptol : LibC::Double*, z__ : ComplexDouble*, wantnc : LibC::Char*, negcnt : Int32*, ztz : LibC::Double*, mingma : LibC::Double*, r__ : Int32*, isuppz : Int32*, nrminv : LibC::Double*, resid : LibC::Double*, rqcorr : LibC::Double*, work : LibC::Double*)
    fun zlar2v(n : Int32*, x : ComplexDouble*, y : ComplexDouble*, z__ : ComplexDouble*, incx : Int32*, c__ : LibC::Double*, s : ComplexDouble*, incc : Int32*)
    fun zlarcm(m : Int32*, n : Int32*, a : LibC::Double*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, c : ComplexDouble*, ldc : Int32*, rwork : LibC::Double*)
    fun zlarf(side : LibC::Char*, m : Int32*, n : Int32*, v : ComplexDouble*, incv : Int32*, tau : ComplexDouble*, c : ComplexDouble*, ldc : Int32*, work : ComplexDouble*)
    fun zlarfb(side : LibC::Char*, trans : LibC::Char*, direct : LibC::Char*, storev : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, v : ComplexDouble*, ldv : Int32*, t : ComplexDouble*, ldt : Int32*, c : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, ldwork : Int32*)
    fun zlarfg(n : Int32*, alpha : ComplexDouble*, x : ComplexDouble*, incx : Int32*, tau : ComplexDouble*)
    fun zlarfp(n : Int32*, alpha : ComplexDouble*, x : ComplexDouble*, incx : Int32*, tau : ComplexDouble*)
    fun zlarft(direct : LibC::Char*, storev : LibC::Char*, n : Int32*, k : Int32*, v : ComplexDouble*, ldv : Int32*, tau : ComplexDouble*, t : ComplexDouble*, ldt : Int32*)
    fun zlarfx(side : LibC::Char*, m : Int32*, n : Int32*, v : ComplexDouble*, tau : ComplexDouble*, c : ComplexDouble*, ldc : Int32*, work : ComplexDouble*)
    fun zlargv(n : Int32*, x : ComplexDouble*, incx : Int32*, y : ComplexDouble*, incy : Int32*, c__ : LibC::Double*, incc : Int32*)
    fun zlarnv(idist : Int32*, iseed : Int32*, n : Int32*, x : ComplexDouble*)
    fun zlarrv(n : Int32*, vl : LibC::Double*, vu : LibC::Double*, d__ : LibC::Double*, l : LibC::Double*, pivmin : LibC::Double*, isplit : Int32*, m : Int32*, dol : Int32*, dou : Int32*, minrgp : LibC::Double*, rtol1 : LibC::Double*, rtol2 : LibC::Double*, w : LibC::Double*, werr : LibC::Double*, wgap : LibC::Double*, iblock : Int32*, indexw : Int32*, gers : LibC::Double*, z__ : ComplexDouble*, ldz : Int32*, isuppz : Int32*, work : LibC::Double*, iwork : Int32*, info : Int32*)
    fun zlarscl2(m : Int32*, n : Int32*, d__ : LibC::Double*, x : ComplexDouble*, ldx : Int32*)
    fun zlartg(f : ComplexDouble*, g : ComplexDouble*, cs : LibC::Double*, sn : ComplexDouble*, r__ : ComplexDouble*)
    fun zlartv(n : Int32*, x : ComplexDouble*, incx : Int32*, y : ComplexDouble*, incy : Int32*, c__ : LibC::Double*, s : ComplexDouble*, incc : Int32*)
    fun zlarz(side : LibC::Char*, m : Int32*, n : Int32*, l : Int32*, v : ComplexDouble*, incv : Int32*, tau : ComplexDouble*, c__ : ComplexDouble*, ldc : Int32*, work : ComplexDouble*)
    fun zlarzb(side : LibC::Char*, trans : LibC::Char*, direct : LibC::Char*, storev : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, v : ComplexDouble*, ldv : Int32*, t : ComplexDouble*, ldt : Int32*, c__ : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, ldwork : Int32*)
    fun zlarzt(direct : LibC::Char*, storev : LibC::Char*, n : Int32*, k : Int32*, v : ComplexDouble*, ldv : Int32*, tau : ComplexDouble*, t : ComplexDouble*, ldt : Int32*)
    fun zlascl(type : LibC::Char*, kl : Int32*, ku : Int32*, cfrom : LibC::Double*, cto : LibC::Double*, m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, info : Int32*)
    fun zlascl2(m : Int32*, n : Int32*, d__ : LibC::Double*, x : ComplexDouble*, ldx : Int32*)
    fun zlaset(uplo : LibC::Char*, m : Int32*, n : Int32*, alpha : ComplexDouble*, beta : ComplexDouble*, a : ComplexDouble*, lda : Int32*)
    fun zlasr(side : LibC::Char*, pivot : LibC::Char*, direct : LibC::Char*, m : Int32*, n : Int32*, c__ : LibC::Double*, s : LibC::Double*, a : ComplexDouble*, lda : Int32*)
    fun zlassq(n : Int32*, x : ComplexDouble*, incx : Int32*, scale : LibC::Double*, sumsq : LibC::Double*)
    fun zlaswp(n : Int32*, a : ComplexDouble*, lda : Int32*, k1 : Int32*, k2 : Int32*, ipiv : Int32*, incx : Int32*)
    fun zlasyf(uplo : LibC::Char*, n : Int32*, nb : Int32*, kb : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, w : ComplexDouble*, ldw : Int32*, info : Int32*)
    fun zlat2c(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, sa : ComplexFloat*, ldsa : Int32*, info : Int32*)
    fun zlatbs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, normin : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexDouble*, ldab : Int32*, x : ComplexDouble*, scale : LibC::Double*, cnorm : LibC::Double*, info : Int32*)
    fun zlatdf(ijob : Int32*, n : Int32*, z__ : ComplexDouble*, ldz : Int32*, rhs : ComplexDouble*, rdsum : LibC::Double*, rdscal : LibC::Double*, ipiv : Int32*, jpiv : Int32*)
    fun zlatms(m : Int32*, n : Int32*, dist : LibC::Char*, iseed : Int32*, sym : LibC::Char*, d : LibC::Double*, mode : Int32*, cond : LibC::Double*, dmax : LibC::Double*, kl : Int32*, ku : Int32*, pack : LibC::Char*, a : ComplexDouble*, lda : Int32*, work : ComplexDouble*, info : Int32*)
    fun zlatps(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, normin : LibC::Char*, n : Int32*, ap : ComplexDouble*, x : ComplexDouble*, scale : LibC::Double*, cnorm : LibC::Double*, info : Int32*)
    fun zlatrd(uplo : LibC::Char*, n : Int32*, nb : Int32*, a : ComplexDouble*, lda : Int32*, e : LibC::Double*, tau : ComplexDouble*, w : ComplexDouble*, ldw : Int32*)
    fun zlatrs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, normin : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, x : ComplexDouble*, scale : LibC::Double*, cnorm : LibC::Double*, info : Int32*)
    fun zlatrz(m : Int32*, n : Int32*, l : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*)
    fun zlatzm(side : LibC::Char*, m : Int32*, n : Int32*, v : ComplexDouble*, incv : Int32*, tau : ComplexDouble*, c1 : ComplexDouble*, c2 : ComplexDouble*, ldc : Int32*, work : ComplexDouble*)
    fun zlauu2(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, info : Int32*)
    fun zlauum(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, info : Int32*)
    fun zpbcon(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexDouble*, ldab : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zpbequ(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexDouble*, ldab : Int32*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, info : Int32*)
    fun zpbrfs(uplo : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : ComplexDouble*, ldab : Int32*, afb : ComplexDouble*, ldafb : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zpbstf(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexDouble*, ldab : Int32*, info : Int32*)
    fun zpbsv(uplo : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : ComplexDouble*, ldab : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zpbsvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : ComplexDouble*, ldab : Int32*, afb : ComplexDouble*, ldafb : Int32*, equed : LibC::Char*, s : LibC::Double*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zpbtf2(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexDouble*, ldab : Int32*, info : Int32*)
    fun zpbtrf(uplo : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexDouble*, ldab : Int32*, info : Int32*)
    fun zpbtrs(uplo : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : ComplexDouble*, ldab : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zpftrf(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, info : Int32*)
    fun zpftri(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, info : Int32*)
    fun zpftrs(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zpocon(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zpoequ(n : Int32*, a : ComplexDouble*, lda : Int32*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, info : Int32*)
    fun zpoequb(n : Int32*, a : ComplexDouble*, lda : Int32*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, info : Int32*)
    fun zporfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zporfsx(uplo : LibC::Char*, equed : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, s : LibC::Double*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zposv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zposvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, equed : LibC::Char*, s : LibC::Double*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zposvxx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, equed : LibC::Char*, s : LibC::Double*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, rpvgrw : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zpotf2(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, info : Int32*)
    fun zpotrf(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, info : Int32*)
    fun zpotrf2(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, info : Int32*)
    fun zpotri(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, info : Int32*)
    fun zpotrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zppcon(uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, anorm : LibC::Double*, rcond : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zppequ(uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, info : Int32*)
    fun zpprfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexDouble*, afp : ComplexDouble*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zppsv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexDouble*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zppsvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexDouble*, afp : ComplexDouble*, equed : LibC::Char*, s : LibC::Double*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zpptrf(uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, info : Int32*)
    fun zpptri(uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, info : Int32*)
    fun zpptrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexDouble*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zpstf2(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, piv : Int32*, rank : Int32*, tol : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun zpstrf(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, piv : Int32*, rank : Int32*, tol : LibC::Double*, work : LibC::Double*, info : Int32*)
    fun zptcon(n : Int32*, d : LibC::Double*, e : ComplexDouble*, anorm : LibC::Double*, rcond : LibC::Double*, rwork : LibC::Double*, info : Int32*)
    fun zpteqr(compz : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : LibC::Double*, info : Int32*)
    fun zptrfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, d : LibC::Double*, e : ComplexDouble*, df : LibC::Double*, ef : ComplexDouble*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zptsv(n : Int32*, nrhs : Int32*, d : LibC::Double*, e : ComplexDouble*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zptsvx(fact : LibC::Char*, n : Int32*, nrhs : Int32*, d : LibC::Double*, e : ComplexDouble*, df : LibC::Double*, ef : ComplexDouble*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zpttrf(n : Int32*, d : LibC::Double*, e : ComplexDouble*, info : Int32*)
    fun zpttrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, d : LibC::Double*, e : ComplexDouble*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zptts2(iuplo : Int32*, n : Int32*, nrhs : Int32*, d__ : LibC::Double*, e : ComplexDouble*, b : ComplexDouble*, ldb : Int32*)
    fun zrot(n : Int32*, cx : ComplexDouble*, incx : Int32*, cy : ComplexDouble*, incy : Int32*, c__ : LibC::Double*, s : ComplexDouble*)
    fun zspcon(uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, ipiv : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : ComplexDouble*, info : Int32*)
    fun zspmv(uplo : LibC::Char*, n : Int32*, alpha : ComplexDouble*, ap : ComplexDouble*, x : ComplexDouble*, incx : Int32*, beta : ComplexDouble*, y : ComplexDouble*, incy : Int32*)
    fun zspr(uplo : LibC::Char*, n : Int32*, alpha : ComplexDouble*, x : ComplexDouble*, incx : Int32*, ap : ComplexDouble*)
    fun zsprfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexDouble*, afp : ComplexDouble*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zspsv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexDouble*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zspsvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexDouble*, afp : ComplexDouble*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zsptrf(uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, ipiv : Int32*, info : Int32*)
    fun zsptri(uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, ipiv : Int32*, work : ComplexDouble*, info : Int32*)
    fun zsptrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexDouble*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zstedc(compz : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun zstegr(jobz : LibC::Char*, range : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, abstol : LibC::Double*, m : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, isuppz : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun zstein(n : Int32*, d : LibC::Double*, e : LibC::Double*, m : Int32*, w : LibC::Double*, iblock : Int32*, isplit : Int32*, z : ComplexDouble*, ldz : Int32*, work : LibC::Double*, iwork : Int32*, ifail : Int32*, info : Int32*)
    fun zstemr(jobz : LibC::Char*, range : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*, vl : LibC::Double*, vu : LibC::Double*, il : Int32*, iu : Int32*, m : Int32*, w : LibC::Double*, z : ComplexDouble*, ldz : Int32*, nzc : Int32*, isuppz : Int32*, tryrac : Int32*, work : LibC::Double*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun zsteqr(compz : LibC::Char*, n : Int32*, d : LibC::Double*, e : LibC::Double*, z : ComplexDouble*, ldz : Int32*, work : LibC::Double*, info : Int32*)
    fun zsycon(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : ComplexDouble*, info : Int32*)
    fun zsycon_3(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, e : ComplexDouble*, ipiv : Int32*, anorm : LibC::Double*, rcond : LibC::Double*, work : ComplexDouble*, info : Int32*)
    fun zsyconv(uplo : LibC::Char*, way : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, e : ComplexDouble*, info : Int32*)
    fun zsyequb(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, s : LibC::Double*, scond : LibC::Double*, amax : LibC::Double*, work : ComplexDouble*, info : Int32*)
    fun zsymv(uplo : LibC::Char*, n : Int32*, alpha : ComplexDouble*, a : ComplexDouble*, lda : Int32*, x : ComplexDouble*, incx : Int32*, beta : ComplexDouble*, y : ComplexDouble*, incy : Int32*)
    fun zsyr(uplo : LibC::Char*, n : Int32*, alpha : ComplexDouble*, x : ComplexDouble*, incx : Int32*, a : ComplexDouble*, lda : Int32*)
    fun zsyrfs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zsyrfsx(uplo : LibC::Char*, equed : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, s : LibC::Double*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zsysv(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zsysv_aa(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zsysv_aa_2stage(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, tb : ComplexDouble*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zsysv_rk(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, e : ComplexDouble*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zsysv_rook(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zsysvx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun zsysvxx(fact : LibC::Char*, uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, af : ComplexDouble*, ldaf : Int32*, ipiv : Int32*, equed : LibC::Char*, s : LibC::Double*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, rcond : LibC::Double*, rpvgrw : LibC::Double*, berr : LibC::Double*, n_err_bnds : Int32*, err_bnds_norm : LibC::Double*, err_bnds_comp : LibC::Double*, nparams : Int32*, params : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun zsyswapr(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, i1 : Int32*, i2 : Int32*)
    fun zsytf2(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, info : Int32*)
    fun zsytrf(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zsytrf_aa(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zsytrf_aa_2stage(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, tb : ComplexDouble*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zsytrf_rk(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, e : ComplexDouble*, ipiv : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zsytrf_rook(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zsytri(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, work : ComplexDouble*, info : Int32*)
    fun zsytri2(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zsytri2x(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, work : ComplexDouble*, nb : Int32*, info : Int32*)
    fun zsytri_3(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, e : ComplexDouble*, ipiv : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zsytrs(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zsytrs2(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, info : Int32*)
    fun zsytrs_3(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, e : ComplexDouble*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zsytrs_aa(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zsytrs_aa_2stage(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, tb : ComplexDouble*, ltb : Int32*, ipiv : Int32*, ipiv2 : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun zsytrs_rook(uplo : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, ipiv : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun ztbcon(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, kd : Int32*, ab : ComplexDouble*, ldab : Int32*, rcond : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun ztbrfs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : ComplexDouble*, ldab : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun ztbtrs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, kd : Int32*, nrhs : Int32*, ab : ComplexDouble*, ldab : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun ztfsm(transr : LibC::Char*, side : LibC::Char*, uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, m : Int32*, n : Int32*, alpha : ComplexDouble*, a : ComplexDouble*, b : ComplexDouble*, ldb : Int32*)
    fun ztftri(transr : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, a : ComplexDouble*, info : Int32*)
    fun ztfttp(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, arf : ComplexDouble*, ap : ComplexDouble*, info : Int32*)
    fun ztfttr(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, arf : ComplexDouble*, a : ComplexDouble*, lda : Int32*, info : Int32*)
    fun ztgevc(side : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, s : ComplexDouble*, lds : Int32*, p : ComplexDouble*, ldp : Int32*, vl : ComplexDouble*, ldvl : Int32*, vr : ComplexDouble*, ldvr : Int32*, mm : Int32*, m : Int32*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun ztgex2(wantq : LibC::Char*, wantz : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, q : ComplexDouble*, ldq : Int32*, z__ : ComplexDouble*, ldz : Int32*, j1 : Int32*, info : Int32*)
    fun ztgexc(wantq : Int32*, wantz : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, q : ComplexDouble*, ldq : Int32*, z : ComplexDouble*, ldz : Int32*, ifst : Int32*, ilst : Int32*, info : Int32*)
    fun ztgsen(ijob : Int32*, wantq : Int32*, wantz : Int32*, select : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, alpha : ComplexDouble*, beta : ComplexDouble*, q : ComplexDouble*, ldq : Int32*, z : ComplexDouble*, ldz : Int32*, m : Int32*, pl : LibC::Double*, pr : LibC::Double*, dif : LibC::Double*, work : ComplexDouble*, lwork : Int32*, iwork : Int32*, liwork : Int32*, info : Int32*)
    fun ztgsja(jobu : LibC::Char*, jobv : LibC::Char*, jobq : LibC::Char*, m : Int32*, p : Int32*, n : Int32*, k : Int32*, l : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, tola : LibC::Double*, tolb : LibC::Double*, alpha : LibC::Double*, beta : LibC::Double*, u : ComplexDouble*, ldu : Int32*, v : ComplexDouble*, ldv : Int32*, q : ComplexDouble*, ldq : Int32*, work : ComplexDouble*, ncycle : Int32*, info : Int32*)
    fun ztgsna(job : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, vl : ComplexDouble*, ldvl : Int32*, vr : ComplexDouble*, ldvr : Int32*, s : LibC::Double*, dif : LibC::Double*, mm : Int32*, m : Int32*, work : ComplexDouble*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun ztgsy2(trans : LibC::Char*, ijob : Int32*, m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, c__ : ComplexDouble*, ldc : Int32*, d__ : ComplexDouble*, ldd : Int32*, e : ComplexDouble*, lde : Int32*, f : ComplexDouble*, ldf : Int32*, scale : LibC::Double*, rdsum : LibC::Double*, rdscal : LibC::Double*, info : Int32*)
    fun ztgsyl(trans : LibC::Char*, ijob : Int32*, m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, c : ComplexDouble*, ldc : Int32*, d : ComplexDouble*, ldd : Int32*, e : ComplexDouble*, lde : Int32*, f : ComplexDouble*, ldf : Int32*, dif : LibC::Double*, scale : LibC::Double*, work : ComplexDouble*, lwork : Int32*, iwork : Int32*, info : Int32*)
    fun ztpcon(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, ap : ComplexDouble*, rcond : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun ztplqt(m : Int32*, n : Int32*, l : Int32*, mb : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, t : ComplexDouble*, ldt : Int32*, work : ComplexDouble*, info : Int32*)
    fun ztplqt2(m : Int32*, n : Int32*, l : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, t : ComplexDouble*, ldt : Int32*, info : Int32*)
    fun ztpmlqt(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, mb : Int32*, v : ComplexDouble*, ldv : Int32*, t : ComplexDouble*, ldt : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, info : Int32*)
    fun ztpmqrt(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, nb : Int32*, v : ComplexDouble*, ldv : Int32*, t : ComplexDouble*, ldt : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, info : Int32*)
    fun ztpqrt(m : Int32*, n : Int32*, l : Int32*, nb : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, t : ComplexDouble*, ldt : Int32*, work : ComplexDouble*, info : Int32*)
    fun ztpqrt2(m : Int32*, n : Int32*, l : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, t : ComplexDouble*, ldt : Int32*, info : Int32*)
    fun ztprfb(side : LibC::Char*, trans : LibC::Char*, direct : LibC::Char*, storev : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, v : ComplexDouble*, ldv : Int32*, t : ComplexDouble*, ldt : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, work : ComplexDouble*, ldwork : Int32*)
    fun ztprfs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexDouble*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun ztptri(uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, ap : ComplexDouble*, info : Int32*)
    fun ztptrs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, nrhs : Int32*, ap : ComplexDouble*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun ztpttf(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, arf : ComplexDouble*, info : Int32*)
    fun ztpttr(uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, a : ComplexDouble*, lda : Int32*, info : Int32*)
    fun ztrcon(norm : LibC::Char*, uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, rcond : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun ztrevc(side : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, t : ComplexDouble*, ldt : Int32*, vl : ComplexDouble*, ldvl : Int32*, vr : ComplexDouble*, ldvr : Int32*, mm : Int32*, m : Int32*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun ztrevc3(side : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, t : ComplexDouble*, ldt : Int32*, vl : ComplexDouble*, ldvl : Int32*, vr : ComplexDouble*, ldvr : Int32*, mm : Int32*, m : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, info : Int32*)
    fun ztrexc(compq : LibC::Char*, n : Int32*, t : ComplexDouble*, ldt : Int32*, q : ComplexDouble*, ldq : Int32*, ifst : Int32*, ilst : Int32*, info : Int32*)
    fun ztrrfs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, x : ComplexDouble*, ldx : Int32*, ferr : LibC::Double*, berr : LibC::Double*, work : ComplexDouble*, rwork : LibC::Double*, info : Int32*)
    fun ztrsen(job : LibC::Char*, compq : LibC::Char*, select : Int32*, n : Int32*, t : ComplexDouble*, ldt : Int32*, q : ComplexDouble*, ldq : Int32*, w : ComplexDouble*, m : Int32*, s : LibC::Double*, sep : LibC::Double*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun ztrsna(job : LibC::Char*, howmny : LibC::Char*, select : Int32*, n : Int32*, t : ComplexDouble*, ldt : Int32*, vl : ComplexDouble*, ldvl : Int32*, vr : ComplexDouble*, ldvr : Int32*, s : LibC::Double*, sep : LibC::Double*, mm : Int32*, m : Int32*, work : ComplexDouble*, ldwork : Int32*, rwork : LibC::Double*, info : Int32*)
    fun ztrsyl(trana : LibC::Char*, tranb : LibC::Char*, isgn : Int32*, m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, c : ComplexDouble*, ldc : Int32*, scale : LibC::Double*, info : Int32*)
    fun ztrsyl3(trana : LibC::Char*, tranb : LibC::Char*, isgn : Int32*, m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, c : ComplexDouble*, ldc : Int32*, scale : LibC::Double*, swork : LibC::Double*, ldswork : Int32*, info : Int32*)
    fun ztrti2(uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, info : Int32*)
    fun ztrtri(uplo : LibC::Char*, diag : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, info : Int32*)
    fun ztrtrs(uplo : LibC::Char*, trans : LibC::Char*, diag : LibC::Char*, n : Int32*, nrhs : Int32*, a : ComplexDouble*, lda : Int32*, b : ComplexDouble*, ldb : Int32*, info : Int32*)
    fun ztrttf(transr : LibC::Char*, uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, arf : ComplexDouble*, info : Int32*)
    fun ztrttp(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, ap : ComplexDouble*, info : Int32*)
    fun ztzrqf(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, info : Int32*)
    fun ztzrzf(m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zunbdb(trans : LibC::Char*, signs : LibC::Char*, m : Int32*, p : Int32*, q : Int32*, x11 : ComplexDouble*, ldx11 : Int32*, x12 : ComplexDouble*, ldx12 : Int32*, x21 : ComplexDouble*, ldx21 : Int32*, x22 : ComplexDouble*, ldx22 : Int32*, theta : LibC::Double*, phi : LibC::Double*, taup1 : ComplexDouble*, taup2 : ComplexDouble*, tauq1 : ComplexDouble*, tauq2 : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zuncsd(jobu1 : LibC::Char*, jobu2 : LibC::Char*, jobv1t : LibC::Char*, jobv2t : LibC::Char*, trans : LibC::Char*, signs : LibC::Char*, m : Int32*, p : Int32*, q : Int32*, x11 : ComplexDouble*, ldx11 : Int32*, x12 : ComplexDouble*, ldx12 : Int32*, x21 : ComplexDouble*, ldx21 : Int32*, x22 : ComplexDouble*, ldx22 : Int32*, theta : LibC::Double*, u1 : ComplexDouble*, ldu1 : Int32*, u2 : ComplexDouble*, ldu2 : Int32*, v1_t : ComplexDouble*, ldv1t : Int32*, v2_t : ComplexDouble*, ldv2t : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, iwork : Int32*, info : Int32*)
    fun zuncsd2by1(jobu1 : LibC::Char*, jobu2 : LibC::Char*, jobv1t : LibC::Char*, m : Int32*, p : Int32*, q : Int32*, x11 : ComplexDouble*, ldx11 : Int32*, x21 : ComplexDouble*, ldx21 : Int32*, theta : LibC::Double*, u1 : ComplexDouble*, ldu1 : Int32*, u2 : ComplexDouble*, ldu2 : Int32*, v1_t : ComplexDouble*, ldv1t : Int32*, work : ComplexDouble*, lwork : Int32*, rwork : LibC::Double*, lrwork : Int32*, iwork : Int32*, info : Int32*)
    fun zung2l(m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, info : Int32*)
    fun zung2r(m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, info : Int32*)
    fun zungbr(vect : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zunghr(n : Int32*, ilo : Int32*, ihi : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zungl2(m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, info : Int32*)
    fun zunglq(m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zungql(m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zungqr(m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zungr2(m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, info : Int32*)
    fun zungrq(m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zungtr(uplo : LibC::Char*, n : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zungtsqr_row(m : Int32*, n : Int32*, mb : Int32*, nb : Int32*, a : ComplexDouble*, lda : Int32*, t : ComplexDouble*, ldt : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zunm2l(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, c__ : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, info : Int32*)
    fun zunm2r(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, c__ : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, info : Int32*)
    fun zunmbr(vect : LibC::Char*, side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, c : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zunmhr(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, ilo : Int32*, ihi : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, c : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zunml2(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, c__ : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, info : Int32*)
    fun zunmlq(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, c : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zunmql(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, c : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zunmqr(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, c : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zunmr2(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, c__ : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, info : Int32*)
    fun zunmr3(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, c__ : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, info : Int32*)
    fun zunmrq(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, c : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zunmrz(side : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, k : Int32*, l : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, c : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zunmtr(side : LibC::Char*, uplo : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, a : ComplexDouble*, lda : Int32*, tau : ComplexDouble*, c : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, lwork : Int32*, info : Int32*)
    fun zupgtr(uplo : LibC::Char*, n : Int32*, ap : ComplexDouble*, tau : ComplexDouble*, q : ComplexDouble*, ldq : Int32*, work : ComplexDouble*, info : Int32*)
    fun zupmtr(side : LibC::Char*, uplo : LibC::Char*, trans : LibC::Char*, m : Int32*, n : Int32*, ap : ComplexDouble*, tau : ComplexDouble*, c : ComplexDouble*, ldc : Int32*, work : ComplexDouble*, info : Int32*)
  end
{% end %}
